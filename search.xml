<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS 了解</title>
    <url>/2019/07/02/CSS/</url>
    <content><![CDATA[<h1 id="css"><a class="markdownIt-Anchor" href="#css"></a> CSS</h1>
<h2 id="引入css样式表"><a class="markdownIt-Anchor" href="#引入css样式表"></a> 引入CSS样式表</h2>
<h3 id="内部样式表"><a class="markdownIt-Anchor" href="#内部样式表"></a> 内部样式表</h3>
<p>内嵌式式在HTML内部书写放在<head>中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">        .div&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="行内式内联样式"><a class="markdownIt-Anchor" href="#行内式内联样式"></a> 行内式（内联样式）</h3>
<p>内样式，行间样式，内嵌样式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span> <span class="attr">style</span>=<span class="string">&quot;属性：属性值&quot;</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="外部样式表外链式"><a class="markdownIt-Anchor" href="#外部样式表外链式"></a> 外部样式表（外链式）</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css文件路径&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>href：定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。<br />
type：定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。<br />
rel：定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</p>
<h2 id="三种样式表总结位置"><a class="markdownIt-Anchor" href="#三种样式表总结位置"></a> 三种样式表总结（位置）</h2>
<table>
<thead>
<tr>
<th>样式表</th>
<th>优点</th>
<th>缺点</th>
<th>使用情况</th>
<th>控制范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>行内样式表</td>
<td>书写方便，权重高</td>
<td>没有实现样式和结构相分离</td>
<td>较少</td>
<td>控制一个标签（少）</td>
</tr>
<tr>
<td>内部样式表</td>
<td>部分结构和样式相分离</td>
<td>没有彻底分离</td>
<td>较多</td>
<td>控制一个页面（中）</td>
</tr>
<tr>
<td>外部样式表</td>
<td>完全实现结构和样式相分离</td>
<td>需要引入</td>
<td>最多，强烈推荐</td>
<td>控制整个站点（多）</td>
</tr>
</tbody>
</table>
<h1 id="css样式规则"><a class="markdownIt-Anchor" href="#css样式规则"></a> CSS样式规则</h1>
<p>使用HTML时，需要遵从一定的规范。CSS亦如此，要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则，具体格式如下：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">在上面的样式规则中:</span></span><br><span class="line"></span><br><span class="line">1.选择器用于指定CSS样式作用的HTML对象，花括号内是对该对象设置的具体样式。</span><br><span class="line">2.属性和属性值以“键值对”的形式出现。</span><br><span class="line">3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。</span><br><span class="line"><span class="section">4.属性和属性值之间用英文“:”连接。</span></span><br><span class="line">5.多个“键值对”之间用英文“;”进行区分。</span><br><span class="line">可以用段落 和 表格的对齐的演示。</span><br></pre></td></tr></table></figure>
<h1 id="选择器"><a class="markdownIt-Anchor" href="#选择器"></a> 选择器</h1>
<h2 id="css基础选择器"><a class="markdownIt-Anchor" href="#css基础选择器"></a> css基础选择器</h2>
<h3 id="标签选择器元素选择器"><a class="markdownIt-Anchor" href="#标签选择器元素选择器"></a> 标签选择器（元素选择器）</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font-size</span>:<span class="number">10px</span>;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类选择器"><a class="markdownIt-Anchor" href="#类选择器"></a> 类选择器</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.it&#123;color:red;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;it&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="多类名选择器"><a class="markdownIt-Anchor" href="#多类名选择器"></a> 多类名选择器</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pink fontWeight font20&quot;</span>&gt;</span>亚瑟<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font20&quot;</span>&gt;</span>刘备<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font14 pink&quot;</span>&gt;</span>安其拉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;font14&quot;</span>&gt;</span>貂蝉<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="id-选择器"><a class="markdownIt-Anchor" href="#id-选择器"></a> id 选择器</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#id&#123;color:red;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="id-选择器和类名选择器区别"><a class="markdownIt-Anchor" href="#id-选择器和类名选择器区别"></a> id 选择器和类名选择器区别</h3>
<p>id 是唯一的，类名可以重复</p>
<h3 id="通配符选择器"><a class="markdownIt-Anchor" href="#通配符选择器"></a> 通配符选择器</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;&#125;</span><br></pre></td></tr></table></figure>
<h1 id="css字体样式"><a class="markdownIt-Anchor" href="#css字体样式"></a> CSS字体样式</h1>
<h3 id="font-size字号大小"><a class="markdownIt-Anchor" href="#font-size字号大小"></a> font-size：字号大小</h3>
<h3 id="font-family字体"><a class="markdownIt-Anchor" href="#font-family字体"></a> font-family：字体</h3>
<h3 id="css-unicode字体"><a class="markdownIt-Anchor" href="#css-unicode字体"></a> CSS Unicode字体</h3>
<p>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。xp 系统不支持 类似微软雅黑的中文。</p>
<p>方案一： 你可以使用英文来替代。 比如 font-family:“Microsoft Yahei”。</p>
<p>方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。<br />
font-family: “\5FAE\8F6F\96C5\9ED1”，表示设置字体为“微软雅黑”。</p>
<p>可以通过escape()  来测试属于什么字体。</p>
<table>
<thead>
<tr>
<th>字体名称</th>
<th>英文名称</th>
<th>Unicode 编码</th>
</tr>
</thead>
<tbody>
<tr>
<td>宋体</td>
<td>SimSun</td>
<td>\5B8B\4F53</td>
</tr>
<tr>
<td>新宋体</td>
<td>NSimSun</td>
<td>\65B0\5B8B\4F53</td>
</tr>
<tr>
<td>黑体</td>
<td>SimHei</td>
<td>\9ED1\4F53</td>
</tr>
<tr>
<td>微软雅黑</td>
<td>Microsoft YaHei</td>
<td>\5FAE\8F6F\96C5\9ED1</td>
</tr>
<tr>
<td>楷体_GB2312</td>
<td>KaiTi_GB2312</td>
<td>\6977\4F53_GB2312</td>
</tr>
<tr>
<td>隶书</td>
<td>LiSu</td>
<td>\96B6\4E66</td>
</tr>
<tr>
<td>幼园</td>
<td>YouYuan</td>
<td>\5E7C\5706</td>
</tr>
<tr>
<td>华文细黑</td>
<td>STXihei</td>
<td>\534E\6587\7EC6\9ED1</td>
</tr>
<tr>
<td>细明体</td>
<td>MingLiU</td>
<td>\7EC6\660E\4F53</td>
</tr>
<tr>
<td>新细明体</td>
<td>PMingLiU</td>
<td>\65B0\7EC6\660E\4F53</td>
</tr>
</tbody>
</table>
<p>为了照顾不同电脑的字体安装问题，我们尽量只使用宋体和微软雅黑中文字体</p>
<h3 id="font-weight字体粗细"><a class="markdownIt-Anchor" href="#font-weight字体粗细"></a> font-weight：字体粗细</h3>
<p>字体加粗还有 b 和 strong 标签之外。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-weight</span>属性用于定义字体的粗细，其可用属性值：<span class="attribute">normal</span>(<span class="number">400</span>)、bold(<span class="number">700</span>)、bolder、lighter、<span class="number">100</span>~<span class="number">900</span>（<span class="number">100</span>的整数倍）。</span><br></pre></td></tr></table></figure>
<h3 id="font-style字体风格"><a class="markdownIt-Anchor" href="#font-style字体风格"></a> font-style:字体风格</h3>
<p>字体倾斜除了用 i  和 em 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的。</p>
<p>font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：</p>
<p>normal：默认值，浏览器会显示标准的字体样式。</p>
<p>italic：浏览器会显示斜体的字体样式。</p>
<p>oblique：浏览器会显示倾斜的字体样式。</p>
<h3 id="font综合设置字体样式"><a class="markdownIt-Anchor" href="#font综合设置字体样式"></a> font：综合设置字体样式</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">font</span>:font-size font-weight font-size/line-height font-family;&#125;</span><br></pre></td></tr></table></figure>
<p>使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。<br />
注意：其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。</p>
<h1 id="css外观属性"><a class="markdownIt-Anchor" href="#css外观属性"></a> CSS外观属性</h1>
<h3 id="color文本颜色"><a class="markdownIt-Anchor" href="#color文本颜色"></a> color:文本颜色</h3>
<p>1.预定颜色值，例如 red blue</p>
<p>2.十六进制，例如 <code>#FF0000</code>，<code>#FF6600</code></p>
<p>3.RGB代码，rgb(255,0,0)</p>
<h3 id="line-height行间距"><a class="markdownIt-Anchor" href="#line-height行间距"></a> line-height：行间距</h3>
<ol>
<li>px</li>
<li>em</li>
<li>%</li>
</ol>
<h3 id="text-align水平对齐方式"><a class="markdownIt-Anchor" href="#text-align水平对齐方式"></a> text-align：水平对齐方式</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-align</span><span class="selector-pseudo">:left</span>(左对齐) <span class="attribute">right</span>(右对齐) center(居中对齐)</span><br></pre></td></tr></table></figure>
<h3 id="text-indent首行缩进"><a class="markdownIt-Anchor" href="#text-indent首行缩进"></a> text-indent：首行缩进</h3>
<ol>
<li>数值</li>
<li>em（建议，一个1 em 就是一个字的宽度）</li>
<li><code>%</code></li>
</ol>
<h3 id="text-decoration文本的装饰"><a class="markdownIt-Anchor" href="#text-decoration文本的装饰"></a> text-decoration:文本的装饰</h3>
<p>text-decoration   通常我们用于给链接修改装饰效果</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>默认。定义标准的文本。</td>
</tr>
<tr>
<td>underline</td>
<td>定义文本下的一条线。下划线 也是我们链接自带的</td>
</tr>
<tr>
<td>overline</td>
<td>定义文本上的一条线。</td>
</tr>
<tr>
<td>line-through</td>
<td>定义穿过文本下的一条线。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h1 id="css符合选择器"><a class="markdownIt-Anchor" href="#css符合选择器"></a> CSS符合选择器</h1>
<h3 id="交集选择器"><a class="markdownIt-Anchor" href="#交集选择器"></a> 交集选择器</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> <span class="selector-class">.one</span>&#123;&#125; 例如 类名 + <span class="selector-class">.one</span> 的段落标签</span><br></pre></td></tr></table></figure>
<h3 id="并集选择器"><a class="markdownIt-Anchor" href="#并集选择器"></a> 并集选择器</h3>
<p>通过 ， 相连接</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>,<span class="selector-tag">a</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="后代选择器"><a class="markdownIt-Anchor" href="#后代选择器"></a> 后代选择器</h3>
<p>又称包含选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class</span> <span class="selector-tag">h3</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="子元素选择器"><a class="markdownIt-Anchor" href="#子元素选择器"></a> 子元素选择器</h3>
<p>只能选择作为某元素子元素的元素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &gt; <span class="selector-tag">a</span>&#123;&#125;  或者 <span class="selector-class">.demo</span> &gt; <span class="selector-tag">p</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="伪类选择器"><a class="markdownIt-Anchor" href="#伪类选择器"></a> 伪类选择器</h3>
<p>例如  :link   :hover</p>
<h4 id="链接伪类选择器"><a class="markdownIt-Anchor" href="#链接伪类选择器"></a> 链接伪类选择器</h4>
<ul>
<li>
<p>:link      <code>未访问的链接</code></p>
</li>
<li>
<p>:visited   <code>已访问的链接 </code></p>
</li>
<li>
<p>:hover     <code>鼠标移动到链接上</code></p>
</li>
<li>
<p>:active    <code>选定的链接</code></p>
<p>注意写的时候，他们的顺序尽量不要颠倒  按照  lvha 的顺序。   love   hate  爱上了讨厌 记忆法    或者   lv 包包 非常 hao</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;   <span class="comment">/* a是标签选择器  所有的链接 */</span></span><br><span class="line">			<span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">			<span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">			<span class="attribute">color</span>: gray;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;   <span class="comment">/* :hover 是链接伪类选择器 鼠标经过 */</span></span><br><span class="line">			<span class="attribute">color</span>: red; <span class="comment">/*  鼠标经过的时候，由原来的 灰色 变成了红色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="css注释"><a class="markdownIt-Anchor" href="#css注释"></a> CSS注释</h1>
<p>通常使用 <code>/**/</code></p>
<h1 id="标签显示模式display"><a class="markdownIt-Anchor" href="#标签显示模式display"></a> 标签显示模式（display）</h1>
<h3 id="块级元素block-level"><a class="markdownIt-Anchor" href="#块级元素block-level"></a> 块级元素（block-level）</h3>
<h3 id="行内元素inline-level"><a class="markdownIt-Anchor" href="#行内元素inline-level"></a> 行内元素（inline-level）</h3>
<p>块级元素和行内元素区别</p>
<p>块级元素的特点：<br />
（1）总是从新行开始<br />
（2）高度，行高、外边距以及内边距都可以控制。<br />
（3）宽度默认是容器的100%<br />
（4）可以容纳内联元素和其他块元素。</p>
<p>行内元素的特点：<br />
（1）和相邻行内元素在一行上。<br />
（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。<br />
（3）默认宽度就是它本身内容的宽度。<br />
（4）行内元素只能容纳文本或则其他行内元素。</p>
<h3 id="行内块元素inline-block"><a class="markdownIt-Anchor" href="#行内块元素inline-block"></a> 行内块元素（inline-block）</h3>
<p>行内块元素的特点：<br />
（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。<br />
（2）默认宽度就是它本身内容的宽度。<br />
（3）高度，行高、外边距以及内边距都可以控制。</p>
<h2 id="标签显示模式转换-display"><a class="markdownIt-Anchor" href="#标签显示模式转换-display"></a> 标签显示模式转换 display</h2>
<p>块转行内：display:inline;</p>
<p>行内转块：display:block;</p>
<p>块、行内元素转换为行内块： display: inline-block;</p>
<h1 id="行高的测量"><a class="markdownIt-Anchor" href="#行高的测量"></a> 行高的测量</h1>
<h1 id="css三大特性"><a class="markdownIt-Anchor" href="#css三大特性"></a> CSS三大特性</h1>
<h2 id="css层叠性"><a class="markdownIt-Anchor" href="#css层叠性"></a> CSS层叠性</h2>
<p>样式叠加</p>
<h2 id="css继承性"><a class="markdownIt-Anchor" href="#css继承性"></a> css继承性</h2>
<p>子承父业</p>
<h2 id="css优先级"><a class="markdownIt-Anchor" href="#css优先级"></a> CSS优先级</h2>
<p>优先权重较高的</p>
<h3 id="css特殊性specificity"><a class="markdownIt-Anchor" href="#css特殊性specificity"></a> CSS特殊性（Specificity）</h3>
<p>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity，我们称为CSS 特性或称非凡性，它是一个衡量CSS值优先级的一个标准 具体规范入如下：</p>
<p>specificity用一个四位的数 字串(CSS2是三位)来表示，更像四个级别，值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。</p>
<table>
<thead>
<tr>
<th>继承或者* 的贡献值</th>
<th>0,0,0,0</th>
</tr>
</thead>
<tbody>
<tr>
<td>每个元素（标签）贡献值为</td>
<td>0,0,0,1</td>
</tr>
<tr>
<td>每个类，伪类贡献值为</td>
<td>0,0,1,0</td>
</tr>
<tr>
<td>每个ID贡献值为</td>
<td>0,1,0,0</td>
</tr>
<tr>
<td>每个行内样式贡献值</td>
<td>1,0,0,0</td>
</tr>
<tr>
<td>每个!important贡献值  重要的</td>
<td>∞ 无穷大</td>
</tr>
</tbody>
</table>
<p>权重是可以叠加的</p>
<p>比如的例子：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">ul</span>  <span class="selector-tag">li</span>   ------&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>   ------&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>      -----—&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">a</span>       ------&gt;      <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>   </span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-tag">p</span>       -----&gt;       <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>总结优先级：</p>
<ol>
<li>使用了 <code>!important</code>声明的规则。</li>
<li>内嵌在 HTML 元素的 style属性里面的声明。</li>
<li>使用了 ID 选择器的规则。</li>
<li>使用了类选择器、属性选择器、伪元素和伪类选择器的规则。</li>
<li>使用了元素选择器的规则。</li>
<li>只包含一个通用选择器的规则。</li>
<li>同一类选择器则遵循就近原则。</li>
</ol>
<h1 id="css背景background"><a class="markdownIt-Anchor" href="#css背景background"></a> css背景（background）</h1>
<p>CSS 可以添加背景颜色和背景图片，以及来进行图片设置。</p>
<table>
<thead>
<tr>
<th>background-color</th>
<th>背景颜色</th>
</tr>
</thead>
<tbody>
<tr>
<td>background-image</td>
<td>背景图片地址</td>
</tr>
<tr>
<td>background-repeat</td>
<td>是否平铺</td>
</tr>
<tr>
<td>background-position</td>
<td>背景位置</td>
</tr>
<tr>
<td>background-attachment</td>
<td>背景固定还是滚动</td>
</tr>
<tr>
<td>背景的合写（复合属性）</td>
<td></td>
</tr>
<tr>
<td>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="背景图片image"><a class="markdownIt-Anchor" href="#背景图片image"></a> 背景图片(image)</h2>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span> : none | url (url) </span><br></pre></td></tr></table></figure>
<p>参数：</p>
<p>none : 　无背景图（默认的）<br />
url : 　使用绝对或相对地址指定背景图像</p>
<p>background-image 属性允许指定一个图片展示在背景中（只有CSS3才可以多背景）可以和 background-color 连用。 如果图片不重复地话，图片覆盖不到地地方都会被背景色填充。 如果有背景图片平铺，则会覆盖背景颜色。</p>
<p>小技巧：  我们提倡 背景图片后面的地址，url不要加引号。</p>
<h2 id="背景平铺repeat"><a class="markdownIt-Anchor" href="#背景平铺repeat"></a> 背景平铺（repeat）</h2>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span> : repeat | no-repeat | repeat-x | repeat-y </span><br></pre></td></tr></table></figure>
<p>参数：</p>
<p>repeat : 　背景图像在纵向和横向上平铺（默认的）</p>
<p>no-repeat : 　背景图像不平铺</p>
<p>repeat-x : 　背景图像在横向上平铺</p>
<p>repeat-y : 　背景图像在纵向平铺</p>
<p>设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。</p>
<p>repeat-x : 　背景图像在横向上平铺</p>
<p>repeat-y : 　背景图像在纵向平铺</p>
<p>设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。</p>
<h2 id="背景位置position"><a class="markdownIt-Anchor" href="#背景位置position"></a> 背景位置(position)</h2>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-position</span> : length || length</span><br><span class="line"></span><br><span class="line">background-position : position || position </span><br></pre></td></tr></table></figure>
<p>参数：</p>
<p>length : 　百分数 | 由浮点数字和单位标识符组成的长度值。请参阅长度单位<br />
position : 　<code>top | center | bottom | left | center | right </code></p>
<p>说明：</p>
<p>设置或检索对象的背景图像位置。必须先指定background-image属性。默认值为：(0% 0%)。<br />
如果只指定了一个值，该值将用于横坐标。纵坐标将默认为50%。第二个值将用于纵坐标。</p>
<p>注意：</p>
<ol>
<li>position 后面是x坐标和y坐标。 可以使用方位名词或者 精确单位。</li>
<li>如果和精确单位和方位名字混合使用，则必须是x坐标在前，y坐标后面。比如 background-position: 15px top;   则 15px 一定是  x坐标   top是 y坐标。</li>
</ol>
<p>实际工作用的最多的，就是背景图片居中对齐了。</p>
<h2 id="背景附着"><a class="markdownIt-Anchor" href="#背景附着"></a> 背景附着</h2>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-attachment</span> : scroll | fixed </span><br></pre></td></tr></table></figure>
<p>参数：</p>
<p>scroll : 　背景图像是随对象内容滚动<br />
fixed : 　背景图像固定</p>
<p>说明：</p>
<p>设置或检索背景图像是随对象内容滚动还是固定的。</p>
<h2 id="背景简写"><a class="markdownIt-Anchor" href="#背景简写"></a> 背景简写</h2>
<p>background属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写：</p>
<p>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: transparent <span class="built_in">url</span>(<span class="string">image.jpg</span>) repeat-y  scroll <span class="number">50%</span> <span class="number">0</span> ;</span><br></pre></td></tr></table></figure>
<h2 id="背景透明css3"><a class="markdownIt-Anchor" href="#背景透明css3"></a> 背景透明(CSS3)</h2>
<p>CSS3支持背景半透明的写法语法格式是:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br></pre></td></tr></table></figure>
<p>最后一个参数是alpha 透明度  取值范围 0~1之间</p>
<p>注意：  背景半透明是指盒子背景半透明， 盒子里面的内容不收影响。</p>
<h1 id="盒子模型"><a class="markdownIt-Anchor" href="#盒子模型"></a> 盒子模型</h1>
<h2 id="盒子边框border"><a class="markdownIt-Anchor" href="#盒子边框border"></a> 盒子边框（border）</h2>
<p>边框就是那层皮。  橘子皮。。柚子皮。。橙子皮。。。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span> : border-width || border-style || border-color </span><br></pre></td></tr></table></figure>
<p>边框属性—设置边框样式（border-style）</p>
<p>边框样式用于定义页面中边框的风格，常用属性值如下：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">none</span>：没有边框即忽略所有边框的宽度（默认值）</span><br><span class="line"></span><br><span class="line">solid：边框为单实线(最为常用的)</span><br><span class="line"></span><br><span class="line">dashed：边框为虚线  </span><br><span class="line"></span><br><span class="line">dotted：边框为点线</span><br><span class="line"></span><br><span class="line">double：边框为双实线</span><br></pre></td></tr></table></figure>
<h3 id="盒子边框写法总结表"><a class="markdownIt-Anchor" href="#盒子边框写法总结表"></a> 盒子边框写法总结表</h3>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>设置内容</td>
<td>样式属性</td>
<td>常用属性值</td>
</tr>
<tr>
<td>上边框</td>
<td>border-top-style:样式; border-top-width:宽度;border-top-color:颜色;border-top:宽度 样式 颜色;</td>
<td></td>
</tr>
<tr>
<td>下边框</td>
<td>border-bottom-style:样式;border- bottom-width:宽度;border- bottom-color:颜色;border-bottom:宽度 样式 颜色;</td>
<td></td>
</tr>
<tr>
<td>左边框</td>
<td>border-left-style:样式; border-left-width:宽度;border-left-color:颜色;border-left:宽度 样式 颜色;</td>
<td></td>
</tr>
<tr>
<td>右边框</td>
<td>border-right-style:样式;border-right-width:宽度;border-right-color:颜色;border-right:宽度 样式 颜色;</td>
<td></td>
</tr>
<tr>
<td>样式综合设置</td>
<td>border-style:上边 [右边 下边 左边];</td>
<td>none无（默认）、solid单实线、dashed虚线、dotted点线、double双实线</td>
</tr>
<tr>
<td>宽度综合设置</td>
<td>border-width:上边 [右边 下边 左边];</td>
<td>像素值</td>
</tr>
<tr>
<td>颜色综合设置</td>
<td>border-color:上边 [右边 下边 左边];</td>
<td>颜色值、<code>#十六进制</code>、rgb(r,g,b)、rgb(r%,g%,b%)</td>
</tr>
<tr>
<td>边框综合设置</td>
<td>border:四边宽度 四边样式 四边颜色;</td>
<td></td>
</tr>
</tbody>
</table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-top</span>: <span class="number">1px</span> solid red; <span class="comment">/*上边框*/</span></span><br><span class="line"><span class="attribute">border-bottom</span>: <span class="number">2px</span> solid green; <span class="comment">/*下边框*/</span></span><br><span class="line"><span class="attribute">border-left</span>: <span class="number">1px</span> solid blue;</span><br><span class="line"><span class="attribute">border-right</span>: <span class="number">5px</span> solid pink;</span><br><span class="line"></span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br></pre></td></tr></table></figure>
<h3 id="表格的细线边框"><a class="markdownIt-Anchor" href="#表格的细线边框"></a> 表格的细线边框</h3>
<p>以前学过的html表格边框很粗，这里只需要CSS一句话就可以美观起来。 让我们真的相信，CSS就是我们的白马王子（白雪公主）。</p>
<p>table{ border-collapse:collapse; }  collapse 单词是合并的意思</p>
<p>border-collapse:collapse; 表示相邻边框合并在一起。</p>
<h3 id="圆角边框css3"><a class="markdownIt-Anchor" href="#圆角边框css3"></a> 圆角边框(CSS3)</h3>
<p>从此以后，我们的世界不只有矩形。radius 半径（距离）</p>
<p>语法格式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br></pre></td></tr></table></figure>
<h2 id="内边距padding"><a class="markdownIt-Anchor" href="#内边距padding"></a> 内边距（padding）</h2>
<p>padding属性用于设置内边距。  是指 边框与内容之间的距离。</p>
<p>padding-top:上内边距</p>
<p>padding-right:右内边距</p>
<p>padding-bottom:下内边距</p>
<p>padding-left:左内边距</p>
<p>注意：  后面跟几个数值表示的意思是不一样的。</p>
<table>
<thead>
<tr>
<th>值的个数</th>
<th>表达意思</th>
</tr>
</thead>
<tbody>
<tr>
<td>1个值</td>
<td>padding：上下左右边距 比如padding: 3px; 表示上下左右都是3像素</td>
</tr>
<tr>
<td>2个值</td>
<td>padding: 上下边距 左右边距 比如 padding: 3px 5px; 表示 上下3像素 左右 5像素</td>
</tr>
<tr>
<td>3个值</td>
<td>padding：上边距 左右边距 下边距 比如 padding: 3px 5px 10px; 表示 上是3像素 左右是5像素 下是10像素</td>
</tr>
<tr>
<td>4个值</td>
<td>padding:上内边距 右内边距 下内边距 左内边距 比如: padding: 3px 5px 10px 15px; 表示 上3px 右是5px 下 10px 左15px 顺时针</td>
</tr>
</tbody>
</table>
<h2 id="边距margin"><a class="markdownIt-Anchor" href="#边距margin"></a> 边距（margin）</h2>
<p>margin属性用于设置外边距。  设置外边距会在元素之间创建“空白”， 这段空白通常不能放置其他内容。</p>
<p>margin-top:上外边距</p>
<p>margin-right:右外边距</p>
<p>margin-bottom:下外边距</p>
<p>margin-left:上外边距</p>
<p>margin:上外边距 右外边距  下外边距  左外边</p>
<p>取值顺序跟内边距相同。</p>
<h3 id="外边距实现盒子居中"><a class="markdownIt-Anchor" href="#外边距实现盒子居中"></a> 外边距实现盒子居中</h3>
<p>可以让一个盒子实现水平居中，需要满足一下两个条件：</p>
<ol>
<li>必须是块级元素。</li>
<li>盒子必须指定了宽度（width）</li>
</ol>
<p>然后就给<strong>左右的外边距都设置为auto</strong>，就可使块级元素水平居中。</p>
<p>实际工作中常用这种方式进行网页布局，示例代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123; <span class="attribute">width</span>:<span class="number">960px</span>; <span class="attribute">margin</span>:<span class="number">0</span> auto;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文字盒子居中图片和背景区别"><a class="markdownIt-Anchor" href="#文字盒子居中图片和背景区别"></a> 文字盒子居中图片和背景区别</h3>
<ol>
<li>文字水平居中是  text-align: center</li>
<li>盒子水平居中  左右margin 改为 auto</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-align</span>: center; <span class="comment">/*  文字居中水平 */</span></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> auto;  <span class="comment">/* 盒子水平居中  左右margin 改为 auto 就阔以了 */</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>插入图片 我们用的最多 比如产品展示类</li>
<li>背景图片我们一般用于小图标背景 或者 超大背景图片</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">img</span> &#123;  </span><br><span class="line">		<span class="attribute">width</span>: <span class="number">200px</span>;<span class="comment">/* 插入图片更改大小 width 和 height */</span></span><br><span class="line">		<span class="attribute">height</span>: <span class="number">210px</span>;</span><br><span class="line">		<span class="attribute">margin-top</span>: <span class="number">30px</span>;  <span class="comment">/* 插入图片更改位置 可以用margin 或padding  盒模型 */</span></span><br><span class="line">		<span class="attribute">margin-left</span>: <span class="number">50px</span>; <span class="comment">/* 插入当图片也是一个盒子 */</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">		<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">		<span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">		<span class="attribute">border</span>: <span class="number">1px</span> solid purple;</span><br><span class="line">		<span class="attribute">background</span>: <span class="number">#fff</span> <span class="built_in">url</span>(<span class="string">images/sun.jpg</span>) no-repeat;</span><br><span class="line">	</span><br><span class="line">		<span class="attribute">background-size</span>: <span class="number">200px</span> <span class="number">210px</span>; <span class="comment">/*  背景图片更改大小只能用 background-size */</span></span><br><span class="line">		<span class="attribute">background-position</span>: <span class="number">30px</span> <span class="number">50px</span>; <span class="comment">/* 背景图片更该位置 我用 background-position */</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="清除元素的默认内外边距"><a class="markdownIt-Anchor" href="#清除元素的默认内外边距"></a> 清除元素的默认内外边距</h3>
<p>为了更方便地控制网页中的元素，制作网页时，可使用如下代码清除元素的默认内外边距：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;         <span class="comment">/* 清除内边距 */</span></span><br><span class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;          <span class="comment">/* 清除外边距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：  行内元素是只有左右外边距的，是没有上下外边距的。 内边距，在ie6等低版本浏览器也会有问题。</p>
<p>我们尽量不要给行内元素指定上下的内外边距就好了。</p>
<h2 id="外边距合并"><a class="markdownIt-Anchor" href="#外边距合并"></a> 外边距合并</h2>
<p>使用margin定义块元素的垂直外边距时，可能会出现外边距的合并。</p>
<h3 id="相邻块元素垂直外边距的合并"><a class="markdownIt-Anchor" href="#相邻块元素垂直外边距的合并"></a> 相邻块元素垂直外边距的合并</h3>
<p>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</p>
<p>解决方案：  避免就好了。</p>
<h3 id="嵌套块元素垂直外边距的合并"><a class="markdownIt-Anchor" href="#嵌套块元素垂直外边距的合并"></a> 嵌套块元素垂直外边距的合并</h3>
<p>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为0，也会发生合并。</p>
<p>解决方案：</p>
<ol>
<li>可以为父元素定义1像素的上边框或上内边距。</li>
<li>可以为父元素添加overflow:hidden。</li>
</ol>
<p>待续。。。。</p>
<h2 id="content宽度和高度"><a class="markdownIt-Anchor" href="#content宽度和高度"></a> content宽度和高度</h2>
<p>使用宽度属性width和高度属性height可以对盒子的大小进行控制。</p>
<p>width和height的属性值可以为不同单位的数值或相对于父元素的百分比%，实际工作中最常用的是像素值。</p>
<p>大多数浏览器，如Firefox、IE6及以上版本都采用了W3C规范，符合CSS规范的盒子模型的总宽度和总高度的计算原则是：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*外盒尺寸计算（元素空间尺寸）*/</span></span><br><span class="line">Element空间高度 = <span class="built_in">content</span> <span class="built_in">height</span> + padding + <span class="built_in">border</span> + margin</span><br><span class="line">Element 空间宽度 = <span class="built_in">content</span> <span class="built_in">width</span> + padding + <span class="built_in">border</span> + margin</span><br><span class="line"><span class="comment">/*内盒尺寸计算（元素实际大小）*/</span></span><br><span class="line">Element Height = <span class="built_in">content</span> <span class="built_in">height</span> + padding + <span class="built_in">border</span> （Height为内容高度）</span><br><span class="line">Element Width = <span class="built_in">content</span> <span class="built_in">width</span> + padding + <span class="built_in">border</span> （Width为内容宽度）</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<p>1、宽度属性width和高度属性height仅适用于块级元素，对行内元素无效（ img 标签和 input除外）。</p>
<p>2、计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并的情况。</p>
<p>3、<strong>如果一个盒子没有给定宽度/高度或者继承父亲的宽度/高度，则padding 不会影响本盒子大小</strong>。</p>
<h2 id="盒子模型布局稳定性"><a class="markdownIt-Anchor" href="#盒子模型布局稳定性"></a> 盒子模型布局稳定性</h2>
<p>开始学习盒子模型，同学们最大的困惑就是， 分不清内外边距的使用，什么情况下使用内边距，什么情况下使用外边距？</p>
<p>答案是：  其实他们大部分情况下是可以混用的。  就是说，你用内边距也可以，用外边距也可以。 你觉得哪个方便，就用哪个。</p>
<p>但是，总有一个最好用的吧，我们根据稳定性来分，建议如下：</p>
<p>按照 优先使用  宽度 （width）  其次 使用内边距（padding）    再次  外边距（margin）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">width</span> &gt;  <span class="attribute">padding</span>  &gt;   <span class="attribute">margin</span>   </span><br></pre></td></tr></table></figure>
<p>原因：</p>
<ol>
<li>
<p>margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。</p>
</li>
<li>
<p>padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。</p>
</li>
<li>
<p>width   没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。</p>
</li>
</ol>
<h2 id="盒子阴影"><a class="markdownIt-Anchor" href="#盒子阴影"></a> 盒子阴影</h2>
<p>语法格式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>:水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色  内/外阴影；</span><br></pre></td></tr></table></figure>
<ol>
<li>前两个属性是必须写的。其余的可以省略。</li>
<li>外阴影 (outset) 但是不能写    默认      想要内阴影  inset</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">			<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">			<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">			<span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">			<span class="comment">/* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */</span></span><br><span class="line">			<span class="comment">/* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */</span></span><br><span class="line">			<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">30px</span>  <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">4</span>);</span><br><span class="line">			</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>IT技术</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 框架了解</title>
    <url>/2019/11/16/Django/</url>
    <content><![CDATA[<h1 id="django"><a class="markdownIt-Anchor" href="#django"></a> Django</h1>
<p>项目与应用的关系</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">django-admin startproject 项目名称</span><br></pre></td></tr></table></figure>
<p>创建应用</p>
<p>python <span class="exturl" data-url="aHR0cDovL21hbmFnZS5weQ==">manage.py<i class="fa fa-external-link-alt"></i></span> startapp 视图函数</p>
<p>启动项目</p>
<p>python <span class="exturl" data-url="aHR0cDovL21hbmFnZS5weQ==">manage.py<i class="fa fa-external-link-alt"></i></span> runserver IP:PORT</p>
<p>(默认本机端口8080)</p>
<h3 id="url控制器路由"><a class="markdownIt-Anchor" href="#url控制器路由"></a> url控制器（路由）</h3>
<ol>
<li>简单分组</li>
<li>有名分组</li>
<li>分发</li>
<li>反向解析</li>
</ol>
<h3 id="视图函数"><a class="markdownIt-Anchor" href="#视图函数"></a> 视图函数</h3>
<p>request（请求对象）</p>
<p>response（响应对象）</p>
<p>redict</p>
<h3 id="模板语法"><a class="markdownIt-Anchor" href="#模板语法"></a> 模板语法</h3>
<p>渲染变量  <code>&#123;&#123;&#125;&#125;</code> locals（）能全部传进去</p>
<ul>
<li>深度查询：句点符</li>
<li>filter ： 过滤器</li>
</ul>
<p>渲染标签  <code>&#123;%%&#125;</code></p>
<ul>
<li>
<p>for</p>
<p><code>&#123;% for i in book %&#125; </code></p>
</li>
<li>
<p>if</p>
</li>
</ul>
<h3 id="csrf标签"><a class="markdownIt-Anchor" href="#csrf标签"></a> csrf标签</h3>
<p>需要在 form 表单中添加 <code>&#123;% csrf_token %&#125;</code></p>
<h3 id="模板继承"><a class="markdownIt-Anchor" href="#模板继承"></a> 模板继承</h3>
<p>extand</p>
<h2 id="orm"><a class="markdownIt-Anchor" href="#orm"></a> ORM</h2>
<p>建立在pymysql之上，避免书写sql语句</p>
<p>更加高效的使用</p>
<p>在设置中修改引擎即可，无需重新写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;bms&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;ggy&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数据库迁移"><a class="markdownIt-Anchor" href="#数据库迁移"></a> 数据库迁移</h3>
<p>python <span class="exturl" data-url="aHR0cDovL21hbmFnZS5weQ==">manage.py<i class="fa fa-external-link-alt"></i></span> makemigrations</p>
<p>python <span class="exturl" data-url="aHR0cDovL21hbmFnZS5weQ==">manage.py<i class="fa fa-external-link-alt"></i></span> migrate</p>
<h3 id="操作数据的方式"><a class="markdownIt-Anchor" href="#操作数据的方式"></a> 操作数据的方式</h3>
<h4 id="单表操作"><a class="markdownIt-Anchor" href="#单表操作"></a> 单表操作</h4>
<h5 id="单表查询"><a class="markdownIt-Anchor" href="#单表查询"></a> 单表查询</h5>
<ol>
<li>all（） 方法：返回QuerySet类型</li>
<li>filter（）方法：返回QuerySet类型，要输入创建的配配置</li>
<li>get（）方法：返回 model对象</li>
<li>first（）last（）方法：QuerySet调用 ，返回model对象</li>
<li>exclude（）方法：返回QuerySet类型</li>
<li>order_by（）方法：排序，QuerySet调用，返回QuerySet类型</li>
<li>count（）方法：数数，QuerySet调用</li>
<li>reverse（）方法：QuerySet调用，返回也是QuerySet类型</li>
<li>exists（）：QuerySet调用，返回也是布尔类型</li>
<li>values（）：由queryset对象调用,返回值是queryset</li>
<li>values_list：由queryset对象调用,返回值是queryset</li>
</ol>
<h5 id="模糊查询"><a class="markdownIt-Anchor" href="#模糊查询"></a> 模糊查询</h5>
<p>双下划线</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Book.objects.<span class="built_in">filter</span>(price__in=[<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>])</span><br><span class="line"><span class="comment">#查价格等于100，200，300</span></span><br><span class="line">Book.objects.<span class="built_in">filter</span>(price__gt=<span class="number">100</span>)</span><br><span class="line"><span class="comment">#查询价格大于100</span></span><br><span class="line">Book.objects.<span class="built_in">filter</span>(price__lt=<span class="number">100</span>)</span><br><span class="line"><span class="comment">#查询价格小于100</span></span><br><span class="line">Book.objects.<span class="built_in">filter</span>(price__range=[<span class="number">100</span>,<span class="number">200</span>])</span><br><span class="line"><span class="comment">#查询价格在100-200</span></span><br><span class="line">Book.objects.<span class="built_in">filter</span>(title__contains=<span class="string">&quot;python&quot;</span>)</span><br><span class="line"><span class="comment"># 查询是python的书籍</span></span><br><span class="line">Book.objects.<span class="built_in">filter</span>(title__icontains=<span class="string">&quot;python&quot;</span>)</span><br><span class="line"><span class="comment"># 查询包含python的书籍</span></span><br><span class="line">Book.objects.<span class="built_in">filter</span>(title__startswith=<span class="string">&quot;py&quot;</span>)</span><br><span class="line"><span class="comment"># 查询以 py 开头</span></span><br><span class="line">Book.objects.<span class="built_in">filter</span>(pub_date__year=<span class="number">2012</span>)</span><br><span class="line"><span class="comment"># 查询以2012年开头</span></span><br><span class="line"></span><br><span class="line">setting.py</span><br><span class="line">USE_TZ = <span class="literal">True</span> <span class="comment">#时间模块</span></span><br></pre></td></tr></table></figure>
<h5 id="单表添加"><a class="markdownIt-Anchor" href="#单表添加"></a> 单表添加</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">Book(titile)</span><br><span class="line">boo.save</span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">book.objects.create()</span><br><span class="line"><span class="comment">#注意create 方法返回当前生成表的记录对象</span></span><br></pre></td></tr></table></figure>
<h5 id="单表删除"><a class="markdownIt-Anchor" href="#单表删除"></a> 单表删除</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book.objects.delete()</span><br></pre></td></tr></table></figure>
<h5 id="单表修改"><a class="markdownIt-Anchor" href="#单表修改"></a> 单表修改</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book.objects.update</span><br></pre></td></tr></table></figure>
<h4 id="多表操作"><a class="markdownIt-Anchor" href="#多表操作"></a> 多表操作</h4>
<h5 id="添加"><a class="markdownIt-Anchor" href="#添加"></a> 添加</h5>
<p>一对多</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pub_obj=Publish.objects.filter(name=&quot;橙子出版社&quot;).first()</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># book=Book.objects.create(</span></span><br><span class="line">   <span class="comment">#     title=&quot;python&quot;,</span></span><br><span class="line">   <span class="comment">#     price=120,</span></span><br><span class="line">   <span class="comment">#     pub_date=&quot;2012-12-12&quot;,</span></span><br><span class="line">   <span class="comment">#     publish_id=1,</span></span><br><span class="line">   <span class="comment">#     #publish=pub_obj</span></span><br><span class="line">   <span class="comment">#</span></span><br><span class="line">   <span class="comment"># )</span></span><br></pre></td></tr></table></figure>
<p>多对多</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式1</span></span><br><span class="line"> <span class="comment"># alex=Author.objects.filter(name=&quot;alex&quot;).first()</span></span><br><span class="line"> <span class="comment"># egon=Author.objects.filter(name=&quot;egon&quot;).first()</span></span><br><span class="line"> <span class="comment"># book.authors.add(alex,egon)</span></span><br><span class="line"> <span class="comment"># 方式2：</span></span><br><span class="line"> <span class="comment"># book.authors.add(1,2)</span></span><br><span class="line"> <span class="comment"># 方式3：</span></span><br><span class="line"> <span class="comment"># book.authors.add(*[1,2])</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>一对一</p>
<p>如同</p>
<h5 id="修改"><a class="markdownIt-Anchor" href="#修改"></a> 修改</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">###### 解除再绑定</span></span><br><span class="line">   book = Book.objects.<span class="built_in">filter</span>(nid=<span class="number">3</span>).first()</span><br><span class="line">   book.authors.clear()</span><br><span class="line">   book.authors.add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">   book.authors.<span class="built_in">set</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h5 id="基于对象的跨表查询"><a class="markdownIt-Anchor" href="#基于对象的跨表查询"></a> 基于对象的跨表查询</h5>
<p>一对多</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####### 一对多 ##########</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    正向查询：关联属性所在的表查询关联表记录</span></span><br><span class="line"><span class="string">    反向查询</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        ----正向查询按字段：book.publish</span></span><br><span class="line"><span class="string">    Book------------------------------------&gt;Publish</span></span><br><span class="line"><span class="string">         &lt;-----------------------------------</span></span><br><span class="line"><span class="string">          反向查询表名小写_set.all()：pub_obj.book_set.all()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>多对多</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####### 多对多 ##########</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                正向查询按字段 book.authors.all()</span></span><br><span class="line"><span class="string">       Book  --------------------------------------&gt;Author</span></span><br><span class="line"><span class="string">             &lt;--------------------------------------</span></span><br><span class="line"><span class="string">                反向查询按表名小写_set.all()： alex.book_set.all()</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>一对一</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####### 一对一 ##########</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                     正常查询安字段：alex.ad</span></span><br><span class="line"><span class="string">        Author -----------------------------------------&gt; AuthorDetail</span></span><br><span class="line"><span class="string">               &lt;------------------------------------------</span></span><br><span class="line"><span class="string">                     反向查询按表名小写  ad.author</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h5 id="基于双下划线的跨表查询基于join实现的"><a class="markdownIt-Anchor" href="#基于双下划线的跨表查询基于join实现的"></a> 基于双下划线的跨表查询（基于join实现的）</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># KEY：正向查询按字段，反向查询按表明小写</span></span><br><span class="line"><span class="comment"># 手机号以110开头的作者出版过的所有书籍名称以及出版社名称</span></span><br><span class="line"><span class="comment"># 方式1:</span></span><br><span class="line"><span class="comment">#ret=Author.objects.filter(ad__tel__startswith=110).values_list(&quot;book__title&quot;,&quot;book__publish__name&quot;)</span></span><br><span class="line"><span class="comment"># print(ret)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2：</span></span><br><span class="line"><span class="comment">#ret=AuthorDetail.objects.filter(tel__startswith=110).values(&quot;author__book__title&quot;,&quot;author__book__publish__name&quot;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 方式3：</span></span><br><span class="line"><span class="comment">#ret=Book.objects.filter(authors__ad__tel__startswith=110).values(&quot;title&quot;,&quot;publish__name&quot;)</span></span><br></pre></td></tr></table></figure>
<h5 id="聚合分组"><a class="markdownIt-Anchor" href="#聚合分组"></a> 聚合分组</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 聚合</span></span><br><span class="line"> <span class="comment"># 查询所有书籍的平均价格</span></span><br><span class="line"> <span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg,Max,Sum,Min,Count</span><br><span class="line"> <span class="comment"># ret=Book.objects.all().aggregate(priceAvg=Avg(&quot;price&quot;))</span></span><br><span class="line"> <span class="comment"># print(ret) # &#123;&#x27;priceAvg&#x27;: 142.0&#125;</span></span><br><span class="line"> <span class="comment"># # 查询所有书籍的个数</span></span><br><span class="line"> <span class="comment"># ret=Book.objects.all().aggregate(c=Count(1))</span></span><br><span class="line"> <span class="comment"># print(ret) # &#123;&#x27;c&#x27;: 4&#125;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 跨表分组查询</span></span><br><span class="line"> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> select app01_publish.name,COUNT(1) from app01_book INNER JOIN app01_publish ON app01_book.publish_id=app01_publish.nid</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">                          GROUP BY app01_publish.nid</span></span><br><span class="line"><span class="string"> &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 查询每一个出版社的名称以及对应的书籍平均价格</span></span><br><span class="line"> <span class="comment"># ret=Publish.objects.values(&quot;name&quot;,&quot;email&quot;).annotate(avg_price=Avg(&quot;book__price&quot;))</span></span><br><span class="line"> <span class="comment"># print(ret) # &lt;QuerySet [&#123;&#x27;name&#x27;: &#x27;苹果出版社&#x27;, &#x27;avg_price&#x27;: 117.0&#125;, &#123;&#x27;name&#x27;: &#x27;橙子出版社&#x27;, &#x27;avg_price&#x27;: 112.0&#125;, &#123;&#x27;name&#x27;: &#x27;西瓜出版社&#x27;, &#x27;avg_price&#x27;: 222.0&#125;]&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 查询每一个作者的名字以及出版的书籍的最高价格</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># ret=Author.objects.values(&quot;pk&quot;,&quot;name&quot;).annotate(max_price=Max(&quot;book__price&quot;))</span></span><br><span class="line"> <span class="comment"># print(ret)</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 查询每一个书籍的名称以及对应的作者的个数</span></span><br><span class="line"> ret=Book.objects.values(<span class="string">&quot;title&quot;</span>).annotate(c=Count(<span class="string">&quot;authors&quot;</span>))</span><br><span class="line"> <span class="built_in">print</span>(ret) <span class="comment"># &lt;QuerySet [&#123;&#x27;title&#x27;: &#x27;python&#x27;, &#x27;authors__count&#x27;: 2&#125;, &#123;&#x27;title&#x27;: &#x27;linux&#x27;, &#x27;authors__count&#x27;: 1&#125;, &#123;&#x27;title&#x27;: &#x27;go&#x27;, &#x27;authors__count&#x27;: 1&#125;, &#123;&#x27;title&#x27;: &#x27;java&#x27;, &#x27;authors__count&#x27;: 0&#125;]&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="聚合函数"><a class="markdownIt-Anchor" href="#聚合函数"></a> 聚合函数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg,Max,Sum,Min,Count</span><br><span class="line">.aggregate(Count(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<h4 id="分组查询"><a class="markdownIt-Anchor" href="#分组查询"></a> 分组查询</h4>
<p>单表分组查询</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.annotate()前面values 哪一个字段就按哪一个字段分组</span><br></pre></td></tr></table></figure>
<p>跨表分组查询</p>
<h3 id="f函数"><a class="markdownIt-Anchor" href="#f函数"></a> F函数</h3>
<h3 id="q函数"><a class="markdownIt-Anchor" href="#q函数"></a> Q函数</h3>
<h3 id="新的数据类型"><a class="markdownIt-Anchor" href="#新的数据类型"></a> 新的数据类型</h3>
<p>QuerySet</p>
<p><code>[obj1，obj2]</code></p>
<h3 id="静态文件设置"><a class="markdownIt-Anchor" href="#静态文件设置"></a> 静态文件设置</h3>
<p>配置setting</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&quot;static&quot;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><code>###</code></p>
<p>如果url 只差一个/ django会加</p>
<p>append_SLASH = true 自动补 / 重定向301</p>
<h3 id="中间件"><a class="markdownIt-Anchor" href="#中间件"></a> 中间件</h3>
<p>middleware</p>
<h3 id="forms组件"><a class="markdownIt-Anchor" href="#forms组件"></a> forms组件</h3>
<p>源码解析</p>
<p>钩子的应用</p>
<h1 id="crm"><a class="markdownIt-Anchor" href="#crm"></a> CRM</h1>
<h3 id="表结构"><a class="markdownIt-Anchor" href="#表结构"></a> 表结构</h3>
<p>modelForm</p>
<p>CBV 与 FBV</p>
<p>FBV ----- function based view</p>
<p>CBV ----- class based view</p>
<p>视图函数</p>
<p>自定义分页</p>
<p>dispatch分发</p>
<p>创建超级用户</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">createsuperuser</span><br></pre></td></tr></table></figure>
<h1 id="pep8规范"><a class="markdownIt-Anchor" href="#pep8规范"></a> PEP8规范</h1>
<p>PEP8规范时约束我们在书写 python 时的一种代码规范，在此罗列出一些常用的规范。详细可以区查看官网具体定义。<span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kZXYvcGVwcy9wZXAtMDAwOC8=">PEP8规范<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="导包的顺序"><a class="markdownIt-Anchor" href="#导包的顺序"></a> 导包的顺序</h3>
<p>标准库  --&gt; 第三方库   --&gt; 自己的，一共三层，每层之间空开一行</p>
<h3 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h3>
<p>注释多行一般采用双引号注释，函数注释，写完双引号 在中间按 Enter  ，可以生成快速注释（在pycharm中），对于注释可以进行详细解释。</p>
<p>单行注释，一般用于局部注释信息，书写时要与 <code># </code>空一格</p>
<h3 id="命名规范"><a class="markdownIt-Anchor" href="#命名规范"></a> 命名规范</h3>
<p>python 中命名规范有两种</p>
<ul>
<li>驼峰式命名</li>
<li>下划线命名</li>
</ul>
<p>驼峰式命名，一般要作用项目名称，或者类名书写</p>
<p>下划线命名一般用于变量或者函数命名，由于变量或者函数的命名表达不清楚时可以使用下划线命名。</p>
<p>特殊变量常量，由于 python 中无法定义常量，一般将常量的命名全部大写。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CASE = <span class="number">123</span></span><br></pre></td></tr></table></figure>
<p>模块命名小写，表达不了用下划线隔开</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add_user</span><br><span class="line"><span class="keyword">from</span> add_user</span><br></pre></td></tr></table></figure>
<h3 id="书写方式"><a class="markdownIt-Anchor" href="#书写方式"></a> 书写方式</h3>
<p>等号两边都有空格</p>
<p>函数或者类之间相隔两个空行</p>
<p>结束时空一行</p>
<h2 id="rbac组件"><a class="markdownIt-Anchor" href="#rbac组件"></a> RBAC组件</h2>
<p>rbac 组件一般我们用于权限的校验，帮助我们更好的管理用户认证信息，不同的用户权限不同，访问的界面展示也不相同</p>
<p>什么是权限： 一个含有正则表达式的 url</p>
<p>基于 RBAC 设计表关系：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(models.Model):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        <span class="comment"># 此处设置 admin 中显示名称</span></span><br><span class="line">        verbose_name = verbose_name_plural = <span class="string">&#x27;用户表&#x27;</span></span><br><span class="line"></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    pwd = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    roles = models.ManyToManyField(to=<span class="string">&#x27;Role&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Role</span>(models.Model):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        verbose_name = verbose_name_plural = <span class="string">&#x27;职位表&#x27;</span></span><br><span class="line"></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    permissions = models.ManyToManyField(to=<span class="string">&#x27;Permission&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Permission</span>(models.Model):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        verbose_name = verbose_name_plural = <span class="string">&#x27;权限表&#x27;</span></span><br><span class="line"></span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    url = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">	menu=models.ForeignKey(<span class="string">&quot;Menu&quot;</span>,on_delete=models.CASCADE,null=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Menu</span>(models.Model):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        verbose_name = verbose_name_plural = <span class="string">&#x27;菜单表&#x27;</span></span><br><span class="line">        </span><br><span class="line">    title = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&#x27;菜单&#x27;</span>)</span><br><span class="line">    icon = models.CharField(max_length=<span class="number">32</span>, verbose_name=<span class="string">&#x27;图标&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>添加需要的权限信息</p>
<p>任何利用中间件和自定义的模块 传输和获取 当前用户的权限信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过自定义 middleware 模块在 setting 中加入，引入中间件</span></span><br><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse, redirect</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PermissionMiddleWare</span>(<span class="title class_ inherited__">MiddlewareMixin</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request</span>):</span><br><span class="line"></span><br><span class="line">        current_path = request.path</span><br><span class="line">        <span class="comment"># 设置白名单</span></span><br><span class="line">        <span class="keyword">for</span> reg <span class="keyword">in</span> [<span class="string">&#x27;/login/&#x27;</span>, <span class="string">&#x27;/admin/*&#x27;</span>]:</span><br><span class="line">            ret = re.search(reg, current_path)</span><br><span class="line">            <span class="keyword">if</span> ret:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 校验是否登录</span></span><br><span class="line">        user_id = request.session.get(<span class="string">&#x27;user_id&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_id:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/login/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 校验权限</span></span><br><span class="line">        permission_list = request.session.get(<span class="string">&quot;permission_list&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> reg <span class="keyword">in</span> permission_list:</span><br><span class="line">            reg = <span class="string">&quot;^%s$&quot;</span> % reg</span><br><span class="line">            ret = re.search(reg, current_path)</span><br><span class="line">            <span class="keyword">if</span> ret:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;无权访问！&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>rbac 自定义模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> app1.models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initial_sesson</span>(<span class="params">user, request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    功能：将当前登录人的所有权限录入 session 中</span></span><br><span class="line"><span class="string">    :param user:当前登录人</span></span><br><span class="line"><span class="string">    :param request:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 查询当前登录人的所有权限列表</span></span><br><span class="line">    permissions = Role.objects.<span class="built_in">filter</span>(user=user).values(<span class="string">&#x27;permissions__url&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;roles&#x27;</span>, permissions)</span><br><span class="line"></span><br><span class="line">    permissions_list = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> permissions:</span><br><span class="line">        permissions_list.append(item[<span class="string">&#x27;permissions__url&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将当前登录人的权限列表注入 session 中</span></span><br><span class="line">    request.session[<span class="string">&#x27;permission_list&#x27;</span>] = permissions_list</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="动态显示菜单权限"><a class="markdownIt-Anchor" href="#动态显示菜单权限"></a> 动态显示菜单权限</h4>
<p>动态获取显示菜单，注意本次显示是后台操作</p>
<p>需要获取当前用户的权限信息，获取 url 和 是否为菜单，以及所带的 icon 图标。因为设计到传值的问题，于是我们产生了自定过滤器。</p>
<p>首先自定过滤器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># web.py 文件中</span></span><br><span class="line"><span class="keyword">from</span> django.utils.safestring <span class="keyword">import</span> mark_safe</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> Library</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">register =Library()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@register.inclusion_tag(<span class="params"><span class="string">&quot;rbac/menu.html&quot;</span></span>)</span></span><br><span class="line"><span class="comment"># 将当前函数的 permission_menu_dict 传给 rbac 的 menu.html</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_menu_styles</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    自定义过滤器</span></span><br><span class="line"><span class="string">    :param request:传入当前用户菜单信息 </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    permission_menu_dict = request.session.get(<span class="string">&quot;permission_menu_dict&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;permission_menu_dict&quot;</span>,permission_menu_dict)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;permission_menu_dict&quot;</span>:permission_menu_dict&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在 menu.html 中书写</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"># menu.html</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;multi-menu&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> item <span class="keyword">in</span> permission_menu_dict.values %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; item.menu_icon &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><span class="template-variable">&#123;&#123; item.menu_title &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> foo <span class="keyword">in</span> item.children %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; foo.url &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123; foo.title &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>使用自定义的组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-menu&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu-body&quot;</span>&gt;</span></span><br><span class="line">           &#123;% load web %&#125;</span><br><span class="line">           &#123;% get_menu_styles request %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>整体样图</p>
<h2 id="queryset"><a class="markdownIt-Anchor" href="#queryset"></a> Queryset</h2>
<p>特点：</p>
<ul>
<li>可切片</li>
<li>可迭代</li>
<li>惰性查询</li>
<li>缓存机制</li>
</ul>
<h2 id="drfdjango-rest-framework"><a class="markdownIt-Anchor" href="#drfdjango-rest-framework"></a> DRF（django rest framework）</h2>
<p>简述DRF（Django restframework）就是一个Django中使用 rest 接口规范的模块。什么rest接口规范？就是对于我们书写前后端分离时，定义接口的一种规范，列举如下规范：</p>
<table>
<thead>
<tr>
<th style="text-align:center">请求方式</th>
<th style="text-align:center">url 设计（接口）</th>
<th style="text-align:center">请求内容</th>
<th style="text-align:center">响应内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">GET</td>
<td style="text-align:center">127.0.0.1:8000/books/</td>
<td style="text-align:center">获取所有书本的信息</td>
<td style="text-align:center">[ {书的id,name,…} , {}, {} …]</td>
</tr>
<tr>
<td style="text-align:center">GET</td>
<td style="text-align:center">127.0.0.1:8000/books/{ id }</td>
<td style="text-align:center">获取单条数据据</td>
<td style="text-align:center">单条数据{ 书的 id，name…. }</td>
</tr>
<tr>
<td style="text-align:center">POST</td>
<td style="text-align:center">127.0.0.1:8000/books/</td>
<td style="text-align:center">增加单条数据</td>
<td style="text-align:center">添加成功的数据{ ‘mesage’:‘ok’}</td>
</tr>
<tr>
<td style="text-align:center">DELETE</td>
<td style="text-align:center">127.0.0.1：8000/books/{ id }</td>
<td style="text-align:center">删除单条数据</td>
<td style="text-align:center">返回空“  ”</td>
</tr>
<tr>
<td style="text-align:center">PUT</td>
<td style="text-align:center">127.0.0.1:8000/books/{ id }</td>
<td style="text-align:center">修改数据</td>
<td style="text-align:center">更新后完整的数据{ }</td>
</tr>
</tbody>
</table>
<p>从结构上看，比我们一般设计的 url 地址更加简洁明了，方便程序员维护还有错误处理</p>
<p>错误处理：{ “error” : “message” }</p>
<p>如何在 Django 中实现 rest接口规范？</p>
<p>安装 DRF</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install django</span><br><span class="line">pip install djangorestframework</span><br></pre></td></tr></table></figure>
<p>完成之后可以进行学习了以下内容：</p>
<ul>
<li>APIView</li>
<li>解析器组件</li>
<li>序列化组件</li>
<li>视图组件</li>
<li>认证组件</li>
<li>权限组件</li>
<li>频率控制组件</li>
<li>分页组件</li>
<li>响应器组件</li>
<li>url 控制器</li>
</ul>
<p>Django 中View视图函数使用有些不是很方便，所以封装了APIView</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="built_in">print</span>(request.POST)</span><br><span class="line">        <span class="comment"># 此时Ajax发送的请求无法被识别</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;ok&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>APIView的使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">APIview</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="built_in">print</span>(request.data)</span><br><span class="line">        <span class="comment"># APIView中的解析器就帮我们做到了解析的功能</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;ok&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>View源码分析CBV（django  classbasedview）</p>
<ol>
<li>
<p>from  django.views  import  View</p>
</li>
<li>
<p>在视图类种继承 View 类 class StudentView(View):pass</p>
</li>
<li>
<p><span class="exturl" data-url="aHR0cDovL3VybHMucHk=">urls.py<i class="fa fa-external-link-alt"></i></span> 中定义路由关系</p>
<ol>
<li>from django.urls  import  re_path<br />
from classbasedview  import views</li>
</ol>
<p>urlpatterns = [</p>
<p>​	re_path(“login/”, views.LoginView.as_view()),</p>
<p>]</p>
</li>
<li>
<p>Django启动时加载路由系统，会读取urlpatterns中的对应关系</p>
</li>
<li>
<p>执行as_view(),或得器返回值，该函数返回一个view视图函数</p>
</li>
<li>
<p>此时绑定关系建立好了，当用户请求过来时，就会执行url对应得view视图函数</p>
</li>
<li>
<p>该视图函数得返回值是self.dispatch()</p>
</li>
<li>
<p>self.dispatch()会找到http_method_names变量里面得函数，并执行，并最终返回</p>
</li>
</ol>
<p>APIView源码分析</p>
<p>封装自己的东西，用到view得方法</p>
<ol>
<li>
<p>安装djangorestframework<br />
pip install djangorestframework</p>
</li>
<li>
<p>在views.py中<br />
from rest_framework.view  import  APIView</p>
</li>
<li>
<p>在视图类继承APIView</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StudentView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>
</li>
<li>
<p><span class="exturl" data-url="aHR0cDovL3VybHMucHk=">urls.py<i class="fa fa-external-link-alt"></i></span> 中保持不变</p>
</li>
<li>
<p>Django启动时加载路由系统，会读取 urlpatterns 中的对应关系</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> api.view <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;login/&quot;</span>, views.LoginView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>此时绑定关系已经建立好了，当用户请求过来时，就会执行 url 对应的 View 视图函数</p>
</li>
<li>
<p>请求到来，执行View视图函数</p>
</li>
<li>
<p>最后执行 dispatch()，获取返回值，返回给用户</p>
</li>
<li>
<p>Django RestFramework 自定制的内容就在重写的 as_view 函数里面以及 dispatch() 方法</p>
</li>
</ol>
<h2 id="解析器组件"><a class="markdownIt-Anchor" href="#解析器组件"></a> 解析器组件</h2>
<p>Django 原生解析器</p>
<ol>
<li>from django.core.handlers.wsgi  import WSGIRequest</li>
<li>POST = property(_get_post, _set_post), 找 def  _load_post_and_files(self)函数，判断类型，然后进行解析封装。只支持  content_type == ‘multipart/from-data’ 。也可以进行自定义封装，但是遵循开放封闭原则，不要更改源代码。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="built_in">print</span>(request.POST)</span><br><span class="line">        origin_data = request.body</span><br><span class="line">        parsed_data = origin_data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(parsed_data)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;ok&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>DRF的解析器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> FormParser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    parser_classes = [FormParser]</span><br><span class="line">    <span class="comment"># 此时加了固定的解析器，就只能解析formdata了</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="comment"># print(request.POST)</span></span><br><span class="line">        <span class="comment"># origin_data = request.body</span></span><br><span class="line">        <span class="comment"># parsed_data = origin_data.decode(&#x27;utf-8&#x27;)</span></span><br><span class="line">        <span class="comment"># print(parsed_data)</span></span><br><span class="line">        <span class="built_in">print</span>(request.data)</span><br><span class="line">        <span class="comment"># request.data 是一个函数，一个 porperty 装饰的方法</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;ok&quot;</span>)</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>views.LoginView.as_view()</p>
</li>
<li>
<p>LoginView 里面没有 as_view 方法，到父类 APIView 去找</p>
</li>
<li>
<p>执行 View 里面得 as_view() 方法，返回函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">view</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">    self = cls(**initkwargs)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;get&#x27;</span>) <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;head&#x27;</span>):</span><br><span class="line">        self.head = self.get</span><br><span class="line">    self.request = request</span><br><span class="line">    self.args = args</span><br><span class="line">    self.kwargs = kwargs</span><br><span class="line">    <span class="keyword">return</span> self.dispatch()</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>url 和视图函数之间得绑定关系建立完毕 <code>&#123;&quot;login&quot;: view&#125;,</code> 等待用户请求</p>
</li>
<li>
<p>接受到用户请i去：login，到建立好的绑定关系里面执行对应得视图函数：view(request)</p>
</li>
<li>
<p>视图函数的执行结构是什么就返回给用户什么：self.dispatch()，self.diaptch() 的执行结果是什么，就返回给用户是什么</p>
</li>
<li>
<p>此时的 self 代表的就是 LoginView 对象</p>
</li>
<li>
<p>开始找 dispatch 方法，self里面没有，LoginView里面没有，在APIView里面有</p>
</li>
<li>
<p>开始执行 APIView 里面的 dispatch</p>
</li>
<li>
<p>最后找到 http 方法（GET，POST，PUT，DELETE）</p>
</li>
<li>
<p>开始执行找到的方法（GET），self.get(), self此时代表LoginView的实例化对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">11.1</span> 假设接收到的是POST请求, 执行request.data</span><br><span class="line"><span class="number">11.2</span> 根据分析，所有的解析工作都在request.data里面实现，且data是一个方法（被装饰后的）</span><br><span class="line"><span class="number">11.2</span> 开始执行request.data</span><br><span class="line"><span class="meta">	@property</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">data</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> _<span class="built_in">hasattr</span>(self, <span class="string">&#x27;_full_data&#x27;</span>):</span><br><span class="line">			self._load_data_and_files()</span><br><span class="line">		<span class="keyword">return</span> self._full_data</span><br><span class="line"><span class="number">11.3</span> 执行self._load_data_and_files</span><br><span class="line"><span class="number">11.4</span> 执行self._data, self._files = self._parse()</span><br><span class="line"><span class="number">11.5</span> parser = self.negotiator.select_parser(self, self.parsers)</span><br><span class="line">	<span class="number">11.5</span><span class="number">.1</span> 开始找self.parsers</span><br><span class="line">	<span class="number">11.5</span><span class="number">.2</span> self.get_parses()</span><br><span class="line">			[ parse() <span class="keyword">for</span> parse <span class="keyword">in</span> self.parser_classes ]</span><br><span class="line">		<span class="number">11.5</span><span class="number">.3</span> parser_classes = api_settings.DEFAULT_PARSER_CLASSES</span><br><span class="line">		<span class="number">11.5</span><span class="number">.4</span> <span class="keyword">from</span> rest_framework <span class="keyword">import</span> api_settings</span><br><span class="line">		<span class="number">11.5</span><span class="number">.5</span> api_settings = APISettings(<span class="literal">None</span>, DEFAULTS, IMPORT_STRINGS)</span><br><span class="line">	<span class="number">11.5</span><span class="number">.6</span> <span class="keyword">class</span> <span class="title class_">APISettings</span>():<span class="keyword">pass</span></span><br><span class="line">	<span class="number">11.5</span><span class="number">.7</span> 找不到DEFAULT_PARSER_CLASSES，__getattr__</span><br><span class="line">		<span class="string">&#x27;DEFAULT_PARSER_CLASSES&#x27;</span>: (</span><br><span class="line">		<span class="string">&#x27;rest_framework.parsers.JSONParser&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;rest_framework.parsers.FormParser&#x27;</span>,</span><br><span class="line">		<span class="string">&#x27;rest_framework.parsers.MultiPartParser&#x27;</span></span><br><span class="line">	),</span><br><span class="line">	<span class="number">11.5</span><span class="number">.8</span> 首先找程序的settings</span><br><span class="line">	<span class="number">11.5</span><span class="number">.9</span> 然后找rest_framework的settings</span><br><span class="line"></span><br><span class="line"><span class="number">11.6</span> self._data就是我们想要的数据</span><br><span class="line"><span class="number">11.7</span> DRF将self._data = data</span><br><span class="line"><span class="number">11.8</span> request.data</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>DRF的所有功能都是在as_view() 和 dispatch里面重写的</p>
<p>而解析器组件在 dispatch 方法里面重写了，具体是在重新封装的Request对象里面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  源码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">	    <span class="keyword">pass</span></span><br><span class="line">		</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">		request.data  <span class="comment"># 新的request对象 @property</span></span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">APIView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line"><span class="meta">	@classmethod</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">as_view</span>(<span class="params">cls, **initkwargs</span>):</span><br><span class="line">	    <span class="keyword">pass</span></span><br><span class="line">		<span class="built_in">super</span>(APIView, cls).as_view(**initkwargs)</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">initialize_request</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">from</span> rest_framework.request <span class="keyword">import</span> Request</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> Request(</span><br><span class="line">			request,  <span class="comment"># 原生request对象</span></span><br><span class="line">			parsers=self.get_parsers(), <span class="comment">#</span></span><br><span class="line">			authenticators=self.get_authenticators(),</span><br><span class="line">			negotiator=self.get_content_negotiator(),</span><br><span class="line">			parser_context=parser_context</span><br><span class="line">		)</span><br><span class="line">			</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self</span>):</span><br><span class="line">	    <span class="keyword">pass</span></span><br><span class="line">		request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">        self.request = request</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_parsers</span>(<span class="params">self</span>):</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> [parser() <span class="keyword">for</span> parser <span class="keyword">in</span> self.parser_classes]</span><br></pre></td></tr></table></figure>
<p>Django 的原生序列化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.serializers <span class="keyword">import</span> serialize</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="comment"># def get(self, request):</span></span><br><span class="line">    <span class="comment">#     course_list = list()</span></span><br><span class="line">    <span class="comment">#     for course in Course.objects.all():</span></span><br><span class="line">    <span class="comment">#         course = &#123;</span></span><br><span class="line">    <span class="comment">#             &quot;course_name&quot;: course.course_name,</span></span><br><span class="line">    <span class="comment">#             &quot;description&quot;: course.description,</span></span><br><span class="line">    <span class="comment">#         &#125;</span></span><br><span class="line">    <span class="comment">#         course_list.append(course)</span></span><br><span class="line">    <span class="comment">#     print(course_list)</span></span><br><span class="line">    <span class="comment">#     return HttpResponse(json.dumps(course_list, ensure_ascii=False))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        origin_data = Course.objects.<span class="built_in">all</span>()</span><br><span class="line">        <span class="comment"># 开始序列化</span></span><br><span class="line">        serialized_data = serialize(<span class="string">&quot;json&quot;</span>, origin_data)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(serialized_data)</span><br></pre></td></tr></table></figure>
<h3 id="drf序列化"><a class="markdownIt-Anchor" href="#drf序列化"></a> DRF序列化</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Book</span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line"></span><br><span class="line">    publish_name = serializers.CharField(max_length=<span class="number">32</span>, read_only=<span class="literal">True</span>, source=<span class="string">&quot;publish.name&quot;</span>)</span><br><span class="line">    publish_city = serializers.CharField(max_length=<span class="number">32</span>, read_only=<span class="literal">True</span>, source=<span class="string">&quot;publish.city&quot;</span>)</span><br><span class="line">    <span class="comment"># write_only_fields = (&quot;authors&quot;, &quot;publish&quot;)</span></span><br><span class="line"></span><br><span class="line">    author_list = serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_author_list</span>(<span class="params">self, book_obj</span>):</span><br><span class="line">        <span class="comment"># 拿到 queryset 开始循环 [&#123;&#125;,&#123;&#125;,&#123;&#125;]</span></span><br><span class="line">        authors = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> author <span class="keyword">in</span> book_obj.authors.<span class="built_in">all</span>():</span><br><span class="line">            authors.append(author.name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> authors</span><br></pre></td></tr></table></figure>
<h3 id="mixins-进行接口优化"><a class="markdownIt-Anchor" href="#mixins-进行接口优化"></a> Mixins 进行接口优化</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.generics <span class="keyword">import</span> GenericAPIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> (ListModelMixin,</span><br><span class="line">                                   CreateModelMixin,</span><br><span class="line">                                   DestroyModelMixin,</span><br><span class="line">                                   UpdateModelMixin,</span><br><span class="line">                                   RetrieveModelMixin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .app_serializer <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookView</span>(ListModelMixin, CreateModelMixin, GenericAPIView):</span><br><span class="line">    queryset = Book.objects.<span class="built_in">all</span>() </span><br><span class="line">    <span class="comment"># 告诉需要使用的数据库查询</span></span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line">	<span class="comment"># 告诉使用的序列化组件</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">list</span>(request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> self.create(request)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookFilterView</span>(DestroyModelMixin, UpdateModelMixin, RetrieveModelMixin, GenericAPIView):</span><br><span class="line">    queryset = Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> self.retrieve(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> self.update(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> self.destroy(request, *args, **kwargs)</span><br></pre></td></tr></table></figure>
<ul>
<li>Django程序启动，开始初始化，读取 <span class="exturl" data-url="aHR0cDovL3VybHMucHk=">urls.py<i class="fa fa-external-link-alt"></i></span>， 读取 settings， 读取视图类</li>
<li>执行 as_view()，BookView没有，需要到父类中找</li>
<li>几个ModelMixin也没有，GenericAPIView中没有，继续到GenericAPIView（APIView）中找</li>
<li>在APIView中找到，与前面的逻辑一样，在 GenericAPIview 中定义了查找 queryset 和serializer——class 类的方法</li>
<li>as_view() 方法返回重新封装的视图函数，开始建立 url 和视图函数之间的映射关系</li>
<li>等待用户请求</li>
<li>执行视图函数的 dispatch 方法（因为视图函数的返回值是：return self.dispatch()</li>
<li>dispatch 分发请求，查找到视图类的五个方法中的某个</li>
<li>开始执行，例如 post 请求，返回 self.create()， 自己没有，去父类找。</li>
<li>最后在 CreateModelMixin 中查找</li>
<li>执行 create()  方法，获取 queryset 和 serializer_class</li>
<li>返回数据</li>
</ul>
<p>断言进行判断</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span>  a <span class="keyword">in</span> b </span><br><span class="line"><span class="comment"># assert 就是断言</span></span><br></pre></td></tr></table></figure>
<h3 id="使用-generics-进行接口逻辑优化"><a class="markdownIt-Anchor" href="#使用-generics-进行接口逻辑优化"></a> 使用 generics 进行接口逻辑优化</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookView</span>(generics.ListCreateAPIView):</span><br><span class="line">    queryset = Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookFilterView</span>(generics.RetrieveUpdateDestroyAPIView):</span><br><span class="line">    queryset = Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookSerializer</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="使用viewset进行接口逻辑优化"><a class="markdownIt-Anchor" href="#使用viewset进行接口逻辑优化"></a> 使用viewset进行接口逻辑优化</h3>
<p>对比上面，再次封装（不是我），利用 mixins 进行分发请求，找到对应的函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookView</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookSerializer</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>与上面一样加载后，进行 as_view() 函数中，因为路由中配置了参数，携带 actions参数 到函数中执行</p>
</li>
<li>
<p>Django程序启动，开始与上述一样的操作</p>
</li>
<li>
<p>遵循自己没有，找父类，找到了ModelViewSet 中找</p>
</li>
<li>
<p>ModelViewSet 继承了 mixins 的几个 ModelMixin 和 GenericViewSet，最终只有GenericViewSet ，它继承了 ViewSetMixin 和 generic.GenericAPIView （这个我们已经认识了）</p>
</li>
<li>
<p>先去 ViewSetMixin 中查找，找到了 as_view() 类方法，在重新封装 view 函数的过程中，有一个 self.action_map = actions</p>
</li>
<li>
<p>这个 actions 就是我们给 as_view() 传递的参数</p>
</li>
<li>
<p>绑定 url 和视图函数（actions）之间的映射关系</p>
</li>
<li>
<p>等待用户请求</p>
</li>
<li>
<p>接收到用户请求，根据 url 找到视图函数</p>
</li>
<li>
<p>执行视图函数的 dispatch 方法（因为视图函数的返回值是： return self.dispatch()）</p>
</li>
<li>
<p>dispatch 分发请求，查找到视图类的五个方法的某个</p>
</li>
<li>
<p>开始执行，例如 post 请求，返回：self.creat(), 自己没有，去父类</p>
</li>
<li>
<p>最后找到 CreateModelMixin 中，执行create方法，获取queryset和serializer_class ，返回数据</p>
</li>
</ul>
<h2 id="django下的表contentype表"><a class="markdownIt-Anchor" href="#django下的表contentype表"></a> Django下的表contentype表：</h2>
<p>这张表主要记录</p>
<h2 id="公钥私钥"><a class="markdownIt-Anchor" href="#公钥私钥"></a> 公钥私钥</h2>
<p>私钥  ———— 公钥                      RSA</p>
<h2 id="支付宝沙箱环境"><a class="markdownIt-Anchor" href="#支付宝沙箱环境"></a> 支付宝沙箱环境</h2>
<p>getattr  （）</p>
<h2 id="django-admin源码"><a class="markdownIt-Anchor" href="#django-admin源码"></a> Django admin源码</h2>
<p>callable() ke’diao</p>
<h2 id="cookie和session区别"><a class="markdownIt-Anchor" href="#cookie和session区别"></a> Cookie和session区别</h2>
<p>Cookies 是服务器在本地机器的一个小文本，每一次都随着本地服务器发送至同一个服务器。 IETE RFC 2956 HTTP State Management Mechanism 是通用 cookie 规范。网络服务器用 HTTP头向客户端发送 Cookie，在客户端，浏览器通过解析这些 cookie 并将它们保存为一个本地文件，它会自动将同一服务器的任何请求带上这写 cookies。</p>
<p>Cookie 机制采用的是在客户端保持状态的方案。它是在用户端的会话状态的存贮机制，他需要用户打开客户端的 cookie 支持。cookie 的作用就是为了解决 HTTP 协议无状态的缺陷所作的努力。</p>
<h2 id="session"><a class="markdownIt-Anchor" href="#session"></a> session</h2>
<p>session 是一种服务端的机制，服务端使用类似于散列表的结构来保存信息。</p>
<p>当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含一个session 标识（session Id），如果已经为此客户端创建过 session ，服务器就按照这个 session Id 把session 减锁出来使用（无，则创建）。这个session Id 的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个 session ID 将被在被刺响应中返回给客户端保存。</p>
<p>保存这个session Id的方式可以采用 cookie， 这样在交互过程中浏览器可以自动的按照规则把这个 标识发挥给服务器。一般这个 cookie的名字类似于 session Id。但是 cookie可以被认为禁用。</p>
<p>有一个技术叫做 URL 重写， 就是 session Id 直接附加在 URL路径的后面， 还有一种技术叫做 表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session Id 传递会服务器。</p>
<p>cookie 和seseion 都能够进行会话跟踪，但是完成原理不太一样，普通状况下二者均能满足需求，但是 有时不能够运用cookie ，有时不能够运用 session。</p>
<p>Cookie 和session的不同点：</p>
<p>1.存取方式不同<br />
Cookie 只能保管 ASCII 字符串，假如需求存取 Unicode 字符或则二进制数据，要先编码。若要存储略微复杂的信息，比较难。</p>
<p>session 中能够存储任何类型的数据，包括而不限于 string ，，，等。session 中能够直接保管 java Bean乃至任何Java类。</p>
<p>2.隐藏策略的不同</p>
<p>cookie 存储在客户端阅读器中，对客户端是可见的，客户端的一些程序可能会窥探、复制以至修正cookie中的内容。</p>
<p>而session 存储 在服务器上，对客户端是透明的，不存在敏感信息泄露的风险。</p>
<p>假如选用 cookie，比较好的方法是，敏感的信息如账号等尽量不要写到 cookie 中。最好将 cookie 信息加密，然后提交服务器解密。</p>
<p>3.有效期的不同</p>
<p>cookie 可以设置的时间很长很长，以持久的记载该用户的登录信息。要到达这种效果，用cookie是好的选择。</p>
<p>session 依赖于 名为 jseeion Id 的cookie，而 cookie 就sessionId的国企时间默许为 -1，值需关闭阅读器session就会失效，所以session 不能够达到持久的记录。运用 URL重写也不行。而 设置session的超时时间越长， 服务器累计的session就会越多，越容易招致内存泄漏。</p>
<p>4.服务器压力的不同</p>
<p>session 是保管在服务端的，每个用户都会产生一个session。假如并发访问的用户十分多，会产生十分多的 session， 耗费大量的内存。所以并发极高的情况，不会选择用session追踪客户会话。</p>
<p>而cookie保存在客户端，不占用服务器资源。并发阅读的用户十分多，cookie是很好的选择。</p>
<p>5.浏览器支持的不同</p>
<p>cookie 是需要客户端浏览器支持的。计入客户端仅用了 cookie，那么会话跟踪就会失效。关于 WAP 应用，常规的Cookie 就派不上用场了。</p>
<p>运用 session以及 URL地址重写。需要注意的是一切的用到 session 程序的 URL 都要进行 URL地址重写。否则 session会话跟踪还会失效。关于 WAP应用来说， session+URL地址重写或许是他唯一的选择。</p>
<p>假如支持 cookie，则 cookie既能够设为本浏览器窗口以及子窗口内有效，也能设为一切阅读器窗口内有效。但 session 只能在本阅读器窗口以及其子窗口内有效。但session只能在本阅读器内有效。（IE8下不同窗口session相干）</p>
<p>6.跨域支持上的不同</p>
<p>cookie 支持跨域名访问。例如将 domain 属性设置为 “.bao.com”，则以 “.bao.com”为后缀的一切域名能够访问 cookie。跨域名 cookie 如今被普遍用在网络中。而session不会支持跨域名访问，session仅在他所在的域名内有效。</p>
<p>所以大部分场景都是cookie和session搭配。</p>
]]></content>
      <categories>
        <category>IT技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch-基础</title>
    <url>/2021/10/21/Elasticsearch-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>IT技术</category>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 基本了解</title>
    <url>/2020/04/06/GO%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="go学习"><a class="markdownIt-Anchor" href="#go学习"></a> go学习</h2>
<h3 id="流程控制"><a class="markdownIt-Anchor" href="#流程控制"></a> 流程控制</h3>
<h3 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h3>
<blockquote>
<p>声明语法： func 函数名 (参数列表) [返回值列表] {}</p>
<p>type fun func(int,int) int</p>
<p>函数可以赋值给变量</p>
<p>defer 语句</p>
</blockquote>
<h4 id="内置函数"><a class="markdownIt-Anchor" href="#内置函数"></a> 内置函数</h4>
<ul>
<li>close : 主要用来关闭 channel</li>
<li>len: 用来求长度，比如string、array、slice、map、channel</li>
<li>new：用来分配内存，主要用来分配值类型，比如 int、struct。返回的是指针</li>
<li>make：用来分配内存，主要用来分配引用类型，比如chan、map、slice</li>
<li>append：用来追加元素到数组、slice中</li>
<li>panic和recover：用来做错误处理</li>
</ul>
<p>闭包</p>
<blockquote>
<p>函数内部的值修改会被保存</p>
</blockquote>
<p>数组和切片</p>
<blockquote>
<p>数组：是同一种数据类型的固定长度的序列</p>
<p>数组定义：var a [len] int，比如： var a[5] int</p>
<p>长度是数组类型的一部分，因此，var a[5] int 和var a[10] in 是不同的类型</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age0 [<span class="number">5</span>]<span class="type">int</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>切片是数组的一个引用，因此切片是引用类型</p>
<p>切片的长度可以改变，因此，切片是一个可变的数组</p>
<p>切片遍历方式和数组一样，可以用len()求长度</p>
<p>cap可以求出slice的长度</p>
<p>切片是一个引用地址，可以直接修改，切片传地址</p>
<p>slice、map、chan</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">var</span> slcie []<span class="type">int</span> = arr[start:end]</span><br></pre></td></tr></table></figure>
<p>copy 拷贝切片</p>
<p>排序和查找操作</p>
<p><code>sort</code> 包</p>
<h4 id="map-数据结构"><a class="markdownIt-Anchor" href="#map-数据结构"></a> Map 数据结构</h4>
<blockquote>
<p>key-value 的数据结构，又叫字典或关联数组</p>
<p>声明不会分配内存，需要初始化make</p>
</blockquote>
<p>delete 删除key</p>
<h4 id="线程同步"><a class="markdownIt-Anchor" href="#线程同步"></a> 线程同步</h4>
<ul>
<li><code>import(&quot;sync&quot;)</code></li>
<li>互斥锁  var mu sync.Mutex</li>
<li>读写锁  var mu sync.RMutex</li>
</ul>
<p>struct</p>
<ol>
<li>用来自定义复杂数据结构</li>
<li>struct里面可以包含多个字段（属性）</li>
<li>struct类型可以自定义方法，注意和函数的区分</li>
<li>struct类型是值类型</li>
<li>struct类型可以嵌套</li>
<li>GO语言没有class类型，只有struct类型</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">  Age <span class="type">int</span></span><br><span class="line">  score <span class="type">float32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 小写无法包外访问，大写可以</span></span><br></pre></td></tr></table></figure>
<p>链表</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">  Next* Student</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>golang 中的struct 没有构造函数，一般可以使用工厂模式来解决这个问题</p>
<p>匿名字段, 结构体字段可以没有名字。体现继承</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Car <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> ass <span class="keyword">struct</span> &#123;</span><br><span class="line">  Car</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法，golang中的方法是作用在特定类型的变量上，因此自定义类型，都可以有方法，而不仅仅是struct</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(recevier <span class="keyword">type</span>)</span></span> methodName(参数列表)(返回值列表)&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>一个结构体嵌套另一个结构体就是组合</p>
<p>接口</p>
<p>Interface 类型可以定义一组方法，但是这些不需要实现。并且interface不能包含任何变量。</p>
<p>反射</p>
<h3 id="goroute"><a class="markdownIt-Anchor" href="#goroute"></a> Goroute</h3>
<p>设置golang运行的cpu核数</p>
<p>go build -race 查看线程竞争</p>
<p>channel 声明</p>
<p>管道通信的文件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量 <span class="keyword">chan</span> 类型</span><br></pre></td></tr></table></figure>
<p>对channel 进行 select 操作</p>
<p>定时器</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line">t := time.NewTicker(time.Second)</span><br><span class="line">t.Stop()</span><br></pre></td></tr></table></figure>
<p>Socket 编程</p>
<p>Tcp编程</p>
]]></content>
      <categories>
        <category>IT技术</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>git 操作记录</title>
    <url>/2020/01/06/Git/</url>
    <content><![CDATA[<h1 id="git"><a class="markdownIt-Anchor" href="#git"></a> Git</h1>
<p>初始化Git</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>查看被托管的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
<p>托管文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add . # 点就代表所有文件，</span><br></pre></td></tr></table></figure>
<p>第一次复制</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &#x27;名称&#x27;</span><br></pre></td></tr></table></figure>
<p>文件检测到，需要重新提交</p>
<p>查看修改日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>
<p>回到第一次提交状态，本地文件会回滚gitgit</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">git</span> <span class="string">reset</span> <span class="built_in">--hard</span> <span class="comment"># + 第一次 commit 后面的内容或者 reflog 后面的内容</span></span><br></pre></td></tr></table></figure>
<p>查看以前的状态：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>
<p>上线：</p>
<p>1.git 删除远程地址</p>
<p>git remote rm origin<br />
2.git 更换远程地址</p>
<p>git remote add origin <span class="exturl" data-url="aHR0cDovLzEwLjAwLjMuMjYwOjEwMDgwL3h4eHh4eC9zeHh4eS5naXQv">http://10.00.3.260:10080/xxxxxx/sxxxy.git/<i class="fa fa-external-link-alt"></i></span><br />
3.把当前分支与远程分支进行关联(branchname要改成你的当前分支名称)</p>
<p>git push --set-upstream origin branchname</p>
<p>接下来，我们就要开始配置了。</p>
<p>通过 <code>git remote add &lt;name&gt; &lt;url-of-remote&gt;</code> 指令来添加远程仓库。</p>
<blockquote>
<p>name 是远程仓库的别名，便于区分不同的远程仓库。</p>
</blockquote>
<blockquote>
<p>url-of-remote 是我们的远程仓库链接，就是平时看到的以.git为后缀的链接啦！</p>
</blockquote>
<p>比如，我想添加github的远程仓库，并且取名为 github：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> remote <span class="keyword">add</span> github https:<span class="comment">//github.com/gongqingfeng/Drcom.git</span></span><br></pre></td></tr></table></figure>
<p>至于链接来自于哪，这里就不用我多说了吧！添加码云的远程仓库也是类似的操作，因为我前面假设的是clone自码云，所有这里就不需要添加了。</p>
<p>好，来看一下我们刚刚添加好的仓库：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git remote -v</span></span><br></pre></td></tr></table></figure>
<p>这条指令就是用来查看远程仓库的。</p>
<p>强制推送</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git push origin <span class="keyword">master</span> <span class="title">-f</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>IT技术</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang-基础</title>
    <url>/2020/10/21/Golang-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="golang-数据结构与关键字"><a class="markdownIt-Anchor" href="#golang-数据结构与关键字"></a> Golang 数据结构与关键字</h1>
<h2 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h2>
<h3 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h3>
<blockquote>
<p>数组：相同元素，内存地址连续，利用索引可以快速访问到元素，容量确定（不可以扩容）的一种数据结构</p>
</blockquote>
<h4 id="初始化方式"><a class="markdownIt-Anchor" href="#初始化方式"></a> 初始化方式</h4>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">arr1 := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;   <span class="comment">// 确定容量大小</span></span><br><span class="line">arr2 := [...]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// 编译器会转换成上面这一种，推导确定容量</span></span><br></pre></td></tr></table></figure>
<h4 id="访问和赋值"><a class="markdownIt-Anchor" href="#访问和赋值"></a> 访问和赋值</h4>
<blockquote>
<p>利用下标进行索引查询每个元素，对应元素可以进行赋值操作，但不能超出数组长度的索引查询请求。</p>
</blockquote>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line">arr1 := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> arr1 &#123;</span><br><span class="line">    arr1[i] = <span class="number">3</span> <span class="comment">// 将对应索引的元素值，赋值 = 3</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(arr1)</span><br><span class="line">fmt.Println(arr1[<span class="number">3</span>]) <span class="comment">// 报错，因为索引的下标是从 0 开始 </span></span><br></pre></td></tr></table></figure>
<h3 id="切片"><a class="markdownIt-Anchor" href="#切片"></a> 切片</h3>
<blockquote>
<p>动态数组：长度是动态的，可以在容量不足时扩容。</p>
<p>切片其实内部引用的数组结构</p>
</blockquote>
<h4 id="数据结构-2"><a class="markdownIt-Anchor" href="#数据结构-2"></a> 数据结构</h4>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SliceHeader <span class="keyword">struct</span> &#123;</span><br><span class="line">    Data <span class="type">uintptr</span> <span class="comment">// 数组</span></span><br><span class="line">    Len <span class="type">int</span></span><br><span class="line">    Cap <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="切片操作"><a class="markdownIt-Anchor" href="#切片操作"></a> 切片操作</h4>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字面量初始化</span></span><br><span class="line">slice := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">// 关键字 make </span></span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// 下标获得一部分</span></span><br><span class="line">arr := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">slice := arr[:]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用 for range 访问元素</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> slice &#123;</span><br><span class="line">    slice[i] = <span class="number">1</span> <span class="comment">// 利用索引访问时，获取到的是当前索引在数组中的地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> slice &#123;</span><br><span class="line">    v = <span class="number">1</span> <span class="comment">// 此方法访问时，切片元素没有修改，因为 v 变量是临时开辟的地址，每次读取会将对应的元素内容复制到 v 中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">slice = <span class="built_in">append</span>(slice, <span class="number">1</span>) <span class="comment">// 追加一个元素到 slice 中, 扩容操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制切片</span></span><br><span class="line">arr := []<span class="type">int</span>&#123;&#125;</span><br><span class="line"><span class="built_in">copy</span>(arr, slice)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice)) <span class="comment">// 查看长度</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice)) <span class="comment">// 查看容量</span></span><br></pre></td></tr></table></figure>
<h4 id="切片扩容"><a class="markdownIt-Anchor" href="#切片扩容"></a> 切片扩容</h4>
<blockquote>
<p>切片是一个动态数组，容量不固定，所以当需要进行扩容时，会进行数组的复制，重新选择一个地址来存储数组。</p>
<p>扩容的具体策略分为：</p>
<ul>
<li>当前期望容量大于当前容量两倍时，就会使用期望容量；</li>
<li>当前切片长度小于 1024 时，就会将容量翻倍；</li>
<li>当前切片长度大于 1024 时，就会每次按 25% 的容量扩容，直到新容量满足期望容量</li>
</ul>
</blockquote>
<h3 id="哈希表"><a class="markdownIt-Anchor" href="#哈希表"></a> 哈希表</h3>
<blockquote>
<p>map 就是go 中应用 哈希表方式进行数据存储的结构。</p>
<p>map 采用 <font color=red>哈希桶</font> 进行存储数据的方式，哈希桶的地址是连续的，分为<font color=blue>正常桶</font> 和 <font color=blue>溢出桶 </font> ，每个桶中数据通过 <font color=blue>链表</font> 存储当前 key 利用哈希函数生成的哈希值对应的数据。</p>
<p>一个正常桶存储 8个键值对，当 正常桶装满时，会存储到溢出桶。正常桶与溢出桶通过链表连接。</p>
</blockquote>
<h4 id="数据结构-3"><a class="markdownIt-Anchor" href="#数据结构-3"></a> 数据结构</h4>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> hmap <span class="keyword">struct</span> &#123;</span><br><span class="line">    count     	<span class="type">int</span>				<span class="comment">// 当前哈希表元素数量</span></span><br><span class="line">    flags     	<span class="type">uint8</span>			<span class="comment">// </span></span><br><span class="line">    B         	<span class="type">uint8</span>			<span class="comment">// 当前哈希表持有 buckets （哈希桶）数量</span></span><br><span class="line">    noverflow 	<span class="type">uint16</span>			</span><br><span class="line">    hash0     	<span class="type">uint32</span>			<span class="comment">// 哈希表的种子，值在创建时确定，引入随机性</span></span><br><span class="line">    </span><br><span class="line">    buckets		unsafe.Pointer</span><br><span class="line">    oldbuckets	unsafe.POinter</span><br><span class="line">    nevacuate 	<span class="type">uintptr</span></span><br><span class="line">    </span><br><span class="line">	extra		*mapextra</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> mapextra <span class="keyword">struct</span> &#123;</span><br><span class="line">    overflow		*[]*bmap</span><br><span class="line">    oldverflow		*[]*bmap</span><br><span class="line">    nextOverflow	*bmap</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 溢出桶</span></span><br><span class="line"><span class="keyword">type</span> bmap <span class="keyword">struct</span> &#123;</span><br><span class="line">    tophash		[bucketCnt]<span class="type">uint8</span></span><br><span class="line">    topbits		[<span class="number">8</span>]<span class="type">uint8</span></span><br><span class="line">    keys		[<span class="number">8</span>]keytype</span><br><span class="line">    values		[<span class="number">8</span>]valuetype</span><br><span class="line">    pad			<span class="type">uintptr</span></span><br><span class="line">    overflow	<span class="type">uintptr</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="map-操作"><a class="markdownIt-Anchor" href="#map-操作"></a> map 操作</h4>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">hash := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;</span><br><span class="line">    <span class="string">&quot;easy&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;mid&quot;</span>: 	<span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;hard&quot;</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line">hash := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>) <span class="comment">// 注意 make 的方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> hash &#123;</span><br><span class="line">    fmt.Println(key, value) 	<span class="comment">// 访问key 对应 value </span></span><br><span class="line">    hash[key] = <span class="number">1</span> 				<span class="comment">// 赋值修改</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐藏的布尔类型字段，用于判断元素是否存在</span></span><br><span class="line"><span class="keyword">if</span> v, ok := hash[<span class="string">&quot;ww&quot;</span>]; ok &#123;</span><br><span class="line">    fmt.Println(v, ok)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(v, ok)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">delete</span>(hash, <span class="string">&quot;easy&quot;</span>) <span class="comment">// 删除操作</span></span><br></pre></td></tr></table></figure>
<h4 id="map-的扩容"><a class="markdownIt-Anchor" href="#map-的扩容"></a> map 的扩容</h4>
<blockquote>
<p>哈希扩容触发的两种情况：</p>
<ul>
<li>装载因子超过6.5；</li>
<li>哈希表使用了太多溢出桶。</li>
</ul>
</blockquote>
<h3 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h3>
<blockquote>
<p>字符串是go 中基础类型，可以当作一个由字符组成的数组，本身占用的内存空间是连续的。</p>
</blockquote>
<h4 id="数据结构-4"><a class="markdownIt-Anchor" href="#数据结构-4"></a> 数据结构</h4>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> StringHeader <span class="keyword">struct</span> &#123;</span><br><span class="line">    Data 	<span class="type">uintptr</span></span><br><span class="line">    Len 	<span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="字符操作"><a class="markdownIt-Anchor" href="#字符操作"></a> 字符操作</h4>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">str1 := <span class="string">&quot;hello wolrd&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接</span></span><br><span class="line">str2 := <span class="string">&quot;!&quot;</span></span><br><span class="line">str3 := str1 + str2</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> str1 &#123;</span><br><span class="line">    fmt.Println(str1[i]) <span class="comment">// 每一个都是 byte 类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="byte类型"><a class="markdownIt-Anchor" href="#byte类型"></a> Byte类型</h4>
<blockquote>
<p>byte 是一个 <font color=red>8</font>  位无符号整数类型，底层是 <strong>uint8</strong>。值范围 0~ 255，可以表示 ASCII 字符集的单个字节。</p>
<p>在文件操作中，常用于读取和写入字节数据。</p>
</blockquote>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line">b := <span class="string">&#x27;A&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// byte 转换为 int</span></span><br><span class="line">i：= <span class="type">int</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment">// int 转换为 byte</span></span><br><span class="line">b2 := <span class="type">byte</span>(<span class="number">65</span>)</span><br></pre></td></tr></table></figure>
<h4 id="rune-类型"><a class="markdownIt-Anchor" href="#rune-类型"></a> rune 类型</h4>
<blockquote>
<p>是 <strong>int32</strong> 类型的别名，表示一个 <strong>Unicode</strong> 字符。</p>
<p><font color=red>可用于区分字符值和整数值。</font></p>
<p>每个 rune 占用 4 个字节。</p>
</blockquote>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line">r := <span class="string">&#x27;呵呵&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是不是字母</span></span><br><span class="line">isLetter := unicode.IsLetter(r)</span><br><span class="line"></span><br><span class="line"><span class="comment">// rune 转换为 int32</span></span><br><span class="line">i := <span class="type">int32</span>(r)</span><br></pre></td></tr></table></figure>
<h2 id="语言特性"><a class="markdownIt-Anchor" href="#语言特性"></a> 语言特性</h2>
<h3 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h3>
<blockquote></blockquote>
<h4 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h4>
<blockquote>
<ul>
<li>
<p>值传递</p>
</li>
<li>
<p>支持多返回值</p>
</li>
<li>
<p>函数入参和出参的内存空间都在栈上进行分配</p>
</li>
</ul>
</blockquote>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数声明示例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(a <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + a, <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口</h3>
<blockquote>
<p>接口是一组方法的签名，</p>
</blockquote>
<h4 id="数据结构-5"><a class="markdownIt-Anchor" href="#数据结构-5"></a> 数据结构</h4>
<h2 id="关键字"><a class="markdownIt-Anchor" href="#关键字"></a> 关键字</h2>
<h3 id="for-和-range"><a class="markdownIt-Anchor" href="#for-和-range"></a> for 和 range</h3>
<h3 id="select"><a class="markdownIt-Anchor" href="#select"></a> select</h3>
<h3 id="defer"><a class="markdownIt-Anchor" href="#defer"></a> defer</h3>
<h3 id="panic-和-recover"><a class="markdownIt-Anchor" href="#panic-和-recover"></a> panic 和 recover</h3>
<h3 id="make-和-new"><a class="markdownIt-Anchor" href="#make-和-new"></a> make 和 new</h3>
<h2 id="参考书籍"><a class="markdownIt-Anchor" href="#参考书籍"></a> 参考书籍</h2>
<blockquote>
<ul>
<li>Go语言设计与实现</li>
<li>Go语言高级编程</li>
<li>Go语言底层原理剖析</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>IT技术</category>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>html 基本了解</title>
    <url>/2019/06/10/Html/</url>
    <content><![CDATA[<h1 id="html"><a class="markdownIt-Anchor" href="#html"></a> HTML</h1>
<h2 id="html初识"><a class="markdownIt-Anchor" href="#html初识"></a> HTML初识</h2>
<h3 id="html骨架格式"><a class="markdownIt-Anchor" href="#html骨架格式"></a> HTML骨架格式</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>#头部</span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>眼睛<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    主题内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="html标签分类"><a class="markdownIt-Anchor" href="#html标签分类"></a> HTML标签分类</h3>
<p>双标签：例如 <code>&lt;html&gt;&lt;/html&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签名</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">标签名</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>单标签：例如 <code>&lt;br/&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="html标签关系"><a class="markdownIt-Anchor" href="#html标签关系"></a> HTML标签关系</h3>
<p>嵌套关系</p>
<p>并列关系</p>
<h2 id="文档类型doctype"><a class="markdownIt-Anchor" href="#文档类型doctype"></a> 文档类型&lt;!DOCTYPE&gt;</h2>
<!DOCTYPE>声名文档类型：例如 xhtml 或者 html ，不过现在统一使用 html。
<h2 id="字符集"><a class="markdownIt-Anchor" href="#字符集"></a> 字符集</h2>
<meta charset="UTF-8" />
utf-8是目前最常用的字符编码格式
<p>gb23121 简单中文 包括6763个汉字</p>
<p>BIG5 繁体中文 港澳台等用</p>
<p>GBK 包涵全部中文字符，是GB2312的扩展</p>
<h2 id="标签语义化"><a class="markdownIt-Anchor" href="#标签语义化"></a> 标签语义化</h2>
<p>主要是方便代码阅读、便于维护。</p>
<p>遵循原则：先确定语义的HTML，在选合适的css。</p>
<h2 id="html常用标签"><a class="markdownIt-Anchor" href="#html常用标签"></a> HTML常用标签</h2>
<h3 id="排版标签"><a class="markdownIt-Anchor" href="#排版标签"></a> 排版标签</h3>
<h4 id="标题标签"><a class="markdownIt-Anchor" href="#标题标签"></a> 标题标签</h4>
<head>  <title> </title>
    <h1></h1>等等
<h4 id="段落标签"><a class="markdownIt-Anchor" href="#段落标签"></a> 段落标签</h4>
<p>p</p>
<h4 id="水平线标签"><a class="markdownIt-Anchor" href="#水平线标签"></a> 水平线标签</h4>
<p>hr</p>
<h4 id="换行标签"><a class="markdownIt-Anchor" href="#换行标签"></a> 换行标签</h4>
<p>br</p>
<h4 id="div-span-标签"><a class="markdownIt-Anchor" href="#div-span-标签"></a> div、span 标签</h4>
<p>div  span</p>
<h3 id="标签的属性"><a class="markdownIt-Anchor" href="#标签的属性"></a> 标签的属性</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">width</span>=<span class="string">&quot;223&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="图像标签"><a class="markdownIt-Anchor" href="#图像标签"></a> 图像标签</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;url&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="连接标签"><a class="markdownIt-Anchor" href="#连接标签"></a> 连接标签</h3>
<h4 id="锚点定位"><a class="markdownIt-Anchor" href="#锚点定位"></a> 锚点定位</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">使用“a href=“#id名”</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#teo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;teo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="base标签"><a class="markdownIt-Anchor" href="#base标签"></a> base标签</h4>
<p>base 可以设置整体连接的打开状态</p>
<p>base 写到 <head>  </head> 之间</p>
<p>把所有的连接都默认添加 target=“_blank”</p>
<h3 id="特殊字符"><a class="markdownIt-Anchor" href="#特殊字符"></a> 特殊字符</h3>
<h3 id="注释标签"><a class="markdownIt-Anchor" href="#注释标签"></a> 注释标签</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!---- 注释语句 ----&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="路径"><a class="markdownIt-Anchor" href="#路径"></a> 路径</h3>
<h4 id="相对路径"><a class="markdownIt-Anchor" href="#相对路径"></a> 相对路径</h4>
<h4 id="绝对路径"><a class="markdownIt-Anchor" href="#绝对路径"></a> 绝对路径</h4>
<h2 id="列表标签"><a class="markdownIt-Anchor" href="#列表标签"></a> 列表标签</h2>
<h3 id="无序标签-ul"><a class="markdownIt-Anchor" href="#无序标签-ul"></a> 无序标签 ul</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>就是没有数字排序</p>
<h3 id="有序标签-ol"><a class="markdownIt-Anchor" href="#有序标签-ol"></a> 有序标签 ol</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>数字排序 1.2.3.</p>
<h3 id="自定义标签"><a class="markdownIt-Anchor" href="#自定义标签"></a> 自定义标签</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="表格-table"><a class="markdownIt-Anchor" href="#表格-table"></a> 表格 table</h2>
<h3 id="创建表格"><a class="markdownIt-Anchor" href="#创建表格"></a> 创建表格</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：</p>
<p>tr 中只能套用 td</p>
<h3 id="表格的属性"><a class="markdownIt-Anchor" href="#表格的属性"></a> 表格的属性</h3>
<h3 id="表头标签"><a class="markdownIt-Anchor" href="#表头标签"></a> 表头标签</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="表格结构"><a class="markdownIt-Anchor" href="#表格结构"></a> 表格结构</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="tag">&lt;/<span class="name">thead</span>&gt;</span>表头</span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span>表格主体</span><br></pre></td></tr></table></figure>
<h3 id="表格标题"><a class="markdownIt-Anchor" href="#表格标题"></a> 表格标题</h3>
<p>caption</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="合并单元格"><a class="markdownIt-Anchor" href="#合并单元格"></a> 合并单元格</h3>
<p>跨行合并：rowspan  跨列合并：colspan</p>
<h2 id="表单标签"><a class="markdownIt-Anchor" href="#表单标签"></a> 表单标签</h2>
<h3 id="input-控件"><a class="markdownIt-Anchor" href="#input-控件"></a> input 控件</h3>
<h3 id="label标签"><a class="markdownIt-Anchor" href="#label标签"></a> label标签</h3>
<p>label 标签为 input 元素定义标注（标签）</p>
<p>作用：用于绑定一个表单元素，当点击label标签的时候，会自动定位到当前表单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="textarea-控件"><a class="markdownIt-Anchor" href="#textarea-控件"></a> textarea 控件</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;每行中的字符数&quot;</span> <span class="attr">row</span>=<span class="string">&quot;显示行数&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="下拉菜单"><a class="markdownIt-Anchor" href="#下拉菜单"></a> 下拉菜单</h3>
<p>使用 select 控件定义下拉菜单的基本语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ol>
<li>&lt;select&gt;&lt;/select&gt;中至少应包含一对&lt;option&gt;&lt;/option&gt;。</li>
<li>在option 中定义selected =&quot; selected &quot;时，当前项即为默认选中项。</li>
</ol>
<h3 id="表单域from"><a class="markdownIt-Anchor" href="#表单域from"></a> 表单域（from）</h3>
<p>from标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">from</span> <span class="attr">action</span>=<span class="string">&quot;url地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;提交方式&quot;</span> <span class="attr">name</span>=<span class="string">&quot;表单名称&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>常用属性：</p>
<ol>
<li>Action<br />
在表单收集到信息后，需要将信息传递给服务器进行处理，action属性用于指定接收并处理表单数据的服务器程序的url地址。</li>
<li>method<br />
用于设置表单数据的提交方式，其取值为get或post。</li>
<li>name<br />
用于指定表单的名称，以区分同一个页面中的多个表单。</li>
</ol>
<p>注意：  每个表单都应该有自己表单域。</p>
<h2 id="位运算"><a class="markdownIt-Anchor" href="#位运算"></a> 位运算</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</span><br><span class="line">num1 = num1 ^ num2;</span><br><span class="line">num2 = num1 ^ num2;</span><br><span class="line">num2 = num1 ^ num2;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>IT技术</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Kakfa-基础</title>
    <url>/2021/03/21/Kakfa-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>IT技术</category>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 基本认识</title>
    <url>/2019/11/22/Linux/</url>
    <content><![CDATA[<h1 id="linux"><a class="markdownIt-Anchor" href="#linux"></a> Linux</h1>
<p>redhat 发行版，收费版的Linux</p>
<p>SUSE Linux 德国版，常用于移动电信支付领域</p>
<h3 id="桥接网路模式"><a class="markdownIt-Anchor" href="#桥接网路模式"></a> 桥接网路模式</h3>
<h3 id="nat-网络模式"><a class="markdownIt-Anchor" href="#nat-网络模式"></a> NAT 网络模式</h3>
<p>就是在你宿主机的ip网络中，通过网络地址  转换你你你技术（NAT），</p>
<p>解决问题：</p>
<ol>
<li>ip 地址不够用</li>
<li>解决ip可能冲突的问题</li>
</ol>
<p>为什么使用nat地址转换：</p>
<p>获取ip地址</p>
<p>上述没有进行配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认没有启动网卡，启动网卡</span></span><br><span class="line">ifup   ens33</span><br><span class="line">ifdown # 关闭网卡</span><br><span class="line">管理员</span><br><span class="line">systemctl </span><br></pre></td></tr></table></figure>
<p>管理网络服务的一个脚本文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/network   start/stop/restart  对网络进行启停/重启</span><br></pre></td></tr></table></figure>
<p>Linux基本命令</p>
<p>文本是白色得， 文件夹市蓝色的</p>
<p>用 Tab 建补全命令，补全文件</p>
<p>对文件夹得增删改查：</p>
<p>增</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir     hello  #  建文件夹 </span><br><span class="line">touch  文件名  # 创建文件</span><br></pre></td></tr></table></figure>
<p>删</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm test.txt  # 删除文本</span><br><span class="line">rm -i text.txt  # 删除文件要提醒</span><br><span class="line">rm -i  sss* # 以sss开头的文件</span><br><span class="line">rmdir  # 删除目录，只能删除空文件夹</span><br><span class="line">rm -r hello14 # </span><br><span class="line">rm -rf /* # 删除所有文件（文件夹）,记得快照</span><br></pre></td></tr></table></figure>
<p>改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd root(用户名) </span><br><span class="line">mv  旧文件名 新文件名 # 该文件名</span><br><span class="line">mv  test  hello3/   # 移动文件</span><br><span class="line">cp ss.txt  ss.txt.back    # 复制命令</span><br><span class="line">cp -r test test2 # 拷贝文件夹，递归复制</span><br></pre></td></tr></table></figure>
<p>查</p>
<p>查看当前位置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pwd </span><br></pre></td></tr></table></figure>
<p>当前目录得内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls </span><br><span class="line">ls  操作对象</span><br><span class="line">ls /root</span><br><span class="line">ls -l  /root  # 显示 root 文件夹下得详细信息</span><br><span class="line">ls      -la  # 显示所有文件（包括隐藏得）</span><br><span class="line">ls      -la  /root  # 显示 root 文件夹下的</span><br><span class="line">cd 切换目录 只能进入文件夹</span><br><span class="line">cd  . 代表当前目录</span><br><span class="line">cd  .. 切换上一级目录</span><br><span class="line">man rm # 命令操作手册,查看命令详细用法</span><br><span class="line"></span><br><span class="line">cat 文件 小</span><br><span class="line">cat first.py -n 显示行号</span><br><span class="line">cat &gt;&gt; kun.txt &lt;&lt;EOF</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写入文件</span></span><br><span class="line">more  查看大文件</span><br></pre></td></tr></table></figure>
<p>vi 编辑器使用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi first.py  # 打开文件</span><br><span class="line">i 是 insert 插入的意思</span><br><span class="line">o 是在光标所在行的下一行写入信息</span><br><span class="line">输入 i 之后进入编辑模式</span><br><span class="line">按 esc ，退出编辑模式，回到命令</span><br><span class="line">输入 ：wq！ 退出且写入文本信息</span><br><span class="line">:  是进入底线命令模式的参数</span><br><span class="line">w  是写入的意思</span><br><span class="line">q  是退出的含义</span><br><span class="line">！  强制性的含义</span><br><span class="line"></span><br><span class="line">vim 中</span><br><span class="line">set nu # 显示行号</span><br><span class="line">yy # 光标所在的复制这一行</span><br><span class="line">dd # 光标所在删除这一行</span><br><span class="line">5yy 复制5行</span><br><span class="line">5dd 删除5行</span><br></pre></td></tr></table></figure>
<h3 id="远程登录命令"><a class="markdownIt-Anchor" href="#远程登录命令"></a> 远程登录命令</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh root@ip</span><br><span class="line">w # 查看连接本机器的用户</span><br></pre></td></tr></table></figure>
<p>修改网络配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts</span><br></pre></td></tr></table></figure>
<p>更改主机名字</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname  linux学习</span><br><span class="line">退出会话</span><br><span class="line">logout</span><br></pre></td></tr></table></figure>
<p>xshell 快捷命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">clear   <span class="comment"># ctrl + l 清屏</span></span><br><span class="line">ctrl + d <span class="comment"># 等同于logout</span></span><br><span class="line">ctrl + shift + r <span class="comment"># 快速登录</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>linux 的绝对路径</p>
<p>Linux的PATH路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $PATH # 查看linux Path 变量</span><br><span class="line">只能添加目录，不饿能定位到文件</span><br><span class="line">软连接和path添加二选一即可</span><br></pre></td></tr></table></figure>
<p>Linux的文件系统</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@linux ~]# </span><br><span class="line">[用户名@主机名 当前工作目录]</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">PS1=<span class="string">&quot;[\u@\h \w \t]\$&quot;</span></span></span><br><span class="line">PS1=&quot;[\u@\h \w \t]\$&quot;</span><br><span class="line"></span><br><span class="line">useradd ggy2 # 新建用户</span><br><span class="line">passwd ggy2 # 密码</span><br><span class="line"></span><br><span class="line">userdel 删除用户</span><br><span class="line">userdel -rf 强制删除 f删除目录</span><br><span class="line"></span><br><span class="line">sudo 以 root 的方式执行命令</span><br><span class="line">设置 vi etc/sudoers 可以执行的用户</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Allow root to run any commands anywhere</span></span></span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">可以执行 sudo 命令的用户，</span><br><span class="line">visudo 提供文件检测</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">su -  xiaobai 切换小白用户</span><br><span class="line"></span><br><span class="line">echo &quot;ss&quot;  &gt; # 重定向写入</span><br><span class="line">echo &quot;ss&quot;  &gt;&gt; # 重定向追加写入</span><br><span class="line"></span><br><span class="line">在liunx 中的文件第一行输入#coding：utf8</span><br><span class="line"></span><br><span class="line">tar压缩解压命令</span><br><span class="line">-c 压缩参数</span><br><span class="line">-x 解压参数</span><br><span class="line">-v 显示过程</span><br><span class="line">-f 指定文件 这个写到最后</span><br><span class="line">tar -cf 文件名</span><br><span class="line"></span><br><span class="line">gzip 压缩当前目录所有文件</span><br><span class="line"></span><br><span class="line">两个压缩格式，就要解压到两次</span><br><span class="line">tar -xf  allrepo.tar  -C  /opt/  指定解压得目录</span><br><span class="line"></span><br><span class="line">关闭 iptables</span><br><span class="line">sysyemctl         stop      firewalld</span><br><span class="line">系统服务管理命令   停止指令   服务名</span><br></pre></td></tr></table></figure>
<h3 id="linux-查找命令"><a class="markdownIt-Anchor" href="#linux-查找命令"></a> Linux 查找命令</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -name </span><br><span class="line">find / -type -name</span><br><span class="line">f 是文件</span><br><span class="line">d 是目录</span><br></pre></td></tr></table></figure>
<p>linux 查看进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef # 查看所有</span><br><span class="line">ps -ef | grep ss # 查看 ss 程序 过滤</span><br><span class="line">管道命令 再次处理 grep</span><br><span class="line">cat setting.py | grep  &quot;STA*&quot; </span><br><span class="line">grep -v # 反向选择</span><br><span class="line">grep &quot;STA*&quot; settings.py -n # 显示行号</span><br><span class="line"></span><br><span class="line">tail -f # 实时监控的命令</span><br><span class="line">tail -f /tmp/文件名称  可以查看</span><br></pre></td></tr></table></figure>
<h3 id="alias-别名命令"><a class="markdownIt-Anchor" href="#alias-别名命令"></a> alias 别名命令</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias rm=&quot;rm -i&quot; # 设置rm命令</span><br><span class="line">unalias rm # 取消命令</span><br><span class="line"></span><br><span class="line">which rm 查看rm命令在哪</span><br><span class="line">whois python2 查看python2 在哪</span><br><span class="line">who 查看当前登录用户</span><br><span class="line">woami 当前用户是谁</span><br></pre></td></tr></table></figure>
<p>scp远程传输命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">传输自己的文件</span><br><span class="line">scp 自己的文件  root@ip:/opt/</span><br><span class="line">传输远程服务器的文件，到自己本地</span><br><span class="line">scp root@ip:/文件  /opt/文件</span><br></pre></td></tr></table></figure>
<p>查看文件大小</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">du -f</span><br><span class="line">du -h # 统计每个文件运行大小</span><br><span class="line">du -sh </span><br></pre></td></tr></table></figure>
<p>top</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top # 查看当前进程，服务器具体信息</span><br></pre></td></tr></table></figure>
<p>chattr</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chattr +a 文件名  # 枷锁</span><br><span class="line">chattr -a 文件名  # 减锁</span><br></pre></td></tr></table></figure>
<p>linux 查看时间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">date # 查看当前时间</span><br><span class="line">ntpdate -u ntp.aliyun.com</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>爬虫命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget 地址http://pythonav.cn/av/girltwo.jpg</span><br></pre></td></tr></table></figure>
<p>linux 和 windows 传输文件</p>
<p>通过  lrzsz 工具包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install lrzsz -y</span><br><span class="line">lrzsz 上传下载的小工具</span><br></pre></td></tr></table></figure>
<h3 id="开关机命令"><a class="markdownIt-Anchor" href="#开关机命令"></a> 开关机命令</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot # 命令用于重启机器</span><br><span class="line">poweroff # 用于关闭系统</span><br></pre></td></tr></table></figure>
<p>权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ll # 查看文件权限</span><br><span class="line">rw-r--r--</span><br><span class="line">rw- 文件所属主的权限</span><br><span class="line">r-- 这文件所属组的权限</span><br><span class="line">r-- 其他人权限</span><br><span class="line"></span><br><span class="line">chmod 0+r quanxian/ 修改权限</span><br><span class="line">chmod u+ file 或者可以</span><br><span class="line">chmod 777 file</span><br><span class="line"></span><br><span class="line">r  可读，用 cat 查看</span><br><span class="line">w  可以编辑或者删除</span><br><span class="line">x  可以执行</span><br></pre></td></tr></table></figure>
<p>文件夹的可读可写</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">r  可读</span><br><span class="line">w  可以创建文件</span><br><span class="line">x  可以进入目录</span><br><span class="line">rwx 对应 4+2+1 </span><br></pre></td></tr></table></figure>
<p>软连接配置（快捷方式）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln 命令</span><br><span class="line">ln -s 目标文件绝对地址  快捷方式的绝对路径</span><br><span class="line">ln -s /opt/cs.txt   /home/cs.txt</span><br></pre></td></tr></table></figure>
<h3 id="网络端口命令"><a class="markdownIt-Anchor" href="#网络端口命令"></a> 网络端口命令</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep 查看任务是否运行有进程</span><br><span class="line">netstat -tunlp | grep 查看任务的端口是否启动</span><br><span class="line">安装 yum install net-tools -y</span><br><span class="line">yum install nginx -y</span><br><span class="line">yum install redis-server</span><br><span class="line"></span><br><span class="line">ps 命令查看</span><br><span class="line">ps -ef 查看进程</span><br><span class="line"></span><br><span class="line">kill 命令 后面加进程号</span><br><span class="line">kill -9 （危险命令），强制杀死</span><br><span class="line"></span><br><span class="line">selinux 内置的防火墙</span><br><span class="line">iptables -F 清空规则</span><br><span class="line">iptables -L 查看规则</span><br><span class="line">停止防火墙服务</span><br><span class="line">sysytemctl /start/ restart/stop  firewalld</span><br><span class="line"></span><br><span class="line">防火墙地址</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="linux字符编码"><a class="markdownIt-Anchor" href="#linux字符编码"></a> Linux字符编码</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看字符编码</span></span><br><span class="line">echo $LANG</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查 xshell crt 得字符集</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令修改字符集</span></span><br><span class="line">export LANG=en_US.utf8</span><br><span class="line">1.修改配置文件 /etc/locale.conf</span><br><span class="line">LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">1.2 读取这个文件，使变量生效</span><br><span class="line">source 读取命令</span><br><span class="line">2.更改玩查看系统语言变量</span><br><span class="line">locale</span><br></pre></td></tr></table></figure>
<p>df 分配磁盘空间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df 查看分配磁盘空间</span><br><span class="line">df -h 查看根目录总容量</span><br></pre></td></tr></table></figure>
<p>tree以树的形式显示信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install tree</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没有安装</span></span><br></pre></td></tr></table></figure>
<h3 id="dns服务"><a class="markdownIt-Anchor" href="#dns服务"></a> DNS服务</h3>
<p>先解析 hosts</p>
<p>再解析 resolv.conf</p>
<p>bind 软件，域名解析</p>
<p>常见的DNS</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">8.8.8.8</span> 谷歌的</span><br><span class="line"><span class="number">114.114.114.114</span> 114dns</span><br><span class="line"><span class="number">223.5.5.5</span></span><br><span class="line"><span class="number">223.6.6.6</span> 阿里巴巴的dns服务器</span><br><span class="line"><span class="number">119.29.29.29</span>  腾讯的</span><br><span class="line">可在 /etc/resolv.conf 配置</span><br></pre></td></tr></table></figure>
<p>hosts 强制解析的域名文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/hosts</span><br><span class="line"></span><br><span class="line">nslookup 查看域名解析</span><br></pre></td></tr></table></figure>
<h3 id="定时任务"><a class="markdownIt-Anchor" href="#定时任务"></a> 定时任务</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -l 查看定时任务</span><br><span class="line">crontab -e 编辑任务</span><br><span class="line">etc 目录下</span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">For details see man 4 crontabs</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Example of job definition:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.---------------- minute (0 - 59)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">|  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">|  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">|  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">|  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">|  |  |  |  |</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">*  *  *  *  * user-name  <span class="built_in">command</span> to be executed</span></span><br><span class="line"></span><br><span class="line">crontab的语法</span><br><span class="line">分   时   日   月   周  命令要用绝对路径写</span><br><span class="line">*    *    *    *    *   每一个分钟做这个事情</span><br><span class="line">3,15 *    *    *    *   命令</span><br><span class="line">30   21   *    *    *   命令</span><br><span class="line">30   1    *    *   6，0 命令</span><br><span class="line">0    1    *    *   1-5  命令</span><br></pre></td></tr></table></figure>
<h3 id="软件包管理"><a class="markdownIt-Anchor" href="#软件包管理"></a> 软件包管理</h3>
<p>格式分为三种：</p>
<ol>
<li>
<p>源码包格式</p>
<ol>
<li>下载 python3 的源码包</li>
<li>解压源码包，切换目录</li>
<li>编译且安装</li>
<li>配置环境变量</li>
<li>使用python</li>
</ol>
</li>
<li>
<p>rpm二进制包格式 （这种安装方式需要手动解决依赖关系）</p>
<ol>
<li>下载软件的 rmp 格式包</li>
<li>rmp -ivh lrzsz.rmp</li>
<li>使用 lrzsz</li>
</ol>
</li>
<li>
<p>yum安装格式</p>
<p>自动下载，解决依赖关系，自动处理其他依赖关系</p>
<p>yum源的仓库路劲再 /etc/yum.repos.d/</p>
<p>然后这个目录底下，只有 以 .repo结尾的文件，才被识别成 yum 仓库</p>
</li>
</ol>
<p>配置国内的 yum 源</p>
<ol>
<li>在 /etc/yum.repos.d/ 目录底下，定制我们自己的 repo 仓库文件</li>
<li>阿里的 yumhttps://opsx.alibaba.com/mirror</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">下载这个 yum 源 并改名为 Base源</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>
<p>清楚 yum 缓存</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>生成新的阿里云的yum软件缓存</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>再配置 epel 额外的仓库源，这个仓库就存放很多的第三方仓库，如 nginx， redis ，mysql</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget -O <span class="regexp">/etc/yum</span>.repos.d<span class="regexp">/epel.repo http:/</span><span class="regexp">/mirrors.aliyun.com/</span>repo/epel-<span class="number">7</span>.repo</span><br></pre></td></tr></table></figure>
<p>最好在生成 yum 缓存</p>
<h4 id="yum-使用示例"><a class="markdownIt-Anchor" href="#yum-使用示例"></a> yum 使用示例</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install nginx -y   -y一路默认yes</span><br></pre></td></tr></table></figure>
<p>执行：<code>lsof -i:80</code> 查看此时哪个进程正在使用80端口</p>
<p>yum 不可以多个人使用，会被进程锁定</p>
<h3 id="安装python3"><a class="markdownIt-Anchor" href="#安装python3"></a> 安装python3</h3>
<p>编译安装</p>
<ol>
<li>
<p>下载源码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tgz</span><br><span class="line">安装之前确保依赖工具包得安装</span><br><span class="line">yum install gcc patch libffi-devel python-devel  zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel -y</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>解压源码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf Python-3.7.4.tgz</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装源码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">congfigure 一般用来生成 Makefile，为下一步得编译做准备 </span><br><span class="line">./configure  --prefix=/user</span><br><span class="line">设置该软件 安装路径 为 /user</span><br><span class="line"></span><br><span class="line">make # 执行 这个 前会指定需要得工具</span><br><span class="line"></span><br><span class="line">make install 进行安装，生成应用程序</span><br><span class="line"></span><br><span class="line">配置软连接（注意，这个和PATH配置，二选一）</span><br><span class="line">ln -s 目标文件 软连接文件</span><br><span class="line">ln -s /opt/python36/bin/python3.6  /usr/bin/python3</span><br><span class="line">此时没有 pip</span><br><span class="line">ln -s /opt/python36/bin/pip3  /usr/bin/pip3</span><br><span class="line"></span><br><span class="line">注意这里path的配置，需要将物理解释器的python，放在path最前面</span><br><span class="line">配置 PATH</span><br><span class="line">echo PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line">pwd</span><br><span class="line">/opt/python37/bin</span><br><span class="line">赋值，这个只能临时生效，需要写入文件永久生效</span><br><span class="line">PATH=/opt/python37/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line"></span><br><span class="line">Linux 有一个全局个人配置文件</span><br><span class="line">vim /etc/profile </span><br><span class="line">在最底下写入这个 PATH</span><br><span class="line">然后读取这个文件</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="虚拟环境"><a class="markdownIt-Anchor" href="#虚拟环境"></a> 虚拟环境</h3>
<p>virtualenv 就是一个虚拟解释器</p>
<p>就是基于物理环境下的python解释器，虚拟/分身  出的 多个解释器， 独立的</p>
<p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple virtualenv</span><br><span class="line">上述地址 安装快一些</span><br><span class="line">多了一个命令</span><br></pre></td></tr></table></figure>
<p>开始使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">virtualenv  --no-site-packages --python=python3  venv1/ 创建虚拟环境的名字</span><br><span class="line">--not-site-packages  构建隔离干净的虚拟环境</span><br><span class="line">--python=python3 指定虚拟环境以哪个python解释器运行</span><br><span class="line"></span><br><span class="line">source activate 激活命令</span><br><span class="line">修改 PATH 变量，path是又执行顺序的</span><br><span class="line">which python3</span><br><span class="line">查看虚拟环境是否正常</span><br><span class="line">deactivate  关闭命令</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="vim"><a class="markdownIt-Anchor" href="#vim"></a> Vim</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">w(e) 移动光标到下一个单词</span><br><span class="line">b    移动光标上一个单词</span><br><span class="line"></span><br><span class="line">数字0  移动到本行开头</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"> 移动光标到本行结尾</span></span><br><span class="line">H  移动光标到屏幕首行</span><br><span class="line">M  移动光标到屏幕的中间一行</span><br><span class="line">L  移动光标到屏幕的尾行</span><br><span class="line">gg 移动光标到文档的首行</span><br><span class="line">G  移动光标到文档尾行</span><br><span class="line"></span><br><span class="line">ctrl + f 下一页</span><br><span class="line">ctrl + b 上一页</span><br><span class="line">`.  移动光标到上一次的修改行</span><br></pre></td></tr></table></figure>
<p>查找</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/chaoge  在整篇文档中搜索chaoge字符串，向下查找</span><br><span class="line">?chaoge  在整篇文档中搜索chaoge字符串，向上查找</span><br><span class="line"></span><br><span class="line">*  查找整个文档，匹配光标所在的所有单词，按下 n 查找下一处，N上一处</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> 查找整个文档，匹配光标所在的所有单词，按下 n 查找下一处，N上一处</span></span><br><span class="line"></span><br><span class="line">gd  查找光标所在单词匹配的单词，并停留在注释的第一个匹配上</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">% </span><span class="language-bash"> 找到括号的另一半!!!</span></span><br></pre></td></tr></table></figure>
<p>底线命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:q        强制退出</span><br><span class="line">:wq       强制写入退出</span><br><span class="line">:set nu   显示行号</span><br><span class="line">:数字     调到数字那行</span><br></pre></td></tr></table></figure>
<p>确保开发环境的一致性</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">保证本地环境和开发环境的一致性</span><br><span class="line">pip3 freeze &gt; requirements.txt</span><br><span class="line">到出当前python环境的包，创建这个配置文件</span><br><span class="line">pip3 list 查看当前已安装的包</span><br><span class="line">pip3 install -r requirements.txt  创建 virtualenv，在venv中导入下项目所需的模块依赖</span><br></pre></td></tr></table></figure>
<h3 id="虚拟环境管理工具"><a class="markdownIt-Anchor" href="#虚拟环境管理工具"></a> 虚拟环境管理工具</h3>
<p>virtualenvwrapper</p>
<p>安装这个命令，必须得在物理解释器得下，注意退虚拟环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install virtualenvwrapper</span><br></pre></td></tr></table></figure>
<p>设置一个环境变量，每次启动加载这个</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc   #vim编辑用户家目录下的.bashrc文件，这个文件是用户在登录的时候，就读取这个文件</span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">export</span> 是读取shell命令的作用</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这些变量根据你自己的绝对路径环境修改</span></span><br><span class="line">export WORKON_HOME=~/Envs   #设置virtualenv的统一管理目录</span><br><span class="line">export VIRTUALENVWRAPPER_VIRTUALENV_ARGS=&#x27;--no-site-packages&#x27;   #添加virtualenvwrapper的参数，生成干净隔绝的环境</span><br><span class="line">export VIRTUALENVWRAPPER_PYTHON=/opt/python37/bin/python3     #指定python解释器</span><br><span class="line">source /opt/python37/bin/virtualenvwrapper.sh #执行virtualenvwrapper安装脚本 </span><br></pre></td></tr></table></figure>
<p>使用过程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">重新登录</span><br><span class="line">mkvirtualenv  虚拟环境名字  # 自动创建，且激活虚拟环境</span><br><span class="line">可以继续创建</span><br><span class="line">workon  可以停止你当前的环境，任意切换</span><br><span class="line">workon  django22 切换到这个虚拟环境</span><br><span class="line"></span><br><span class="line">deactivate 停止虚拟环境</span><br><span class="line">rmvirtualenv django22 退出当前虚拟环境</span><br><span class="line"></span><br><span class="line">lsvirtualenv  列举所有的环境</span><br><span class="line">cdvirtualenv  导航到当前机会的虚拟环境</span><br><span class="line">cdvirtualenv  直接进入到 site-packages 目录中</span><br><span class="line">lssitepackages  显示 site-packages 目录中的内容</span><br></pre></td></tr></table></figure>
<h2 id="mariadb"><a class="markdownIt-Anchor" href="#mariadb"></a> mariadb</h2>
<p>就是MySQL的分支</p>
<p>安装MariaDB</p>
<p>yum 安装可能会低，所以源码安装可控</p>
<p>编译安装的软件，支持第三方功能扩展 ./configure  这里可以加上很多参数，定制功能</p>
<p>yum仓库的区别</p>
<ol>
<li>阿里云的yum仓库</li>
<li>假设msyql官网，也会提供rmp包</li>
</ol>
<p>配置MariaDB 的官方yum源，用于自动下载MariaDB的下载</p>
<p>注意点：阿里云提供的 yum仓库 ，和 epel 源仓库，也有但是很低</p>
<p>尽量选择官网的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch /etc/yum.repos.d/mariadb.repo </span><br><span class="line">然后写入如下内容</span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line">baseurl = http://yum.mariadb.org/10.1/centos7-amd64</span><br><span class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">下载安装</span><br><span class="line">yum install MariaDB-server MariaDB-client</span><br><span class="line"></span><br><span class="line">如果下载太慢，可以删除这个镜像源，</span><br><span class="line">rm -rf /etc/yum.repos.d/Mariadb.repo</span><br><span class="line">然后清空 yum 缓存</span><br><span class="line">yum clean all</span><br><span class="line"></span><br><span class="line">阿里云下载 (阿里云的Mariadb包名是小写的,官方是大写的)</span><br><span class="line">yum install mariadb-server  mariadb -y</span><br><span class="line"></span><br><span class="line">yum remove tomcat 卸载</span><br></pre></td></tr></table></figure>
<p>启动操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start/stop/restart/status  mariadb</span><br><span class="line">开机启动</span><br><span class="line">systemctl enable mariadb</span><br></pre></td></tr></table></figure>
<p>mysql初始化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation  这条命令可以初始化mysql</span><br></pre></td></tr></table></figure>
<p>设置mysql 的中文编码支持，修改 /etc/my.cnf</p>
<p>配置文件的格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*.conf</span><br><span class="line">*.cnf</span><br><span class="line">*.ini</span><br><span class="line">*.yml</span><br><span class="line">vim  /etc.my.cnf 修改成如下</span><br><span class="line">在[msyqld]中加入</span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br><span class="line">重启服务，读取配置</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>接下来就是MySQL常用命令操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grant all privileges on *.* to root@&#x27;%&#x27; identified by &#x27;password&#x27;;</span><br><span class="line">记得要刷新权限</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">命令备份数据库数据</span><br><span class="line">linux 命令</span><br><span class="line">mysqldump -u root -p --all-databases &gt; /data/Allmysql.dump</span><br><span class="line">登录mysql 导入数据</span><br><span class="line">source /data/Allmysql.dump</span><br><span class="line">通过命令导入数据</span><br><span class="line">mysql -uroot -p &lt; /data/Allmysql.dump  # </span><br></pre></td></tr></table></figure>
<p>主从复制</p>
<p>主从复制是通过 binlog 日志复制到需要同步的从服务器上。</p>
<p>MySQL数据库支持单向，双向，链式级联等不同场景复制，一个充当Master服务器，</p>
<p>而一个或多个充当服务器 slave ，接受master文件的内容。</p>
<p>主从复制的逻辑有一下几种：</p>
<ul>
<li>一主一从，单向主从同步模式，只能在Master端写入数据</li>
<li>一主多从</li>
</ul>
<p>MySQL的主从复制架构</p>
<p>准备主库的配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">修改配置文件</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">修改内容</span><br><span class="line">[mysqld]</span><br><span class="line">server-id=1            标注 主库的id </span><br><span class="line">log-bin=mysql-bin      那个binlog的文件名</span><br><span class="line"></span><br><span class="line">重启mariadb ，修改前先确保服务停掉</span><br><span class="line">systemctl start mariadb</span><br><span class="line">或者</span><br><span class="line">systemctl restart mariadb</span><br><span class="line"></span><br><span class="line">创建用于主从数据同步的账户</span><br><span class="line">create user &#x27;ggy&#x27;@&#x27;%&#x27; identified by &#x27;123&#x27;;</span><br><span class="line"></span><br><span class="line">授予主从同步账号的，复制数据的权限</span><br><span class="line">grant replication slave on *.* to &#x27;ggy&#x27;@&#x27;%&#x27;;</span><br><span class="line"></span><br><span class="line">进行数据库的锁表，不能写入数据</span><br><span class="line">flush table with read lock;</span><br><span class="line"></span><br><span class="line">数据导出，</span><br><span class="line">mysqldump -u root -p --all-databases &gt; /opt/zhucong.dump</span><br><span class="line"></span><br><span class="line">然后将主库的数据，发送给从库</span><br><span class="line">scp /opt/zhucong.dump  root@从库:/opt</span><br><span class="line"></span><br><span class="line">此时去从库的MySQL上，登录，导入主库的数据，保持数据一致性</span><br><span class="line">mysql -uroot -p</span><br><span class="line">source /opt/zhucong.dump </span><br><span class="line"></span><br><span class="line">配置从库</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">解锁表</span><br><span class="line">unlock tables;</span><br></pre></td></tr></table></figure>
<p>配置从库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">slave从库配置</span><br><span class="line">my.cnf写入</span><br><span class="line">[mysqld]</span><br><span class="line">server-id=3 主要区分开</span><br><span class="line"></span><br><span class="line">重启数据库</span><br><span class="line">systemctl restart mariadb</span><br><span class="line"></span><br><span class="line">检查一下主库和从库的信息</span><br><span class="line">show variables like &#x27;server_id&#x27;;</span><br><span class="line">show variables like &#x27;log_bin&#x27;;</span><br><span class="line"></span><br><span class="line">通过一条命令，开启主从同步</span><br><span class="line">change master to master_host=&#x27;192.168.147.11&#x27;,</span><br><span class="line">master_user=&#x27;ggy&#x27;,</span><br><span class="line">master_password=&#x27;123&#x27;,</span><br><span class="line">master_log_file=&#x27;mysql-bin.000001&#x27;,</span><br><span class="line">master_log_pos=316;</span><br><span class="line"></span><br><span class="line">启动从库开关</span><br><span class="line">start slave;</span><br><span class="line"></span><br><span class="line">查看复制状态</span><br><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure>
<h2 id="redis"><a class="markdownIt-Anchor" href="#redis"></a> Redis</h2>
<p>redis 最多可以提供 10 万次/秒的读写</p>
<p>单线程数据</p>
<p>安装redis</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">源码安装</span><br><span class="line">wget http://download.redis.io/releases/redis-4.0.10.tar.gz</span><br><span class="line">解压</span><br><span class="line">tar -zxf redis-4.0.10.tar.gz</span><br><span class="line">进入redis 目录</span><br><span class="line">make &amp;&amp; make install 直接进行编译且安装</span><br><span class="line">可以指定配置文件启动redis</span><br><span class="line">在解压的文件中找redis.conf中设置如下图</span><br><span class="line">redis-server redis.conf</span><br><span class="line">指名文件启动</span><br><span class="line">下图中 no 改为 yes 后台运行</span><br><span class="line"></span><br><span class="line">yum install redis -y</span><br><span class="line">redis 的配置文件</span><br><span class="line">vim /etc/redis.conf</span><br><span class="line"></span><br><span class="line">启动服务</span><br><span class="line">systemctl start redis</span><br><span class="line"></span><br><span class="line">进入redis</span><br><span class="line">redis-cli</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">过滤出文件的空白行和注释行</span><br><span class="line">grep -v &quot;^#&quot;  redis.conf |   grep  -v &quot;^$&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>安全模式</p>
<p>设置远程访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">配置文件中</span><br><span class="line">bin 0.0.0.0 既可以本地访问，也可以远程访问</span><br><span class="line"></span><br><span class="line">更改redis的默认端口</span><br><span class="line">port 6380</span><br><span class="line"></span><br><span class="line">使用redis的密码进行登录</span><br><span class="line">requirepass 登录redis的密码</span><br><span class="line"></span><br><span class="line">指定配置文件启动</span><br><span class="line">redis-server redis.conf</span><br><span class="line"></span><br><span class="line">同新的端口和密码登录redis</span><br><span class="line">redis-cli -p 6380</span><br><span class="line"></span><br><span class="line">登录后</span><br><span class="line"> auth 密码</span><br><span class="line"> </span><br><span class="line">redis 还支持交互式的参数</span><br><span class="line">redis-cli -p 6380 -a 123</span><br></pre></td></tr></table></figure>
<p>redis持久化和发布订阅</p>
<p>发布订阅</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">发布者</span><br><span class="line">publish    频道    消息   给频道发消息</span><br><span class="line">订阅者</span><br><span class="line">SUBSCRIBE   频道     订阅频道</span><br><span class="line">PSUBSCRIBE  频道*    支持模糊匹配的订阅</span><br><span class="line">频道</span><br><span class="line">channel   频道名 自定义</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>RDB（持久化）</p>
<p>跟快照相似，服务器进程退出，数控就会丢失。将数据保存到磁盘中叫RDB，类似快照，手动执行，和定期执行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">创建配置文件</span><br><span class="line">在 redis-4.0.10 文件夹 中</span><br><span class="line">touch ss1-redis.conf</span><br><span class="line">vim ss1-redis.conf</span><br><span class="line"></span><br><span class="line">在 redis.conf 写入</span><br><span class="line">port 6379                          # 端口</span><br><span class="line">daemonize yes					 # 后台运行</span><br><span class="line">logfile /data/6379/redis.log	  # log日志</span><br><span class="line">dir /data/6379					# 数据存放文件路径</span><br><span class="line">dbfilename my.rdbc				# 生成的数据文件</span><br><span class="line"></span><br><span class="line">通过save触发持久化</span><br><span class="line">save  900   1                     # rdb 机制 每900秒  有 1 个修改记录</span><br><span class="line">save  300   10                    # 每 300 秒         10个修改记录</span><br><span class="line">save  60    10000                   # 每 60 秒内       10000 修改记录</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>AOF持久化</p>
<p>记录所有服务器执行的变更操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集</p>
<p>把命令追加到文件末尾，全部以 redis 协议的格式保存</p>
<p>优点： 最大程序保证数据不丢失</p>
<p>缺点： 日志记录非常大</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-client  写入数据  &gt;  redis-server  同步命令  &gt;  AOF文件</span><br><span class="line"></span><br><span class="line">在 redis.conf 写入</span><br><span class="line">port 6379                          # 端口</span><br><span class="line">daemonize yes					 # 后台运行</span><br><span class="line">logfile /data/6379/redis.log	  # log日志</span><br><span class="line">dir /data/6379					# 数据存放文件路径</span><br><span class="line">appendonly yes					</span><br><span class="line">appendfsync     everysec  每秒做一次持久化</span><br><span class="line">			   always    总时修改类的操作</span><br><span class="line">			   no        依赖于系统自带的缓存大小机制</span><br><span class="line">			   </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>RDB切换到AOF备份</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">准备rdb的redis服务吨</span><br><span class="line">redis-server  my-redis.conf  （注明着是rdb持久化）</span><br><span class="line"></span><br><span class="line">redis-cli  登录 redis，通过命令激活持久化</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">到RDB模式下，备份文件，防止意外</span></span><br><span class="line">redis 命令模式下输入：</span><br><span class="line">CONFIG  set appendonly yes   # 用命令激活持久化（临时生效，注意写入到配置文件）</span><br><span class="line">CONFIG SET save &quot;&quot;    # 关闭 rdb 持久化</span><br><span class="line"></span><br><span class="line">将 AOF 操作，写入到配置文件，永久生效，下次重启后生效</span><br><span class="line">appendonly yes					</span><br><span class="line">appendfsync     everysec  </span><br><span class="line">再通过 redis-server  my-redis.conf   启动AOF持久化</span><br><span class="line"></span><br><span class="line">3.测试aof数据持久化 ,杀掉redis，重新启动</span><br><span class="line">kill </span><br><span class="line">redis-server s15-redis.conf </span><br><span class="line"></span><br><span class="line">4.写入数据，检查aof文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>主从同步</p>
<p>一主两从</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">环境：</span><br><span class="line">准备两个或两个以上 redis 实列</span><br><span class="line"></span><br><span class="line">mkdir -p /data/&#123;6380,6381&#125;</span><br><span class="line">mkdir  /data/638&#123;0..2&#125;    # 创建6380，6381，6382文件夹</span><br><span class="line"></span><br><span class="line">配置文件实列：</span><br><span class="line">port 6379</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile /data/6379/redis.pid</span><br><span class="line">loglevel notice</span><br><span class="line">logfile &quot;/data/6379/redis.log&quot;</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir /data/6379</span><br><span class="line">protected-mode no</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sed &quot;s/6379/6380/g&quot; redis-6379.conf   # 前面被替换的内容，中间更换的内容，g全局</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个只能看替换结果</span></span><br><span class="line">sed &quot;s/6379/6380/g&quot; redis-6379.conf  &gt; redis-6380.conf</span><br><span class="line"></span><br><span class="line">FLUSHDB   #  清空数据</span><br><span class="line"></span><br><span class="line">pkill redis-server   # 清空所有的 redis-server，根据服务名杀死所有有关的服务</span><br><span class="line"></span><br><span class="line">docker run -d -p 9999:9999\</span><br><span class="line"> --link mymysql\</span><br><span class="line"> --name flarum1\</span><br><span class="line"> -e FORUM_URL=&#x27;http://0.0.0.0:9999&#x27;\</span><br><span class="line"> -e DB_PASS=&#x27;root@123456&#x27;\</span><br><span class="line"> -e FLARUM_ADMIN_USER=&#x27;admin&#x27;\</span><br><span class="line"> -e FLARUM_ADMIN_PASS=&#x27;root@123456&#x27;\</span><br><span class="line"> -e FLARUM_ADMIN_MAIL=&#x27;admin@zzzmh.cn&#x27;\</span><br><span class="line"> mondedie/docker-flarum:0.1.0-beta.10-stable</span><br><span class="line"></span><br><span class="line">配置主从复制</span><br><span class="line">在 redis-6380.conf 中以及  redis-6381.conf</span><br><span class="line">slaveof  127.0.0.1  6379  # 指名主库的身份地址 ip 和端口</span><br><span class="line">[root@linux redis-4.0.10]# echo  &quot;slaveof 127.0.0.1 6379&quot;  &gt;&gt; redis-6380.conf</span><br><span class="line">[root@linux redis-4.0.10]# echo  &quot;slaveof 127.0.0.1 6379&quot;  &gt;&gt; redis-6381.conf</span><br><span class="line">重启服务器一定要</span><br><span class="line"></span><br><span class="line">查看一下配置信息</span><br><span class="line">redis-cli -p 6379 info 数据库的信息</span><br><span class="line">redis-cli -p 6380 info Replication  查看 6380</span><br><span class="line">redis-cli -p 6381 info Replication  查看 6381主从信息</span><br></pre></td></tr></table></figure>
<p>实现 Redis 主从复制</p>
<p>redis 主从复制，故障手动切换</p>
<ol>
<li>
<p>杀死 6379 的实列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill 主库</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>手动切换主从身份</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">登录redis-6380，通过命令，去掉自己的主库身份，等待连接</span><br><span class="line">	slaveof no one</span><br><span class="line">登录 redis-6381 ，通过命令，生成新的主任</span><br><span class="line">	slaveof  127.0.0.1 6380</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>redis 哨兵</p>
<p>保护redis主从集群，正常运转，当主库挂掉之后，自动的在主库中挑选新的主库，进行同步</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">安装配置</span><br><span class="line">准备三个redis 配置实列</span><br><span class="line">如上述一样</span><br><span class="line"></span><br><span class="line">准备三个哨兵的配置文件</span><br><span class="line">touch redis-sentinel-26379.conf</span><br><span class="line">touch redis-sentinel-26380.conf</span><br><span class="line">touch redis-sentinel-26381.conf</span><br><span class="line"></span><br><span class="line">写入配置文件</span><br><span class="line">port 26379  </span><br><span class="line">dir /var/redis/data/</span><br><span class="line">logfile &quot;26379.log&quot;</span><br><span class="line"></span><br><span class="line">sentinel monitor s15master 127.0.0.1 6379 2</span><br><span class="line"></span><br><span class="line">sentinel down-after-milliseconds s15master 30000</span><br><span class="line"></span><br><span class="line">sentinel parallel-syncs s15master 1</span><br><span class="line"></span><br><span class="line">sentinel failover-timeout s15master 180000</span><br><span class="line"></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line">三个哨兵都那口不一样，所以可以使用上面的快速生成</span><br><span class="line"></span><br><span class="line">[root@linux redis-4.0.10]# sed -i &quot;s/26379/26381/g&quot;  redis-sentinel-26381.conf</span><br><span class="line"></span><br><span class="line">如果更改文件 master名</span><br><span class="line">[root@linux redis-4.0.10]# sed -i &quot;s/s15master/ggymaster/&quot; redis-sentinel-26381.conf</span><br><span class="line">加上 -i 是插入到文件中</span><br><span class="line"></span><br><span class="line">创建文件</span><br><span class="line">mkdir -p  /var/redis/data</span><br><span class="line"></span><br><span class="line">启动哨兵</span><br><span class="line">[root@linux redis-4.0.10]# redis-sentinel redis-sentinel-26379.conf</span><br><span class="line">[root@linux redis-4.0.10]# redis-sentinel redis-sentinel-26380.conf</span><br><span class="line">[root@linux redis-4.0.10]# redis-sentinel redis-sentinel-26381.conf</span><br><span class="line">哨兵将自己发现的主从信息写入到文件中</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查看哨兵信息是否正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@linux redis-4.0.10]# redis-cli -p 26379 info sentinel</span><br><span class="line">或者输入 info截至，查看最后一条</span><br></pre></td></tr></table></figure>
<p>测试哨兵的作用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -9 主的端口</span><br><span class="line">查看剩余的配置信息</span><br></pre></td></tr></table></figure>
<h5 id="哨兵集群redis0-cluster集群方案官方"><a class="markdownIt-Anchor" href="#哨兵集群redis0-cluster集群方案官方"></a> 哨兵集群（redis0-cluster集群方案，官方）</h5>
<p>并发的问题</p>
<p>可以达到10万次秒</p>
<p>那100 万怎么办</p>
<p>分布式</p>
<p>redis-cluster安装配置</p>
<p>准备6个redis 数据库实列，准备6个配置文件redis-{7000….7005}</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch redis-7000.conf &#123;7000....7005&#125;</span><br><span class="line"></span><br><span class="line">配置文件详情</span><br><span class="line">port 7000</span><br><span class="line">daemonize yes</span><br><span class="line">dir &quot;/opt/redis/data&quot;</span><br><span class="line">logfile  &quot;7000.log&quot;</span><br><span class="line">dbfilename &quot;dump-7000.rdb&quot;</span><br><span class="line">cluster-enabled yes  # 开启集群模式</span><br><span class="line">cluster-config-file  nodes-7000.conf  # 集群内部的配置文件</span><br><span class="line">每个集群的 端口不同</span><br><span class="line"></span><br><span class="line">启动6个配置文件</span><br><span class="line">redis-server redis-7000.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>配置 ruby 语言环境，脚本一键启动 redis-cluster</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">下载源码</span><br><span class="line"> wget https://cache.ruby-lang.org/pub/ruby/2.3/ruby-2.3.1.tar.gz</span><br><span class="line"> </span><br><span class="line"> 安装ruby</span><br><span class="line"> tar -xvf ruby-2.3.1.tar.gz</span><br><span class="line"> ./configure --prefix=/opt/ruby/  告诉安装路径，还要执行下一步</span><br><span class="line"> make &amp;&amp; make install</span><br><span class="line"> </span><br><span class="line"> 安装下载操作 redis 的模块包</span><br><span class="line"> wget http://rubygems.org/downloads/redis-3.3.0.gem</span><br><span class="line"> </span><br><span class="line"> 通过 ruby 的包管理工具 安装redis包</span><br><span class="line"> 可以不用配置</span><br><span class="line">[root@linux opt]# /opt/ruby/bin/gem install -l redis-3.3.0.gem</span><br><span class="line">会生成redis-trib.rb 这个命令</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> 准备一个ruby命令</span><br><span class="line"> 准备一个gem软件包管理命令</span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">拷贝 ruby 命令到 path下 /usr/local/ruby 配置环境变量</span></span><br><span class="line"> cp /opt/ruby/bin/ruby     /usr/local       #  这些命令中间有空格</span><br><span class="line"> cp bin/gem                /usr/local/bin</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</span><br><span class="line">https://gems.ruby-china.org/ added to sources</span><br><span class="line">https://rubygems.org/ removed from sources</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">配置环境变量</span><br><span class="line">vim /etc/profile</span><br><span class="line">写入最低行</span><br><span class="line">PATH=$PATH:/opt/ruby/bin/</span><br><span class="line">读取文件</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">一键创建集群</span><br><span class="line">/opt/redis-4.0.10/src/redis-trib.rb</span><br><span class="line">redis-trib.rb   create --replicas 1 127.0.0.1:7000  127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自动分配主从关系  注意有个 1</span></span><br><span class="line">分配主从关系， 以及 槽位分配 slot 槽位</span><br><span class="line"></span><br><span class="line">检查节点的主从状态</span><br><span class="line">redis-cli -p 7001 info replication</span><br><span class="line"></span><br><span class="line">向redis写入数据  查看数据流向</span><br><span class="line">redis-cli -p 7000 -c  集群模式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果没有出现重定向，就是没有进入集群，进入后直接清空keys，再创建</p>
<p>codis（集群方案）</p>
<p>redis哨兵博客地址：<br />
<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcHl5dS9wLzk3MTg2NzkuaHRtbA==">https://www.cnblogs.com/pyyu/p/9718679.html<i class="fa fa-external-link-alt"></i></span><br />
redis-cluster博客<br />
<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcHl5dS9wLzk4NDQwOTMuaHRtbA==">https://www.cnblogs.com/pyyu/p/9844093.html<i class="fa fa-external-link-alt"></i></span><br />
docker博客：<br />
<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcHl5dS9wLzk0ODUyNjguaHRtbA==">https://www.cnblogs.com/pyyu/p/9485268.html<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="nginx"><a class="markdownIt-Anchor" href="#nginx"></a> Nginx</h2>
<p>web 服务器软件</p>
<p>win<br />
IIS</p>
<p>linux<br />
nginx<br />
apache   收费<br />
lighthttp</p>
<p>公司技术栈</p>
<p>收费版</p>
<p>apache web服务器 + java +tomact 应用服务器 + oracle + memcached + redhat 企业办linux + svn（代码管理工具）</p>
<p>开源的技术栈</p>
<p>nginx + python  + uwsgi  （python的应用服务器，启动了10个进程处理django drf 请求） + mysql（rds）+ vue</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -I pythonav.cn 对此域名发送请求只显示响应头</span><br><span class="line">响应结果</span><br><span class="line">HTTP/1.1 301 Moved Permanently</span><br><span class="line">Server: nginx/1.12.2</span><br><span class="line">Date: Sun, 25 Aug 2019 07:32:25 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 185</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Location: https://pythonav.cn/</span><br><span class="line">这个可以修改</span><br></pre></td></tr></table></figure>
<p>web服务器：接受HTTP请求并返回数据</p>
<p>web框架：开发web应用，处理接收到的数据</p>
<p>Nginx 开源支持高并发，高性能的www服务和代理服务软件</p>
<p>面试：</p>
<p>支持高并发，能支持几万并发连接</p>
<p>资源消耗少，3万并发连接开启10个nginx线程消耗的内存不到200M</p>
<p>可以做http反向代理和负载均衡</p>
<p>支持异步网络 I/O 事件模型 epoll</p>
<p>开始nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">解决编译 nginx 所需的依赖包，不会报错</span><br><span class="line">yum install gcc patch libffi-devel python-devel  zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel openssl openssl-devel -y</span><br><span class="line"></span><br><span class="line">到 /opt 目录下，下载源码包</span><br><span class="line">wget -c https://nginx.org/download/nginx-1.12.0.tar.gz</span><br><span class="line"></span><br><span class="line">定义指定安装目录nginx112/</span><br><span class="line">./configure --prefix=/opt/nginx112/</span><br><span class="line"></span><br><span class="line">安装</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">查看nginx 的工作目录</span><br><span class="line">[root@linux nginx112]# ls</span><br><span class="line">conf     配置文件目录 主要 nginx.conf</span><br><span class="line">html  	网页根目录，通过域名访问 如 index.html\erro.html</span><br><span class="line">logs    日志  如error.log、access.log</span><br><span class="line">sbin    存放nginx课执行命令 sbin/nginx</span><br><span class="line"></span><br><span class="line">开启前查看防火墙是否开启</span><br><span class="line">getenforce</span><br><span class="line"></span><br><span class="line">cat /proc/cpuinfo 查看cpu 信息</span><br><span class="line">top 按1可以看到</span><br></pre></td></tr></table></figure>
<p>nginx主配置文件学习</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">worker_processes  1; nginx 工作进程数，根据cpu核数定义</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024; # 事件连接数</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http区域块，定义nginx的核心web功能</span></span><br><span class="line">http &#123;</span><br><span class="line">    include （关键字）      mime.types（可修改的值）;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #定义日志格式</span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line">    # 开启访问日志功能的参数</span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    # 保持长连接</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    # 支持图片 gif等等压缩。减少网络宽带</span><br><span class="line">    #gzip  on;</span><br><span class="line">    # 这个server标签，控制着nginx的虚拟主机</span><br><span class="line">    server &#123;</span><br><span class="line">    	# 定义端口访问</span><br><span class="line">        listen       80;</span><br><span class="line">        # 域名</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        # 定义编码</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        # 跟上类似</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        # 定义网页的默认访问url</span><br><span class="line">        location / &#123;</span><br><span class="line">        	# 加一个参数可以拒绝当前用户访问</span><br><span class="line">        	deny 192.168.147.1;</span><br><span class="line">            # root 参数定义网页根目录</span><br><span class="line">            root   html;</span><br><span class="line">            # 定义默认访问的网页首页文件</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        # 定义404 错误页面，也可以服务器的错误</span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line">        </span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>无法访问nginx 时修改如下配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">直接编辑/etc/sysconfig/iptables文件</span><br><span class="line">               1.编辑/etc/sysconfig/iptables文件：vi /etc/sysconfig/iptables</span><br><span class="line">                   加入内容并保存：-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT</span><br><span class="line">               2.重启服务：/etc/init.d/iptables restart</span><br><span class="line">               3.查看端口是否开放：/sbin/iptables -L -n</span><br></pre></td></tr></table></figure>
<p>nginx 虚拟主机，多个服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">创建多个server标签</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">server &#123;</span></span><br><span class="line"></span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@linux conf]# vim nginx.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改文件</span></span><br><span class="line">[root@linux conf]# nginx -t</span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进行语法测试</span></span><br></pre></td></tr></table></figure>
<p>如果需要测试本机访问域名解析，再本机 hosts文件修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.147.1  www.ssss.com</span><br></pre></td></tr></table></figure>
<p>nginx 的访问日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">将上面的日志注释去掉</span><br><span class="line">杀死当前进程</span><br><span class="line">重新启动服务</span><br><span class="line"></span><br><span class="line">cd /opt/nginx112/logs/</span><br><span class="line">查看日志文件所在位置</span><br><span class="line">tail -f access.log</span><br><span class="line">查看日志更新，实时监控，可以知道访问来源</span><br><span class="line"></span><br><span class="line">拒绝用户访问，可以看上面</span><br><span class="line">  location / &#123;</span><br><span class="line">        	# 加一个参数可以拒绝当前用户访问</span><br><span class="line">        	deny 192.168.147.1;</span><br><span class="line">        	# 这个换支持拒绝一整个网站， 点零，加上子网掩码地址</span><br><span class="line">            # root 参数定义网页根目录</span><br><span class="line">            root   html;</span><br><span class="line">            # 定义默认访问的网页首页文件</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">ab 网络压力测试工具</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>nginx反向代理</p>
<p>正向代理，一堆用户通过代理访问一个服务器</p>
<p>反向代理，一堆用户通过代理访问多个服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">准备2 个服务器，2个nginx</span><br><span class="line">192.168.147.11  web服务</span><br><span class="line">192.168.147.12  反向代理</span><br><span class="line"></span><br><span class="line">需要在反向代理添加配置</span><br><span class="line">proxy_pass 192.168.13.79;</span><br></pre></td></tr></table></figure>
<p>集群就是一堆服务器做一件事，一个节点就是一个服务器</p>
<p>为什么要有集群，因为大型的必须多个完成，单独完成不了。</p>
<p>价格有效性</p>
<p>可伸缩性</p>
<p>高可用性</p>
<p>透明性</p>
<h5 id="负载均衡"><a class="markdownIt-Anchor" href="#负载均衡"></a> 负载均衡</h5>
<p>分担压力，分别可以向多个服务器发起请求</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">准备三台计算机</span><br><span class="line">nginx1 作为nginx，负载均衡器</span><br><span class="line">nginx2  web服务，提供一个页面</span><br><span class="line">nginx3  web服务，提供一个页面</span><br><span class="line"></span><br><span class="line">配置两台nginx的服务器内容</span><br><span class="line">负载均衡器设置，在配置文件 nginx.conf中</span><br><span class="line">upstream mywebserver &#123;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ip_hash;</span></span><br><span class="line">	server 192.168.147.13:80  # weight=1;</span><br><span class="line">	server 192.168.147.14:80;</span><br><span class="line">&#125;</span><br><span class="line">mywebserver 是负载均衡池的名字</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>nginx负载均衡调度算法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">调度算法               概述</span><br><span class="line">轮询                   按照时间顺序追忆分配到不同的后端服务器（默认）</span><br><span class="line">weight                 加权轮询， weight值越大，分配到的访问几率越高</span><br><span class="line">ip_hash                每个请求按访问IP的hash结果分配，这样来自同一IP的固定访问一个后端服务器</span><br><span class="line">url_hash               安装访问URL的hash结果来分配请求，是每个URL定向到同一个后端服务器</span><br><span class="line">least_conn             最少链接数，那个机器链接数少就分发</span><br><span class="line"></span><br><span class="line">1. 轮询   默认</span><br><span class="line">2. weight  权重优先级</span><br><span class="line">3. ip_hash 根据客户端ip哈希分配，不能和weight一起使用</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="项目发布"><a class="markdownIt-Anchor" href="#项目发布"></a> 项目发布</h3>
<p>python</p>
<p>uwsgi        wsgi  （web服务网关接口，就是一个实现了python  web的协议）</p>
<p>wsgi  是基于python web服务的</p>
<p>wsgiref</p>
<p>​		python自带的web服务器</p>
<p>Guunicorn</p>
<p>​	linux 的python wsgi http服务器，常用于django ，flask结合部署</p>
<p>mode_wsgi</p>
<p>​	实现了apache 于wsgi应用程序的结合</p>
<p>uwsgi</p>
<p>​	c语言开发，快速，自我修复，开发人员友好的wsgi服务器，常用于python web部署</p>
<p>virtualenvwrapper</p>
<p>路飞的代码</p>
<p>vue 的代码</p>
<p>nginx   （一个是nginx对静态文件处理的优秀性能，一个是nginx的反向代理功能，以及nginx默认80都端口，访问80端口能反向代理到应用的8000端口）</p>
<p>mysql</p>
<p>redis</p>
<p>supervisor    进程管理工具</p>
<p>部署环境准备python3</p>
<p>wget</p>
<h5 id="docker容器"><a class="markdownIt-Anchor" href="#docker容器"></a> Docker容器</h5>
<p>是对linux容器的一种封装，提供简单易用的容易使用接口。</p>
<p>将应用程序与程序的依赖打包，打包在一个文件里面，运行这个文件就会生成一个虚拟容器</p>
<p>容器与环境不一样。</p>
<p>应用场景，web应用的自动化打包，自动化测和持续集成、发布，在服务型环境中部署和调整数据库或其他应用</p>
<p>opnstack 云虚拟化技术</p>
<p>docker 启动秒级，使用一般为mb，性能接近原生，单机支持上千个容器</p>
<p>容器三大概念</p>
<p>镜像  image</p>
<p>容器  container</p>
<p>仓库  repository</p>
<p>docker生命周期三个概念</p>
<h4 id="安装docker"><a class="markdownIt-Anchor" href="#安装docker"></a> 安装Docker</h4>
<p>编译安装</p>
<p>yum安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install docker 官方源或者epel源</span><br><span class="line">yum install docker* docker</span><br></pre></td></tr></table></figure>
<p>rpm 安装</p>
<p>先卸载旧版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">				docker-client \</span><br><span class="line">				docker-client-latest \</span><br><span class="line">				docker-common \</span><br><span class="line">				docker-latest-logrotate \</span><br><span class="line">				docker-logrotate \</span><br><span class="line">				docker-selinux \</span><br><span class="line">				docker-engine-selinux \</span><br><span class="line">				docker-engine </span><br><span class="line"></span><br><span class="line">设置存储库</span><br><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">		device-mapper-persistent-data \</span><br><span class="line">		lvm2</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">	--add-repo \</span><br><span class="line">	https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">安装 docker 社区版</span><br><span class="line">sudo yum install docker-ce</span><br><span class="line">ee 企业版</span><br><span class="line"></span><br><span class="line">启动关闭docker</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl status docker</span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>docker 加速</p>
<p>网址<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGFvY2xvdWQuaW8vbWlycm9y">https://www.daocloud.io/mirror<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit # 退出当前容器</span><br></pre></td></tr></table></figure>
<p>基本命令：</p>
<p>增</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run centos</span><br><span class="line">docker run -it centos</span><br><span class="line">docker run -d centos /bin/sh -c &quot;while true;do echo hello centos; sleep 1;done&quot;</span><br><span class="line">-d # 参数是 后台运行</span><br><span class="line">/bin/sh 调用shell解释器</span><br><span class="line">-c 指名一段shell语法</span><br><span class="line">docker run -it --rm ubuntu  # 运行一个乌班图容器，并且退出时，删除记录</span><br><span class="line"></span><br><span class="line">docker pull centos  # 下周centos镜像</span><br></pre></td></tr></table></figure>
<p>删</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器id  # 删除这条容器记录</span><br><span class="line">docker rmi 镜像id  # 删除一个镜像记录</span><br><span class="line">docker rm `docker ps -aq`  # 反引号取命令的运行结果</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一次性删除所有容器<span class="built_in">id</span>记录</span></span><br><span class="line">docker rmi `docker images -aq`  # 一次性删除所有镜像记录</span><br></pre></td></tr></table></figure>
<p>改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit  # 提供容器记录，为新的镜像</span><br><span class="line">docker stop 容器id   # 停止当前容器</span><br><span class="line">docker start 容器id  # 启动已停止的容器</span><br><span class="line"></span><br><span class="line">docker save centos &gt; /opt/centos.tar.gz  # 到处 docker 镜像至本地</span><br><span class="line"></span><br><span class="line">docker load  &lt; /opt/centos.tar.gz  # 导入镜像</span><br><span class="line"></span><br><span class="line">docker run --name s14heh -d centos /bin/sh -c &quot;while true;do echo hello s14 docker ~~~; sleep 1; done&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 --name 参数给容器记录，加上别名</span></span><br><span class="line"></span><br><span class="line">docker exec -it 容器id  /bin/bash # 进入正在运行的容器</span><br><span class="line">-it  # 交互式的操作终端</span><br><span class="line">/bin/bash # 使用 shell 解释器，只有 redhat，centos才能用 /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按需要定制自己的镜像文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.先进入容器，然后安装 vim</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.提交新的镜像文件</span></span><br><span class="line">docker commit 容器id  /opt/centos-vim</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 查看新的镜像记录</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4.通过新的镜像运行这个容器，</span></span><br><span class="line">docker run -it /opt/centos-vim  /bin/bash</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>查</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image ls # 查看镜像记录</span><br><span class="line">docker images # 查看镜像记录</span><br><span class="line"></span><br><span class="line">docker ps  # 查看容器记录，只能查看到正在后台运行的容器</span><br><span class="line"></span><br><span class="line">docker ps -a # 查看容器记录，包括已运行过的</span><br><span class="line">docker ps -aq</span><br><span class="line">q # 显示容器id</span><br><span class="line"></span><br><span class="line">dcoker logs -f 容器id # 查看容器日志</span><br><span class="line"></span><br><span class="line">docker container ls -a # 等同于docker ps -a</span><br><span class="line"></span><br><span class="line">docker search 镜像名  # docker 仓库，dockerhub</span><br><span class="line">dcoker version # 查看版本</span><br></pre></td></tr></table></figure>
<p>其他</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.下载镜像</span></span><br><span class="line">docker pull traning/webapp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.dockerrun -d -P 6fa python app.py</span></span><br><span class="line">-d # 后台运行</span><br><span class="line">-P # 将容器内的5000端口随机映射到宿主机的一个端口</span><br><span class="line"></span><br><span class="line">docker port 容器id  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前容器的访问端口（外部访问到容器内的端口）</span></span><br><span class="line"></span><br><span class="line">docker run -d centos -P</span><br><span class="line">-d # 后台运行</span><br><span class="line">-P # 随机端口映射</span><br><span class="line">-p # 9000（宿主机）:5000（容器内）</span><br><span class="line">--name # 给创建的容器记录</span><br></pre></td></tr></table></figure>
<p>利用docker 自己定制镜像。</p>
<p>脚本示例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">脚本的概念就是，将你想做的事，写入到一个文件中，然后执行这个文件，就是执行一个脚本</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">假如我想定制一个自己的 docker镜像</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">首先得有一个基础操作系统镜像</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">FROM centos  <span class="comment">#基于这个centos的镜像，然后定制我自己的镜像</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">底下通过docker提供的指令，添加，自定制自己的规则，然后创建自己的镜像文件</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">FROM centos  <span class="comment">#基于这个centos的镜像，然后定制我自己的镜像</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">RUN yum install vim -y</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">RUN yum install nginx -y</span>  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">仅仅只有这3句的dockerfile，就能定制一个拥有nginx和vim的centos镜像文件</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">此时我构建出的这个centos-vim-nginx镜像文件，就可以传给14期的所有同学用</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">咱们14期的同学，就可以 docker load 或者docker pull 这个镜像，docker run centos-vim-nginx</span></span><br><span class="line"></span><br><span class="line">docker run -d -p 8888:8888\</span><br><span class="line"> --link mysql\</span><br><span class="line"> --name flarum\</span><br><span class="line"> -e FORUM_URL=&#x27;http://localhost:8888&#x27;\</span><br><span class="line"> -e DB_PASS=&#x27;root@1234&#x27;\</span><br><span class="line"> -e FLARUM_ADMIN_USER=&#x27;admin&#x27;\</span><br><span class="line"> -e FLARUM_ADMIN_PASS=&#x27;root@1234&#x27;\</span><br><span class="line"> -e FLARUM_ADMIN_MAIL=&#x27;admin@zzzmh.cn&#x27;\</span><br><span class="line"> mondedie/docker-flarum:0.1.0-beta.10-stable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FROM scratch #制作base image 基础镜像，尽量使用官方的image作为base image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FROM centos #使用base image</span><br><span class="line"></span><br><span class="line">FROM ubuntu:14.04 #带有tag的base image</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">相当于代码注释，告诉别人，你的镜像文件的信息是什么</span></span><br><span class="line">LABEL version=“1.0” #容器元信息，帮助信息，Metadata，类似于代码注释</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义一个dockerfile的作者信息</span></span><br><span class="line">LABEL maintainer=&quot;wupeiqidsb&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开始定制自己的镜像需求</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">对于复杂的RUN命令，避免无用的分层，多条命令用反斜线换行，合成一条命令！</span></span><br><span class="line">RUN yum update &amp;&amp; yum install -y vim \</span><br><span class="line">    Python-dev #反斜线换行</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">RUN指令，相当于在centos中执行了一堆命令</span></span><br><span class="line">RUN hostnamectl set-hostname mydocker</span><br><span class="line">RUN yum install redis -y </span><br><span class="line"><span class="meta prompt_">	</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">写上3条就会执行者3条</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WORKDIR /root 					#相当于linux的cd命令，改变目录，尽量使用绝对路径！！！不要用RUN cd</span><br><span class="line">WORKDIR /test						 #如果没有就自动创建</span><br><span class="line">WORKDIR demo						 #再进入demo文件夹</span><br><span class="line">WORKDIR s14</span><br><span class="line">WORKDIR /opt </span><br><span class="line"></span><br><span class="line">RUN pwd      /opt </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ADD和COPY</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">宿主机linux有自己的磁盘，文件夹</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">容器空间 也有自己的文件夹</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">我们使用docker一定是想将宿主机的文件，添加到容器中</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ADD就是添加宿主机的文件，到容器当中</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ADD还有一个解压缩的功能</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/opt</span> </span><br><span class="line">ADD and COPY </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">把宿主机的hello文件，放入到容器的 / 根目录下</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个hello文件的相对路径，是以Dockerfile文件所在目录为相对路径</span></span><br><span class="line"></span><br><span class="line">ADD hello /  #把本地文件添加到镜像中，吧本地的hello可执行文件拷贝到镜像的/目录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">把与dockerfile同级的一个test.tar.gz压缩文件，拷贝添加到容器的 根 / 目录中，并且解压缩</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> 远程传输 并且  tar -zxvf</span>  </span><br><span class="line">ADD test.tar.gz /  #添加到根目录并解压  </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">WORKDIR /root  #切换工作目录到 /root </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">把dockerfile同级的那个hello文件 拷贝到容器的/root/test/hello</span> </span><br><span class="line"></span><br><span class="line">ADD hello test/ #进入/root/ 添加hello可执行命令到test目录下，也就是/root/test/hello 一个绝对路径</span><br><span class="line"></span><br><span class="line">COPY hello test/  #等同于上述ADD效果</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ADD与COPY</span><br><span class="line">    -ADD除了COPY功能还有解压功能</span><br><span class="line">	</span><br><span class="line">添加远程文件/目录使用curl或wget</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ENV #环境变量，尽可能使用ENV增加可维护性</span><br><span class="line">ENV MYSQL_VERSION 5.6 #设置一个mysql常量</span><br><span class="line">RUN yum install -y mysql-server=“$&#123;MYSQL_VERSION&#125;” </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RUN ./cofigure  --prefix=/opt/</span><br><span class="line">RUN  make&amp;&amp; make install </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>dockerfile实验</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.准备一个flask代码，准备python代码</span></span><br><span class="line">	from flask import Flask</span><br><span class="line">	app=Flask(__name__)</span><br><span class="line">	@app.route(&#x27;/&#x27;)</span><br><span class="line">	def hello():</span><br><span class="line">		return &quot;hello docker,i am  sbwueiqi, i am in s14 &quot;</span><br><span class="line">	if __name__==&quot;__main__&quot;:</span><br><span class="line">		app.run(host=&#x27;0.0.0.0&#x27;,port=8080)</span><br><span class="line"><span class="meta prompt_">		</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.准备Dockerfile，准备好所有需要的文件</span></span><br><span class="line">[root@node1 /data/mydocker 10:33:53]#ls</span><br><span class="line">CentOS-Base.repo  Dockerfile  epel.repo  myflask.p</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">cat Dockerfile</span><br><span class="line">	<span class="keyword">FROM</span> centos        </span><br><span class="line">	<span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;Chao Yu&lt;yc_uuu@163.com&gt;&quot;</span></span></span><br><span class="line">	<span class="keyword">ADD</span><span class="language-bash"> CentOS-Base.repo /etc/yum.repos.d/</span></span><br><span class="line">	<span class="keyword">ADD</span><span class="language-bash"> epel.repo /etc/yum.repos.d/</span></span><br><span class="line">	<span class="keyword">RUN</span><span class="language-bash"> yum clean all</span></span><br><span class="line">	<span class="keyword">RUN</span><span class="language-bash"> yum install python-pip -y</span></span><br><span class="line">	<span class="keyword">RUN</span><span class="language-bash"> pip install -i https://pypi.tuna.tsinghua.edu.cn/simple flask</span></span><br><span class="line">	<span class="keyword">COPY</span><span class="language-bash"> myflask.py /app/</span></span><br><span class="line">	<span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line">	<span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line">	<span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>,<span class="string">&quot;myflask.py&quot;</span>]</span></span><br><span class="line">	<span class="number">1</span>.引入一个centos镜像，为基础镜像</span><br><span class="line">	<span class="number">2</span>.作者注释信息</span><br><span class="line">	<span class="number">3</span>.添加本地的两个yum文件，到容器的/etc/yum.repos.d/底下</span><br><span class="line">	<span class="number">4</span>.清空yum缓存</span><br><span class="line">	<span class="number">5</span>.yum安装pip工具</span><br><span class="line">	<span class="number">6</span>.pip安装flask模块，指定清华源</span><br><span class="line">	<span class="number">7</span>.拷贝本地的flask代码，到容器的/app/目录下</span><br><span class="line">	<span class="number">8</span>.切换工作目录，到/app底下</span><br><span class="line">	<span class="number">9</span>.暴露容器的<span class="number">8080</span>端口，然后在运行镜像时候，加上-p参数，指定端口映射</span><br><span class="line">	<span class="number">10</span>.执行命令，运行flask</span><br></pre></td></tr></table></figure>
<h4 id="构建私有仓库"><a class="markdownIt-Anchor" href="#构建私有仓库"></a> 构建私有仓库</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.下载docker官方提供的私有仓库镜像</span><br><span class="line">	docker pull  registry</span><br><span class="line">	2.查看镜像</span><br><span class="line">	docker images </span><br><span class="line">	3.启动一个私有仓库容器</span><br><span class="line">		docker run -d \</span><br><span class="line">			-p 5000:5000 \</span><br><span class="line">			-v /opt/data/registry:/var/lib/registry \</span><br><span class="line">			registry</span><br><span class="line">	4.此时可以检查容器进程</span><br><span class="line">	docker ps </span><br><span class="line">	5.此时私有仓库就打开了5000端口，通过端口映射，访问宿主机的5000端口，查看是否通信</span><br><span class="line">	yum install telnet -y </span><br><span class="line">	</span><br><span class="line">	telnet 127.0.0.1 5000   #检测5000端口是否通信</span><br><span class="line">	</span><br><span class="line">	6.修改本地镜像的tag标签，标注我要往哪push镜像</span><br><span class="line">	docker tag docker.io/hello-world  192.168.12.96:5000/s14-hello</span><br><span class="line">	</span><br><span class="line">	7.修改docker配置，允许非安全的传输方式</span><br><span class="line">	</span><br><span class="line">		1.vim /etc/docker/daemon.json，写入信息，私有仓库地址，都得改成自己的</span><br><span class="line">			&#123;&quot;registry-mirrors&quot;: [&quot;http://95822026.m.daocloud.io&quot;],</span><br><span class="line">			&quot;insecure-registries&quot;:[&quot;192.168.12.96:5000&quot;]</span><br><span class="line">			&#125;</span><br><span class="line">		2.修改docker.server </span><br><span class="line">			vim /lib/systemd/system/docker.service</span><br><span class="line"><span class="meta prompt_">			#</span><span class="language-bash">写入如下信息，请在[service]中写入</span>		</span><br><span class="line">			[Service]</span><br><span class="line">			EnvironmentFile=/etc/docker/daemon.json</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>IT技术</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 简单入门</title>
    <url>/2019/10/17/Mysql/</url>
    <content><![CDATA[<h1 id="mysql"><a class="markdownIt-Anchor" href="#mysql"></a> MySql</h1>
<h2 id="第一章mysql-入门"><a class="markdownIt-Anchor" href="#第一章mysql-入门"></a> 第一章mysql 入门</h2>
<p>MySQL是基于 c/s 架构的软件</p>
<h4 id="添加环境变量到path"><a class="markdownIt-Anchor" href="#添加环境变量到path"></a> 添加环境变量到path</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cmd 初始化</span><br><span class="line">mysqld --initialize-insecure</span><br><span class="line">net start mysql  # 开启服务端</span><br><span class="line">net stop mysql	# 移除服务端</span><br><span class="line">mysql --install	# 安装服务  压缩包安装</span><br><span class="line">mysql --remove	# 移除服务</span><br></pre></td></tr></table></figure>
<h4 id="进程"><a class="markdownIt-Anchor" href="#进程"></a> 进程</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tasklist |findstr msyql  # 查进程</span><br><span class="line">taskkill /F /PID 进程号	#杀进程</span><br></pre></td></tr></table></figure>
<h4 id="忘记密码"><a class="markdownIt-Anchor" href="#忘记密码"></a> 忘记密码</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.先关闭服务</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.跳过授权表开启服务</span></span><br><span class="line">mysqld --skip-grant-tables   # 开启服务端的约束条件</span><br><span class="line">mysql -uroot -p   #客户端连接</span><br><span class="line">update mysql.user set authentication_string =password(&#x27;&#x27;) where User =&#x27;root&#x27;;  #更改密码</span><br><span class="line">flush privileges;  # 刷新权限</span><br></pre></td></tr></table></figure>
<p>win10 中跳过授权表可以放在文件中更改 MySQL 中 my.ini 文件，无创建</p>
<h4 id="统一字符编码"><a class="markdownIt-Anchor" href="#统一字符编码"></a> 统一字符编码</h4>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 设置 MySQL 的安装目录 **后面的路径一定是安装 sql 的目录（自己的）</span></span><br><span class="line"><span class="attr">basedir</span>=C:\Program Files\MySQL\MySQL Server <span class="number">5.7</span></span><br><span class="line"><span class="comment"># 设置 MySQL 数据库的数据的存放目录，必是data</span></span><br><span class="line"><span class="attr">datadir</span>=C:\Program Files\MySQL\MySQL Server <span class="number">5.7</span>\data</span><br><span class="line"><span class="attr">sql_mode</span>=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"><span class="comment"># 忘记密码添加  skip-grant-tables 改完就删了</span></span><br><span class="line"><span class="comment"># mysql端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="comment"># 字符集</span></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="attr">collation-server</span>=utf8_general_ci</span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure>
<p>修改字符集也可以使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看所有字符集格式</span><br><span class="line">SHOW VARIABLES LIKE &#x27;char%&#x27;;</span><br><span class="line"># 修改某个为utf8</span><br><span class="line">SET character_set_client = utf8 ;</span><br></pre></td></tr></table></figure>
<h4 id="进入-mysql"><a class="markdownIt-Anchor" href="#进入-mysql"></a> 进入 MySQL</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">\s; # 查看 MySQL 软件配置</span><br><span class="line">show databases; # 查看所有的数据库</span><br></pre></td></tr></table></figure>
<h5 id="创建-mysql-用户"><a class="markdownIt-Anchor" href="#创建-mysql-用户"></a> 创建 MySQL 用户</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql</span><br><span class="line"># 查看所有用户信息</span><br><span class="line">select * from user</span><br><span class="line"># 进入MySQL数据库下</span><br><span class="line">create user &#x27;mjj@&#x27;192.168.1.1&#x27; identified by &#x27;123&#x27;&#x27;;</span><br><span class="line"># 创建之后要进行刷新</span><br><span class="line">flush privileges;</span><br><span class="line"># 删除用户</span><br><span class="line">drop user &#x27;ggy&#x27;@&#x27;localhost&#x27;;</span><br><span class="line"># 修改用户</span><br><span class="line">rename user &#x27;ggy&#x27;@&#x27;localhoet&#x27; to &#x27;ggy&#x27;@&#x27;localhost&#x27;;</span><br><span class="line"># 修改密码</span><br><span class="line">set password for &#x27;ggy&#x27;@&#x27;localhost&#x27;=Password(&#x27;123&#x27;);</span><br></pre></td></tr></table></figure>
<p>可以修改为 192.168.1.% 表示本网用户</p>
<h5 id="授权"><a class="markdownIt-Anchor" href="#授权"></a> 授权</h5>
<p>@后面加的主机地址，需要设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看权限</span><br><span class="line">show grants for &#x27;用户&#x27;@&#x27;IP地址&#x27;;</span><br><span class="line"># 授权 mjj 用户对。。文件操作</span><br><span class="line">grant select ,insert,update on db1.t1 to &quot;mjj&quot;@&#x27;%&#x27;;</span><br><span class="line"># 授权所有权限</span><br><span class="line"># 对文件db1.t1有任意操作</span><br><span class="line">grant all privileges on db1.t1 to &quot;mjj&quot;@&#x27;%&#x27;;</span><br><span class="line"># 对db1数据库中的文件任意操作</span><br><span class="line">grant all privileges on db1.* to &quot;mjj&quot;@&#x27;%&#x27;;</span><br><span class="line"># 对数据库所有文件任意操作</span><br><span class="line">grant all privileges on *.* to &quot;mjj&quot;@&#x27;%&#x27;;</span><br><span class="line"></span><br><span class="line"># 取消权限</span><br><span class="line">revoke all privileges on *.* to &quot;mjj&quot;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>
<p>登录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -umjj - h 192.168.1.1 -P 3306 -p123</span><br></pre></td></tr></table></figure>
<h2 id="第二章mysql命令"><a class="markdownIt-Anchor" href="#第二章mysql命令"></a> 第二章MySQL命令</h2>
<p>SQL命令</p>
<p>SQL语言主要用于存储数据、查询数据、更行数据和管理数据库系统、分为三种：</p>
<ul>
<li>DDL 语句 数据库定义语言：数据库、表、视图、索引、</li>
<li>DML 语句 数据库操作语言：插入删除修改查看</li>
<li>DCL 语句 数据库控制语言：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select user();</span><br><span class="line"># 查看所有数据库;</span><br><span class="line">show databases;</span><br><span class="line"># 创建数据库</span><br><span class="line">create database db1;# 后面可加 charset=&quot;utf8&quot; 或gbk</span><br><span class="line">alter database db1 charset=&quot;gbk&quot;;</span><br><span class="line">create table t1(id int, name char(10))engine=innodb;</span><br><span class="line"># sql 语言是强类型 定义什么就必须加什么名称 </span><br><span class="line"># engine=innodb 存储引擎</span><br><span class="line">insert into t1(id,name) values(1,&#x27;alex&#x27;),(2,&#x27;ss&#x27;);</span><br></pre></td></tr></table></figure>
<h4 id="数据库操作"><a class="markdownIt-Anchor" href="#数据库操作"></a> 数据库操作</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看数据库</span><br><span class="line">show databases;</span><br><span class="line"># 查看当前库</span><br><span class="line">show create database db1;</span><br><span class="line"># 查看所在的库</span><br><span class="line">select database();</span><br><span class="line"># 选择数据库</span><br><span class="line">use 数据库名;</span><br><span class="line"># 删除数据库</span><br><span class="line">DROP DATABASE 数据库名;</span><br><span class="line"># 修改数据库</span><br><span class="line">alter database db1 charset utf8;</span><br></pre></td></tr></table></figure>
<h4 id="表的操作"><a class="markdownIt-Anchor" href="#表的操作"></a> 表的操作</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">			show create table t1;</span><br><span class="line"># 查看所有的表</span><br><span class="line">show tables; </span><br><span class="line"># 查看表的详细结构</span><br><span class="line">desc t1; </span><br><span class="line"># 增加表</span><br><span class="line">create table t1(id int,name char(10));	</span><br><span class="line"># 修改表的结构</span><br><span class="line">alter table t1 modify name char(6);</span><br><span class="line"># name变大写的</span><br><span class="line">alter table t1 change name NAME char(7);</span><br><span class="line"># 删除表</span><br><span class="line">drop table t1;</span><br></pre></td></tr></table></figure>
<h4 id="数据操作"><a class="markdownIt-Anchor" href="#数据操作"></a> 数据操作</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 插入数据</span><br><span class="line">insert into t1(id,name) values(1,&#x27;ss&#x27;),(2,&#x27;222&#x27;);</span><br><span class="line">insert into t1 value(3,&#x27;sss&#x27;);</span><br><span class="line"># 更新数据</span><br><span class="line">update db1.t1 set name=&#x27;ssss&#x27;;</span><br><span class="line">update db1.t1 set name=&#x27;sel&#x27; where id=2;</span><br><span class="line"># 删除数据</span><br><span class="line">delete from t1;</span><br><span class="line">delete from t1 where id=2;</span><br><span class="line"># 查找数据</span><br><span class="line">select id from t1;</span><br><span class="line">select id,name from t1;</span><br><span class="line">select * from t1;</span><br><span class="line">select * from db1.t1 where id=2;</span><br><span class="line"># 复制表 复制表结构和记录</span><br><span class="line">create table b1 from select * from db1.t1;</span><br><span class="line"># 只要结构</span><br><span class="line">create table b1 from select * from db1.t1 where 1&gt;2;</span><br><span class="line">create table b2 like db2.t1;</span><br></pre></td></tr></table></figure>
<h4 id="存储引擎"><a class="markdownIt-Anchor" href="#存储引擎"></a> 存储引擎</h4>
<p>mysql 5.5版本之后默认为innodb存储引擎<br />
另外还有mysiam、memory、blackhone<br />
#memory，在重启mysql或者重启机器后，表内数据清空<br />
#blackhole，往表内插入任何数据，都相当于丢入黑洞，表内永远不存记录</p>
<h2 id="第三章数据类型"><a class="markdownIt-Anchor" href="#第三章数据类型"></a> 第三章数据类型</h2>
<h4 id="整型"><a class="markdownIt-Anchor" href="#整型"></a> 整型</h4>
<p>tinyint[数字] [<strong>unsigned无符号]</strong> 小整数  -128··127  布尔值可以用  tinyint(1)表示True 0表示False</p>
<p>int 后面的类型是显示宽度，不够补0，其他都是存储宽度，zerofill 用0 填充</p>
<h4 id="浮点型"><a class="markdownIt-Anchor" href="#浮点型"></a> 浮点型</h4>
<p>FLOAT</p>
<p>DOUBLE ,精度比 float 高</p>
<p>decimal 更精准的小数</p>
<h4 id="日期"><a class="markdownIt-Anchor" href="#日期"></a> 日期</h4>
<p>YEAR<br />
YYYY<br />
DATE<br />
YYYY-MM-DD<br />
TIME<br />
HH：MM：SS<br />
DATETIME  用的最多</p>
<h4 id="字符"><a class="markdownIt-Anchor" href="#字符"></a> 字符</h4>
<p>char  类型：定长，简单粗暴，浪费空间，存取快</p>
<p>varchar 类型：变长，存储速度慢，节省空间</p>
<h4 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h4>
<p>enum 枚举 表示多选一</p>
<p>set 集合 表示多选一，或者多选多</p>
<h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h4>
<p>小结：	<br />
数据类型：<br />
整型：tinyint int bigint<br />
浮点型： float double decimal<br />
时间：year date time datetime<br />
字符：char 定长 &gt; varchar 变长 &gt; text 文本<br />
枚举：enum<br />
集合：set<br />
布尔：boolean  tinyint(1) 存1 表示true,存0 表示false<br />
函数： now() 根据字段的数据类型获取当前的时间格式<br />
char_length: 获取字符长度<br />
length():获取字节数<br />
sql中默认是有符号的<br />
如果设置无符号unsigned<br />
用0填充 zefofill<br />
对字段进行  约束</p>
<h4 id="约束"><a class="markdownIt-Anchor" href="#约束"></a> 约束</h4>
<p>保证数据的完整性和一致性</p>
<p>表的设计<br />
1.not null 与 default</p>
<p>​				not null  不为空，default 默认值</p>
<p>create table tb1(id int not null default 2,name char(20) not null);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table tb1(id int not null default 2,name char(20) not null);</span><br><span class="line">insert into tb1  values(1,&#x27;alex&#x27;);</span><br><span class="line">insert into tb1(name) values(&#x27;武sir&#x27;);</span><br><span class="line">insert into tb1(id) values(3);</span><br></pre></td></tr></table></figure>
<p>​	2.unique</p>
<p>​			单列唯一的，不重复的，重复的数据不能插入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table dep(id int not null,name varchar(20) unique);</span><br><span class="line">insert into dep(id,name) values(1,&#x27;alex&#x27;);</span><br><span class="line">insert into dep(id,name) values(2,&#x27;alex&#x27;);</span><br></pre></td></tr></table></figure>
<p>​					多列唯一  表示每列都唯一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table dep2(id int unique,name varchar(20) unique);</span><br><span class="line">insert into dep2(id,name) values(1,&#x27;alex&#x27;);</span><br></pre></td></tr></table></figure>
<p>​					组合唯一</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table dep3(</span><br><span class="line">	id int,</span><br><span class="line">	name varchar(20),</span><br><span class="line">	unique(id,name)		</span><br><span class="line">);</span><br><span class="line">insert into dep3(id,name) values(1,&#x27;alex&#x27;);</span><br><span class="line">insert into dep3(id,name) values(1,&#x27;alex2&#x27;);</span><br><span class="line">insert into dep3(id,name) values(2,&#x27;alex&#x27;);</span><br></pre></td></tr></table></figure>
<p>​	3.primary key （索引优化查询）</p>
<p>​			主键 = not null + unique</p>
<p>​			sql 版本中，一张表只允许有一个主键，通常是id，cid，nid，sid</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table stu(</span><br><span class="line">	id int primary key auto_increment,</span><br><span class="line">	name varchar(10) unique</span><br><span class="line">);</span><br><span class="line">insert into stu(name) values (&#x27;alex&#x27;);</span><br><span class="line">	</span><br><span class="line">化学反应： not null + unique</span><br><span class="line">	create table stu2(</span><br><span class="line">	id int not null unique auto_increment,</span><br><span class="line">	name varchar(10) unique</span><br><span class="line">);			</span><br></pre></td></tr></table></figure>
<p>​			primary key  (索引优化)</p>
<p>​	4.auto_increment</p>
<p>truncate table t1; 数据量大，删除速度比上一条快，直接从零开始。</p>
<p>外键 foreign key</p>
<p>被关联表   主表 先创建</p>
<p>关联表 从表 后创建，因为先创外键无法匹配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">constraint fk_dep forirgin key(dep_id) references dep(id)</span><br><span class="line"># 设置外键dep_id 关联 dep（id）</span><br><span class="line">on delete cascade # 同步删除</span><br><span class="line">on update cascade # 同步更新</span><br></pre></td></tr></table></figure>
<h3 id="第三章表和表的关系"><a class="markdownIt-Anchor" href="#第三章表和表的关系"></a> 第三章表和表的关系</h3>
<p>分析步骤：</p>
<p>先左表：<br />
1.先从左表的多条记录可以对应右表的一条记录，如果是，则证明左表的一个字段foreign key；右表一个字段（通常是 id）</p>
<p>​		2.再右表的多条记录可以对应左表的一条记录，如果是，则证明右表的一个字段foreign key；左表一个自字段（通常是id）</p>
<h4 id="31多对一"><a class="markdownIt-Anchor" href="#31多对一"></a> 3.1多对一</h4>
<p>只有步骤 1 或者步骤 2 成立</p>
<p>的关系，凡是多的都是外键。</p>
<h4 id="32多对多"><a class="markdownIt-Anchor" href="#32多对多"></a> 3.2多对多</h4>
<p>同时成立</p>
<h4 id="33一对一"><a class="markdownIt-Anchor" href="#33一对一"></a> 3.3一对一</h4>
<p>步骤 1 和 2 都不成立</p>
<h3 id="第四章表的查询"><a class="markdownIt-Anchor" href="#第四章表的查询"></a> 第四章表的查询</h3>
<h4 id="41单表查询"><a class="markdownIt-Anchor" href="#41单表查询"></a> 4.1单表查询</h4>
<p>​			一、单表查询的语法<br />
​			SELECT 字段1,字段2… FROM 表名<br />
​                  WHERE 条件<br />
​                  GROUP BY field<br />
​                  HAVING 筛选<br />
​                  ORDER BY field<br />
​                  LIMIT 限制条数<br />
​			二、关键字的执行优先级（重点）</p>
<p>重点中的重点：关键字的执行优先级<br />
from<br />
where<br />
group by<br />
having 以前的版本不可以单独使用，现在可以<br />
select<br />
distinct<br />
order by（asc升序，desc降序）<br />
limit<br />
1.找到表:from<br />
2.拿着where指定的约束条件，去文件/表中取出一条条记录<br />
3.将取出的一条条记录进行分组group by，如果没有group by，则整体作为一组<br />
4.将分组的结果进行having过滤<br />
5.执行select<br />
6.去重<br />
7.将结果按条件排序：order by<br />
8.限制结果的显示条数</p>
<p>在my.ini 配置中设置ONLY_FULL_GROUP_BY</p>
<p>分组之后 要想查询组内的信息，必须使用聚合函数，不能在 where 中使用必须分组</p>
<p>min()		求最小</p>
<p>max()		求最大</p>
<p>avg()		求平均</p>
<p>sum() 		求和</p>
<p>count（）求总个数</p>
<h4 id="42多表查询"><a class="markdownIt-Anchor" href="#42多表查询"></a> 4.2多表查询</h4>
<h5 id="421多表连接查询"><a class="markdownIt-Anchor" href="#421多表连接查询"></a> 4.2.1多表连接查询</h5>
<p>外连接操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表</span><br><span class="line">	<span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">INNER</span><span class="operator">|</span><span class="keyword">LEFT</span><span class="operator">|</span><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> 表<span class="number">2</span></span><br><span class="line">	<span class="keyword">ON</span> 表<span class="number">1.</span>字段 <span class="operator">=</span> 表<span class="number">2.</span>字段</span><br></pre></td></tr></table></figure>
<p>​		内连接：符合条件查询</p>
<p>​		左连接：有限显示左表记录</p>
<p>​		右连接：优先显示右边记录</p>
<p>​		全外连接：显示左右两个表全部记录</p>
<h5 id="422符合条件连接查询"><a class="markdownIt-Anchor" href="#422符合条件连接查询"></a> 4.2.2符合条件连接查询</h5>
<h5 id="423子查询"><a class="markdownIt-Anchor" href="#423子查询"></a> 4.2.3子查询</h5>
<p>子查询是将一个查询语句嵌套在另一个查询语句中</p>
<p>一个查询语句查询的结果作为另一个查询语句的条件</p>
<p>级联删方式</p>
]]></content>
      <categories>
        <category>IT技术</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 的 认识</title>
    <url>/2019/07/03/PHP/</url>
    <content><![CDATA[<h1 id="php"><a class="markdownIt-Anchor" href="#php"></a> PHP</h1>
<h2 id="初步认识"><a class="markdownIt-Anchor" href="#初步认识"></a> 初步认识</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&#x27;hell php!&#x27;</span>; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果遇到字符串输出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&quot;sdfa&quot;</span>; <span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="number">12</span>*<span class="number">3</span>;<span class="meta">?&gt;</span> <span class="comment">/*数字运算*/</span></span><br></pre></td></tr></table></figure>
<p>注意：输出，一定以  <code>;</code> 间隔</p>
<p>安装 wamp 集合控软件</p>
<p>修改 wamp 路径</p>
<p>找到 wampmanager.ini 和 .tpl 文件</p>
<p>查找 menu.left</p>
<p>修改 www目录为项目目录路径</p>
<p>修改 ${w_wwwDirectory} 变为项目路径</p>
<h2 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h2>
<h3 id="定义变量名的方法"><a class="markdownIt-Anchor" href="#定义变量名的方法"></a> 定义变量名的方法</h3>
<ul>
<li>必须以字母或者下划线 “_” 开头</li>
<li>只能由数字或者字母，以及 “_” 组成，换可以加汉字</li>
<li>不允许有空格，多个单词建议   驼峰</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$var</span> = <span class="string">&quot;字符串&quot;</span>;</span><br><span class="line">可用 <span class="title function_ invoke__">var_dump</span>(<span class="variable">$var</span>)输出类型  <span class="keyword">echo</span> <span class="variable">$var</span>输出值</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$var</span> = <span class="string">&quot;大家来学PHP&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$var</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line">	<span class="variable">$var</span> = <span class="string">&quot;学PHP上慕课网&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$var</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="变量的数据类型"><a class="markdownIt-Anchor" href="#变量的数据类型"></a> 变量的数据类型</h3>
<p>可以通过 <code>memory_get_usage</code>来判断不同数据消耗的内存</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$m1</span> = <span class="title function_ invoke__">memory_get_usage</span>(); </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$var_string</span> = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$m2</span> = <span class="title function_ invoke__">memory_get_usage</span>()-<span class="variable">$m1</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$n</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$m3</span> = <span class="title function_ invoke__">memory_get_usage</span>()-<span class="variable">$m1</span>-<span class="variable">$m2</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$f</span> = <span class="number">123.00</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$m4</span> = <span class="title function_ invoke__">memory_get_usage</span>()-<span class="variable">$m1</span>-<span class="variable">$m2</span>-<span class="variable">$m3</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$var_array</span> =<span class="keyword">array</span>(<span class="string">&quot;123&quot;</span>); </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$m5</span> = <span class="title function_ invoke__">memory_get_usage</span>()-<span class="variable">$m1</span>-<span class="variable">$m2</span>-<span class="variable">$m3</span>-<span class="variable">$m4</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>int    整型</p>
<ul>
<li>php中会将其他进制的数自动转换成十进制值输出</li>
</ul>
</li>
<li>
<p>bool  布尔值</p>
</li>
<li>
<p>string 字符串</p>
<ul>
<li>
<p>可以使用 <code>''</code>或者<code>&quot;&quot;</code>包含</p>
</li>
<li>
<p>单双引号可以互相嵌入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$love</span> = <span class="string">&quot;I love you!&quot;</span>; </span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&quot;慕课网,<span class="subst">$love</span>&quot;</span>;</span><br><span class="line"><span class="variable">$string2</span> = <span class="string">&#x27;慕课网,$love&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$string1</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$string2</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment"># 不可以使用 $变量时 用单引号包含</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>多行字符串时（$变量  =  &lt;&lt;&lt;GOD   GOD;）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$string1</span> = <span class="string">&lt;&lt;&lt;GOD</span></span><br><span class="line"><span class="string">我有一只小毛驴，我从来也不骑。</span></span><br><span class="line"><span class="string">有一天我心血来潮，骑着去赶集。</span></span><br><span class="line"><span class="string">我手里拿着小皮鞭，我心里正得意。</span></span><br><span class="line"><span class="string">不知怎么哗啦啦啦啦，我摔了一身泥.</span></span><br><span class="line"><span class="string">GOD</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$string1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>float   浮点型</p>
<ul>
<li>可以使用 e 或者 E来表示小数的科学计数法</li>
</ul>
</li>
</ul>
<p>php 变量会自动转换类型无须定义</p>
<h3 id="特殊类型资源"><a class="markdownIt-Anchor" href="#特殊类型资源"></a> 特殊类型（资源）</h3>
<p>fopen(“文件路径”,“方法”)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//首先采用“fopen”函数打开文件，得到返回值的就是资源类型。</span></span><br><span class="line"><span class="variable">$file_handle</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;data/webroot/resource/php/f.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$file_handle</span>)&#123;</span><br><span class="line">    <span class="comment">//接着采用while循环（后面语言结构语句中的循环结构会详细介绍）一行行地读取文件，然后输出每行的文字</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$file_handle</span>)) &#123; <span class="comment">//判断是否到最后一行</span></span><br><span class="line">        <span class="variable">$line</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$file_handle</span>); <span class="comment">//读取一行文本</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$line</span>; <span class="comment">//输出一行文本</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>; <span class="comment">//换行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$file_handle</span>);<span class="comment">//关闭文件</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="特殊类型空类型"><a class="markdownIt-Anchor" href="#特殊类型空类型"></a> 特殊类型（空类型）</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"> <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); <span class="comment">//禁止显示PHP警告提示</span></span><br><span class="line"> <span class="variable">$var</span>;					<span class="comment">#  NULL</span></span><br><span class="line"> <span class="title function_ invoke__">var_dump</span>(<span class="variable">$var</span>);</span><br><span class="line"> <span class="variable">$var1</span> = <span class="literal">null</span>;			<span class="comment">#  NULL</span></span><br><span class="line"> <span class="title function_ invoke__">var_dump</span>(<span class="variable">$var1</span>);</span><br><span class="line"> <span class="variable">$var2</span> = <span class="literal">NULL</span>;			<span class="comment">#  NULL</span></span><br><span class="line"> <span class="title function_ invoke__">var_dump</span>( <span class="variable">$var2</span>);</span><br><span class="line"> <span class="variable">$var3</span> = <span class="string">&quot;节日快乐！&quot;</span>;</span><br><span class="line"> <span class="keyword">unset</span>(<span class="variable">$var3</span>);			<span class="comment">#  NULL</span></span><br><span class="line"> <span class="title function_ invoke__">var_dump</span>(<span class="variable">$var3</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="常量"><a class="markdownIt-Anchor" href="#常量"></a> 常量</h2>
<p>通常常量定义都是<strong>大写</strong></p>
<h3 id="define定义常量"><a class="markdownIt-Anchor" href="#define定义常量"></a> define（定义常量）</h3>
<p>基本格式（第一个必选参数，第二个 value 必选参数，第三个是可选参数）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="title function_ invoke__">define</span>(<span class="keyword">string</span> <span class="variable">$constant_name</span>, <span class="keyword">mixed</span> <span class="variable">$value</span>[, <span class="variable">$case_sensitive</span> = <span class="literal">true</span>])</span><br></pre></td></tr></table></figure>
<p>string表示参数类型为字符串类型，mixed表示参数类型可以接受为多种不同的类型，case_sensitive = true表示默认为布尔类型TRUE</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="string">&quot;PII&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;PI&quot;</span>,<span class="number">3.14</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="variable">$p</span>,<span class="number">3.14</span>);</span><br><span class="line"><span class="keyword">echo</span> PI;			<span class="comment"># 3.14</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br /&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> PII;			<span class="comment"># 3.14</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="系统常量"><a class="markdownIt-Anchor" href="#系统常量"></a> 系统常量</h3>
<ul>
<li><code>__FILE__</code>   php程序文件名，获取当前文件的物理位置</li>
<li><code>__LINE__</code>  php文件的行数</li>
<li><code>PHP_VERSION</code>  当前php版本</li>
<li><code>PHP_OS</code>        执行php的操作系统</li>
</ul>
<p>获取常量值</p>
<p>直接变量运算的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;PI&quot;</span>,<span class="number">3.14</span>);</span><br><span class="line"><span class="variable">$r</span>=<span class="number">1</span>;</span><br><span class="line"><span class="variable">$area</span> = PI*<span class="variable">$r</span>*<span class="variable">$r</span>; <span class="comment">//计算圆的面积</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>constant函数</p>
<p>基本格式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mixed</span> <span class="title function_ invoke__">constant</span>(<span class="keyword">string</span> constant_name)</span><br></pre></td></tr></table></figure>
<p>第一个参数constant_name为要获取常量的名称，也可为存储常量名的变量。如果成功则返回常量的值，失败则提示错误信息常量没有被定义。（注：mixed表示函数返回值类型为多种不同的类型，string表示参数类型为字符串类型）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">	<span class="title function_ invoke__">define</span>(<span class="string">&quot;PI&quot;</span>,<span class="number">3.14</span>);</span><br><span class="line">	<span class="variable">$r</span>=<span class="number">1</span>;</span><br><span class="line">	<span class="variable">$area</span> = <span class="title function_ invoke__">constant</span>(<span class="string">&quot;PI&quot;</span>)*<span class="variable">$r</span>*<span class="variable">$r</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="判断常量是否被定义"><a class="markdownIt-Anchor" href="#判断常量是否被定义"></a> 判断常量是否被定义</h3>
<p>defined()函数</p>
<p>基本格式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="title function_ invoke__">defined</span>(<span class="keyword">string</span> constants_name)</span><br></pre></td></tr></table></figure>
<p>它只有参数constant_name，指的是要获取常量的名称，若存在则返回布尔类型true，否则返回布尔类型false; （注：bool表示函数返回值类型为布尔类型）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;PI1&quot;</span>,<span class="number">3.14</span>);</span><br><span class="line"><span class="variable">$p</span> = <span class="string">&quot;PI1&quot;</span>;</span><br><span class="line"><span class="variable">$is1</span> = <span class="title function_ invoke__">defined</span>(<span class="variable">$p</span>);</span><br><span class="line"><span class="variable">$is2</span> = <span class="title function_ invoke__">defined</span>(<span class="string">&quot;PI2&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$is1</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$is2</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>IT技术</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 认识与实践</title>
    <url>/2019/07/18/Python/</url>
    <content><![CDATA[<h1 id="python"><a class="markdownIt-Anchor" href="#python"></a> Python</h1>
<h2 id="python第一天"><a class="markdownIt-Anchor" href="#python第一天"></a> Python第一天</h2>
<h3 id="初识编码"><a class="markdownIt-Anchor" href="#初识编码"></a> 初识编码</h3>
<ul>
<li>Python2默认英文编码    	Ascii  	英文，8位表示一个信息，2^8</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">//输入编码格式python2中需要输入</span><br></pre></td></tr></table></figure>
<ul>
<li>Unicode   万国码，32位表示一个东西，2^32</li>
<li>Python3默认UTF-8    UTF-8  给Unicode压缩</li>
</ul>
<h4 id="文件编码"><a class="markdownIt-Anchor" href="#文件编码"></a> 文件编码</h4>
<ul>
<li>编写文件时，保存文件要用UTF-8格式，</li>
<li>以什么格式保存就用什么格式读取</li>
<li>win10 中可以更改 cmd 编码 <code>chcp 65001</code></li>
</ul>
<h4 id="解释器"><a class="markdownIt-Anchor" href="#解释器"></a> 解释器</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- conding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;你好&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>运行：解释器 文件路径</p>
<p>在linux上右一种特殊的执行方法</p>
<ul>
<li>给文件赋予一个可执行的权限</li>
<li>./a.py 自动去找文件的第一行 = /usr/bin/env/python <span class="exturl" data-url="aHR0cDovL2EucHk=">a.py<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h4 id="输入"><a class="markdownIt-Anchor" href="#输入"></a> 输入</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(你想要输出的东西)</span><br><span class="line">raw_input(<span class="string">&#x27;sadfas&#x27;</span>) <span class="comment">#py2</span></span><br><span class="line"><span class="built_in">input</span>(<span class="string">&#x27;asdad&#x27;</span>) <span class="comment">#py3</span></span><br></pre></td></tr></table></figure>
<p>特殊：</p>
<ul>
<li>py2：print “你好”</li>
<li>py3：print(“你好”)</li>
</ul>
<h4 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;alex&#x27;</span> /<span class="string">&quot;理解&quot;</span>/<span class="string">&#x27;&#x27;&#x27;asds &#x27;&#x27;&#x27;</span>/<span class="string">&quot;&quot;&quot; ddsdd&quot;&quot;&quot;</span><span class="string">&quot; ，一般称为字符创</span></span><br><span class="line"><span class="string">666,一般称为数字/整型</span></span><br><span class="line"><span class="string">Ture / False , 一般称为布尔类型</span></span><br></pre></td></tr></table></figure>
<ol>
<li>字符串</li>
</ol>
<ul>
<li>单引号</li>
<li>双引号</li>
<li>三引号</li>
</ul>
<ol start="2">
<li>整型</li>
<li>布尔类型</li>
</ol>
<h2 id="python第二天"><a class="markdownIt-Anchor" href="#python第二天"></a> Python第二天</h2>
<p>if ——else中有个<code>pass</code>直接跳过否定</p>
<h4 id="循环"><a class="markdownIt-Anchor" href="#循环"></a> 循环</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>://可以加条件</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;ssss&#x27;</span>)</span><br><span class="line"></span><br><span class="line">   	<span class="keyword">break</span>//终止循环</span><br><span class="line">count = <span class="number">1</span> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(count)</span><br><span class="line">    <span class="keyword">continue</span> //满足走上走</span><br><span class="line">    </span><br><span class="line"><span class="keyword">else</span>：<span class="comment">#不满足触发条件</span></span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>for 和 while 的应用场景， 无穷使用 while</p>
<h3 id="字符串格式化"><a class="markdownIt-Anchor" href="#字符串格式化"></a> 字符串格式化</h3>
<p>%s 	字符串</p>
<p>%d 	数字</p>
<p>%%  	%</p>
<h3 id="编码"><a class="markdownIt-Anchor" href="#编码"></a> 编码</h3>
<ul>
<li>AsCII</li>
<li>Unicode
<ul>
<li>ecs2</li>
<li>ecs4</li>
</ul>
</li>
<li>utf-8   中文用3字节</li>
<li>utf-16</li>
<li>gbk, 中文用2字节</li>
<li>gbk-2312 中文用2字节</li>
</ul>
<h3 id="git"><a class="markdownIt-Anchor" href="#git"></a> Git</h3>
<ul>
<li>
<p>右键 git bash here</p>
</li>
<li>
<p>初始化 git init（每一次都得做）</p>
</li>
<li>
<p>git add .  将当前目录下的文件都收集起来</p>
</li>
<li>
<p>git commit  -m “第二天作业”   做记录 第几次收集</p>
</li>
<li>
<p>第一次执行的时候输入</p>
<ol>
<li>git config --global <span class="exturl" data-url="aHR0cDovL3VzZXIubmFtZQ==">user.name<i class="fa fa-external-link-alt"></i></span> “sssss”</li>
<li>git config --global user.email &quot; www@qq,com&quot;</li>
<li>git config --global user.password “”</li>
<li>git remote add origin 地址</li>
</ol>
</li>
<li>
<p>代码提交并收集</p>
<ol>
<li>git status</li>
<li>git add .</li>
<li>git commit -m “记录”</li>
<li>git push origin master 将本地目录同步到</li>
</ol>
</li>
<li>
<p>修改代码或删除文件等对本地任何文件操作</p>
<ul>
<li>git  statue</li>
</ul>
</li>
<li>
<p>git add .</p>
<ul>
<li>git commit -m “记录”</li>
</ul>
</li>
<li>
<p>git push origin master 将本地文件同步到码云仓库</p>
</li>
</ul>
<p>下载 git 上的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm clone 地址</span><br></pre></td></tr></table></figure>
<ul>
<li>and  取大  且</li>
<li>or   取小  或 ，都为真，输出前，第二项有错输出错，第二项有真输出真</li>
<li>not  非</li>
<li>not&gt;and&gt;or</li>
</ul>
<h3 id="整型"><a class="markdownIt-Anchor" href="#整型"></a> 整型</h3>
<ul>
<li>​	py2
<ul>
<li>int超出范围自动转化为long (int)</li>
</ul>
</li>
<li>py3
<ul>
<li>int</li>
</ul>
</li>
</ul>
<h3 id="布尔类型boolboolen"><a class="markdownIt-Anchor" href="#布尔类型boolboolen"></a> 布尔类型(bool/boolen)</h3>
<h3 id="字符串strstring"><a class="markdownIt-Anchor" href="#字符串strstring"></a> 字符串(str/string)</h3>
<p>字符变大小</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># value = &quot;alex sb&quot;</span></span><br><span class="line"><span class="comment"># new_value = value.upper()变大</span></span><br><span class="line"><span class="comment"># new_value = value.lower()变小</span></span><br><span class="line"><span class="comment"># print(value)</span></span><br></pre></td></tr></table></figure>
<p>确定字符串是否是数字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="built_in">input</span>(<span class="string">&#x27;请选择服务：&#x27;</span>)</span><br><span class="line">flag = num.isdigit()</span><br><span class="line"><span class="built_in">print</span>(flag)         <span class="comment"># &quot;1&quot; -&gt; True ,&quot;sad&quot; -&gt; False</span></span><br></pre></td></tr></table></figure>
<p>去除空格（ rstrip / lstrip / strip(全去除)）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名：&quot;</span>)</span><br><span class="line"><span class="comment"># new_user = user.rstrip()</span></span><br><span class="line"><span class="comment"># new_user = user.lstrip()</span></span><br><span class="line">new_user = user.strip()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---&gt;&quot;</span>,new_user,<span class="string">&#x27;&lt;----&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>替换（replace）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = <span class="built_in">input</span>(<span class="string">&quot;请说话：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(message)</span><br><span class="line"><span class="comment"># data = message.replace(&#x27;大爷&#x27;,&quot;**&quot;) # 全替换</span></span><br><span class="line">data = message.replace(<span class="string">&#x27;大爷&#x27;</span>,<span class="string">&quot;**&quot;</span>,<span class="number">1</span>) <span class="comment"># 替换几个</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure>
<p>切割 （ split / rsplit ）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">message = &quot;下开放，阿斯顿福建克拉斯，阿斯顿发流口水.&quot;</span><br><span class="line"># result = message.split(&#x27;,&#x27;)</span><br><span class="line"># result = message.split(&#x27;，&#x27;,1) # 注意逗号中英文，默认从左向右</span><br><span class="line">result = message.rsplit(&#x27;，&#x27;,1) #从有向左</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<p>公共的：</p>
<ul>
<li>
<p>len()     计算长度</p>
</li>
<li>
<p>索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name = &quot;sfdsa&quot;</span><br><span class="line">print(name[0])</span><br><span class="line">print(name[-1]) #从右往左取值</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>切片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v = <span class="string">&quot;sdfsadf&quot;</span></span><br><span class="line">s = v[<span class="number">2</span>:<span class="number">3</span>] <span class="comment"># f</span></span><br><span class="line">s = v[<span class="number">2</span>:]  <span class="comment"># fsadf</span></span><br><span class="line">s = v[:<span class="number">5</span>]  <span class="comment"># sdfsa  从左往右取到第五个</span></span><br><span class="line">s = v[:-<span class="number">1</span>] <span class="comment"># sdfsad 把 f 那掉了</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>
<ul>
<li>.extend() 会在内部循环自动添加到列表</li>
</ul>
</li>
</ul>
<h2 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h2>
<p>表示多个数据用列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user = [<span class="string">&quot;sdsd&quot;</span>,<span class="string">&quot;sdsdsd&quot;</span>,<span class="number">99</span>]</span><br></pre></td></tr></table></figure>
<h3 id="公共功能"><a class="markdownIt-Anchor" href="#公共功能"></a> 公共功能</h3>
<ul>
<li>
<p>len</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">users = [<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="number">99</span>]</span><br><span class="line">val = <span class="built_in">len</span>(users)</span><br><span class="line"><span class="built_in">print</span>(val)  <span class="comment">#3</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">users = [<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="number">99</span>]</span><br><span class="line">val = users[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(val)  <span class="comment">#</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>切片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">users = [<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="number">99</span>]</span><br><span class="line">val = users[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">val = users[::<span class="number">2</span>] <span class="comment"># 输出为偶数索引的值</span></span><br><span class="line"><span class="built_in">print</span>(val)  <span class="comment">#</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>删除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">users = [<span class="string">&quot;hhhh&quot;</span>,<span class="string">&quot;sdfsfa&quot;</span>,<span class="number">99</span>]</span><br><span class="line"><span class="comment">#方式一</span></span><br><span class="line">users.pop(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(users)</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二</span></span><br><span class="line"><span class="keyword">del</span> users[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(users)</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>字符串本身不支持修改删除【不可变的类型】</li>
<li>列表是可变类型</li>
</ul>
</li>
<li>
<p>修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">users = [<span class="string">&quot;来来来&quot;</span>,<span class="string">&quot;sdafssd&quot;</span>,<span class="string">&quot;asdfsad&quot;</span>]</span><br><span class="line">users[<span class="number">2</span>] = <span class="number">66</span></span><br><span class="line"></span><br><span class="line">users[<span class="number">0</span>] = <span class="string">&#x27;sadfsa&#x27;</span></span><br><span class="line">users[<span class="number">0</span>][<span class="number">1</span>]//选取是‘来’</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>步长</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">users = [<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="number">99</span>]</span><br><span class="line">val = users[<span class="number">0</span>:<span class="number">2</span>:<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(val)  <span class="comment">#</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>for 循环</p>
</li>
<li>
<p>range(数字,数字,-1/ 1)-1 反过来，1 正过来</p>
</li>
</ul>
<h3 id="独有功能"><a class="markdownIt-Anchor" href="#独有功能"></a> 独有功能</h3>
<ul>
<li>
<p>append, 在列表的最后追加一个元素</p>
</li>
<li>
<p>insert(index,&quot; &quot;)，在索引位置加元素</p>
</li>
<li>
<p>remove/pop，remove加元素删除，pop加索引删除，默认最后一个</p>
</li>
<li>
<p>clear，清空了</p>
</li>
<li>
<p>列表嵌套</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">users = [<span class="string">&quot;sadffsf&quot;</span>,<span class="number">0</span>,<span class="literal">True</span>,[asdfsa,asdfas,],[1sadf]]</span><br><span class="line"></span><br><span class="line">users[<span class="number">0</span>]</span><br><span class="line">users[<span class="number">3</span>] <span class="comment">#[asdfsa,asfsa,]</span></span><br><span class="line">users[<span class="number">3</span>][-<span class="number">1</span>] <span class="comment">#&quot;sadfsa&quot;</span></span><br><span class="line">users[]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>元组转换列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">va = <span class="built_in">list</span>((<span class="number">111</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>))</span><br><span class="line"><span class="built_in">print</span>(va)</span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">enumerate</span><span class="params">(变量,序号)</span></span></span><br></pre></td></tr></table></figure>
<h2 id="元组"><a class="markdownIt-Anchor" href="#元组"></a> 元组</h2>
<h3 id="元组书写规范"><a class="markdownIt-Anchor" href="#元组书写规范"></a> 元组书写规范</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">users = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>] <span class="comment">#列表 （可变）</span></span><br><span class="line"></span><br><span class="line">users = (<span class="number">11</span>,<span class="number">222</span>,<span class="number">11</span>,<span class="number">11</span>) <span class="comment">#元组 （不可变）</span></span><br></pre></td></tr></table></figure>
<h3 id="公共功能-2"><a class="markdownIt-Anchor" href="#公共功能-2"></a> 公共功能</h3>
<ol>
<li>索引 （排除：int/bool）</li>
<li>切片（排除：int/bool）</li>
<li>步长（排除：int/bool）</li>
<li>删除（排除：tuple/int/bool）</li>
<li>修改（排除：tuple/int/bool）</li>
<li>for循环（排除：int/bool）</li>
<li>len（排除：int/bool）</li>
</ol>
<h3 id="独有功能无"><a class="markdownIt-Anchor" href="#独有功能无"></a> 独有功能（无）</h3>
<h3 id="特殊元组中的元素不可被修改删除"><a class="markdownIt-Anchor" href="#特殊元组中的元素不可被修改删除"></a> 特殊：元组中的元素不可被修改/删除。</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v1 = (<span class="number">11</span>,<span class="number">22</span>,<span class="number">333</span>)</span><br><span class="line">v1[<span class="number">1</span>] = <span class="number">999</span> <span class="comment">#错误</span></span><br><span class="line">v1 = <span class="number">99</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以嵌套</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="字典"><a class="markdownIt-Anchor" href="#字典"></a> 字典</h2>
<blockquote>
<p>请表示：刘伟达的信息，年龄18</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info = &#123;&quot;name&quot;:&#x27;sfd&#x27;,&#x27;age&#x27;:&#x27;18&#x27;,&#x27;gender&#x27;:&#x27;男&#x27; &#125;</span><br><span class="line">info[&#x27;name&#x27;]</span><br></pre></td></tr></table></figure>
<p>基本格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [键：值，键：值]</span><br></pre></td></tr></table></figure>
<ol>
<li>
<h5 id="独有功能-2"><a class="markdownIt-Anchor" href="#独有功能-2"></a> 独有功能</h5>
<ul>
<li><code>.keys()</code>获取所有字典中的键</li>
<li><code>.values()</code>获取所有的值</li>
<li><code>.items</code>获取所有的键和值</li>
</ul>
</li>
<li>
<p>公共功能</p>
<ul>
<li>索引</li>
<li>切片【无】</li>
<li>步长【无】</li>
<li>删除</li>
<li>修改</li>
<li>for循环</li>
<li>len</li>
</ul>
</li>
</ol>
<p>添加字典可以直接赋 键 和 值，也可以使用 setdefault(键，值) 方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic.setdefault(<span class="string">&quot;k4&quot;</span>,<span class="string">&quot;v4&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br></pre></td></tr></table></figure>
<p>.get() 方法找不到不报错，返回none</p>
<h2 id="集合set"><a class="markdownIt-Anchor" href="#集合set"></a> 集合set</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="comment"># 创建集合</span></span><br><span class="line">v = <span class="built_in">set</span>()</span><br></pre></td></tr></table></figure>
<ul>
<li>无序</li>
<li>无法索引删除</li>
<li>不重复的</li>
</ul>
<h3 id="集合的独有功能"><a class="markdownIt-Anchor" href="#集合的独有功能"></a> 集合的独有功能</h3>
<ul>
<li>add 											  添加</li>
<li>discard	 							        删除</li>
<li>update										 更新往里面添加(批量添加)</li>
<li>intersection								 交集</li>
<li>union											并集</li>
<li>difference									差集</li>
<li>symmetric_difference				对称差集</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v = <span class="built_in">set</span>() <span class="comment">#空集</span></span><br><span class="line">v = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;施钻&#x27;</span>,<span class="string">&#x27;呵呵&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">result = v.add(<span class="string">&#x27;添加&#x27;</span>)  					<span class="comment"># &#123;1,2,&#x27;施钻&#x27;,&#x27;呵呵&#x27;,&#x27;添加&#x27;&#125; 已存在不会重复添加</span></span><br><span class="line">result = v.discard(<span class="string">&#x27;施钻&#x27;</span>)				<span class="comment"># &#123;1,2,&#x27;呵呵&#x27;&#125;不能通过索引删除</span></span><br><span class="line">result = v.update(&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>&#125;)    	 	 <span class="comment"># &#123;1,2,11,22,33,&#x27;施钻&#x27;,&#x27;呵呵&#x27;&#125;批量添加</span></span><br><span class="line">result = v.intersection(&#123;<span class="number">1</span>,<span class="number">22</span>,<span class="string">&#x27;呵呵&#x27;</span>&#125;)	<span class="comment"># &#123;1,&#x27;呵呵&#x27;&#125; 交集</span></span><br><span class="line">result = v.union(&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;呵呵&#x27;</span>,<span class="string">&#x27;是&#x27;</span>&#125;)	  	<span class="comment"># &#123;1,2,&#x27;施钻&#x27;,&#x27;呵呵&#x27;,&#x27;是&#x27;&#125; 并集</span></span><br><span class="line">result = v.difference(&#123;<span class="number">1</span>,<span class="string">&#x27;呵呵&#x27;</span>&#125;)			<span class="comment"># &#123;2,&#x27;施钻&#x27;&#125; 差集</span></span><br><span class="line">result = v.symmetric_difference(&#123;<span class="number">1</span>,<span class="string">&#x27;呵呵&#x27;</span>,<span class="string">&#x27;小何&#x27;</span>&#125;)	<span class="comment">#很少使用互相取差集 &#123;2,&#x27;施钻&#x27;,&#x27;小何&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
<p>注意：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;施钻&#x27;</span>,<span class="string">&#x27;呵呵&#x27;</span>&#125;</span><br><span class="line">result = v.intersection([<span class="number">1</span>,<span class="number">22</span>,<span class="string">&#x27;呵呵&#x27;</span>])</span><br><span class="line"><span class="comment">#可以是列表，但 v 不能是列表，因为没有这个方法</span></span><br></pre></td></tr></table></figure>
<h3 id="公共功能-3"><a class="markdownIt-Anchor" href="#公共功能-3"></a> 公共功能</h3>
<ul>
<li>len</li>
<li>for 循环</li>
<li>索引【无】</li>
<li>切片【无】</li>
<li>删除【无】</li>
<li>步长【无】</li>
<li>修改【无】</li>
</ul>
<p>​	列表/字典/集合 -&gt; 不能放在集合中 + 不能作为字典的 key（unhasable）</p>
<p>集合字典的查询速度 &gt; 列表</p>
<h2 id="深浅拷贝面试"><a class="markdownIt-Anchor" href="#深浅拷贝面试"></a> 深浅拷贝（面试）</h2>
<p>深浅拷贝相等</p>
<h2 id="文件操作"><a class="markdownIt-Anchor" href="#文件操作"></a> 文件操作</h2>
<h3 id="打开文件"><a class="markdownIt-Anchor" href="#打开文件"></a> 打开文件</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;url&#x27;</span>,mode=<span class="string">&#x27;方式&#x27;</span>,encoding=<span class="string">&#x27;格式&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>文件的方式有：</p>
<ul>
<li>
<p>单一的：</p>
<ul>
<li>r		只读不能写，文件必须存在</li>
<li>w       只写不能读，写之前会清空，文件不存在会建立</li>
<li>a        只追加不能读，不存在会新建，默认光标在最后</li>
</ul>
</li>
<li>
<p>k可读可写：</p>
<ul>
<li>r+		能读，写：根据光标位置操作写入（可能会覆盖）<code>seek</code>调整光标位置</li>
<li>w+       能读能写，写入清空文件，读取调整光标位置</li>
<li>a+        能读能写，因为追加，所以光标最后，读取一样调整</li>
</ul>
</li>
<li>
<p>带b编码（二进制）：</p>
<ul>
<li>rb			<code>.encode('utf-8')</code>转换编码</li>
<li>wb</li>
<li>ab</li>
</ul>
</li>
</ul>
<h2 id="三元运算三木运算"><a class="markdownIt-Anchor" href="#三元运算三木运算"></a> 三元运算（三木运算）</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v = 前面 <span class="keyword">if</span> 条件 <span class="keyword">else</span> 后面 </span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 让用户输入值，如果值是整数，则转换成整数，否则赋值为None</span></span><br><span class="line">data = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">value = <span class="built_in">int</span>(data) <span class="keyword">if</span> data.isdecimal() <span class="keyword">else</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<p>注意：先做出来，再简化</p>
<h2 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h2>
<p>面向对象的思想：函数式编程，（进行封装方法）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 函数的定义必须有 def</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="comment"># 函数内容</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ssss&#x27;</span>)</span><br><span class="line"><span class="comment"># 函数执行</span></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数不调用，内部代码永远不会执行</span></span><br></pre></td></tr></table></figure>
<h3 id="参数赋值"><a class="markdownIt-Anchor" href="#参数赋值"></a> 参数赋值</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">aa</span>):		<span class="comment">#形参</span></span><br><span class="line">    v = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line">    <span class="built_in">print</span>(v[aa])</span><br><span class="line">foo(<span class="number">1</span>)  <span class="comment"># 第二个元素输出，实参</span></span><br></pre></td></tr></table></figure>
<h3 id="返回值return-123-返回元组"><a class="markdownIt-Anchor" href="#返回值return-123-返回元组"></a> 返回值（return 1,2,3 返回元组）</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="comment">#....</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">9</span>  <span class="comment"># 返回值为9 默认 return None</span></span><br><span class="line"></span><br><span class="line">val = func(<span class="string">&#x27;adsasd&#x27;</span>) <span class="comment"># val 等于 return </span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.让用户输入一段字符串,计算字符串中有多少大写A，将有多少个就这文件中写多少个’A’</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_char_count</span>(<span class="params">data</span>):</span><br><span class="line">    sum_counter = <span class="number">0</span> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">            sum_counter += <span class="number">1</span></span><br><span class="line">         </span><br><span class="line">    <span class="keyword">return</span> sum_counter</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_file</span>(<span class="params">line</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(line) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>		<span class="comment"># 如果函数中有 return 则停止执行</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>,mode=<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(line)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">content = <span class="built_in">input</span>(<span class="string">&#x27;请输入：&#x27;</span>)</span><br><span class="line">counter = get_char_count(content)</span><br><span class="line">write_data = <span class="string">&quot;宿舍&quot;</span> * counter </span><br><span class="line">status = write_file(write_data)</span><br><span class="line"><span class="keyword">if</span> status:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;写入成功&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 情况1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">f1()</span><br><span class="line"><span class="comment"># 情况2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">f2(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 情况3</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f3</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">f3()</span><br><span class="line"><span class="comment"># 情况4</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f4</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">return</span> a </span><br><span class="line">f4(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="参数"><a class="markdownIt-Anchor" href="#参数"></a> 参数</h2>
<h3 id="基本参数"><a class="markdownIt-Anchor" href="#基本参数"></a> 基本参数</h3>
<ul>
<li>
<p>任意类型</p>
</li>
<li>
<p>任意个数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span>  <span class="title function_">fun</span>(<span class="params">a1,a2,a3</span>):</span><br><span class="line">	<span class="built_in">print</span>(a1,a2,a3)</span><br><span class="line">fun(<span class="number">1</span>,<span class="string">&#x27;sda&#x27;</span>,<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="位置传参"><a class="markdownIt-Anchor" href="#位置传参"></a> 位置传参</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">a1,a2</span>):</span><br><span class="line">	<span class="built_in">print</span>(a1,a2)</span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<h3 id="关键字传参位置参数在前关键在后"><a class="markdownIt-Anchor" href="#关键字传参位置参数在前关键在后"></a> 关键字传参（位置参数在前，关键在后）</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">a1,a2</span>):</span><br><span class="line">	<span class="built_in">print</span>(a1,a2)</span><br><span class="line">fun(a1=<span class="number">99</span>,a2=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 位置参数只能从第一个开始，所以不能重复给一个赋值</span></span><br></pre></td></tr></table></figure>
<h3 id="默认参数"><a class="markdownIt-Anchor" href="#默认参数"></a> 默认参数</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">a,b=<span class="number">9</span></span>)</span><br><span class="line">	<span class="built_in">print</span>(a,b)</span><br><span class="line">fun(a)</span><br><span class="line"><span class="comment"># b 可不传，传改变</span></span><br></pre></td></tr></table></figure>
<h3 id="万能参数打散也可以与上面混用"><a class="markdownIt-Anchor" href="#万能参数打散也可以与上面混用"></a> 万能参数（打散），也可以与上面混用</h3>
<ul>
<li><code>*args（tuple）</code>
<ul>
<li>可以接受任意个数的位置参数，并将参数转换成元组
<ul>
<li><code>有 *</code></li>
<li><code>无 *</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args</span>):	<span class="comment"># 一般情况下写成 args</span></span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">func(<span class="number">1</span>)   	<span class="comment"># (1,)</span></span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>) 	<span class="comment"># (1,2)</span></span><br><span class="line">func((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)) 		<span class="comment"># 元组套元组</span></span><br><span class="line">func(*(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>))		<span class="comment"># 加 * 循环添加进去，直接赋值</span></span><br><span class="line"><span class="comment"># 当你不确定用多少参数时使用</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>**args（dict）</code>
<ul>
<li>可以接受任意个数的关键字参数，并将参数转换为字典</li>
<li><code>有**</code></li>
<li><code>无**</code></li>
</ul>
</li>
<li>只能关键字传参</li>
</ul>
<h3 id="综合应用"><a class="markdownIt-Anchor" href="#综合应用"></a> 综合应用</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(args,kwargs)</span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,k1=<span class="number">4</span>,k2=<span class="number">3</span>,k3=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<h3 id="调用函数"><a class="markdownIt-Anchor" href="#调用函数"></a> 调用函数</h3>
<p>位置参数 &gt; 关键字参数</p>
<p>用的较多：</p>
<ul>
<li>定义函数：
<ul>
<li>def func(a)</li>
<li>def func(a,b=None) 对于默认值，如果是可变类型，-----&gt;坑</li>
<li>def func(*args,**kwargs)</li>
</ul>
</li>
</ul>
<h2 id="作用域"><a class="markdownIt-Anchor" href="#作用域"></a> 作用域</h2>
<ul>
<li>
<p>全局作用域</p>
</li>
<li>
<p>局部作用域</p>
</li>
<li>
<p>一个函数就是一个作用域</p>
</li>
<li>
<p>作用域中查找数据规则：优先在自己的作用域找数据，自己没有就去“父级”-&gt; “父级”-&gt;直到全局，没有就报错。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    x = <span class="number">9</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">x1</span>():</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">    x1()	<span class="comment"># 找父级</span></span><br><span class="line">    x = <span class="number">999</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">func()</span><br></pre></td></tr></table></figure>
<ul>
<li>子作用域中只能使用父级中的值，无法重新为父级的赋值</li>
</ul>
<p>global 找到全局变量，可以修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;呵呵&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    name = <span class="string">&#x27;sdfa&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">funs</span>():</span><br><span class="line">        <span class="keyword">global</span> name</span><br><span class="line">        name = <span class="number">999</span></span><br><span class="line">    funs()</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">fun()</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="comment"># sdfa</span></span><br><span class="line"><span class="comment"># 999</span></span><br></pre></td></tr></table></figure>
<p>nonlocal 找到上一级的修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;呵呵&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    name = <span class="string">&#x27;sdfa&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">funs</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> name</span><br><span class="line">        name = <span class="number">999</span></span><br><span class="line">    funs()</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">fun()</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="comment"># 999</span></span><br><span class="line"><span class="comment"># 呵呵</span></span><br></pre></td></tr></table></figure>
<h3 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意：</h3>
<p>全局变量大写，局部变量小写</p>
<h2 id="函数小高级"><a class="markdownIt-Anchor" href="#函数小高级"></a> 函数小高级</h2>
<p>函数赋值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">v1 = func</span><br><span class="line">func()</span><br><span class="line">v1()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">func_list = [func,func,func]</span><br><span class="line">func_list</span><br></pre></td></tr></table></figure>
<p>函数可以当做变量来使用，加（）返回值为none</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line"><span class="comment"># func_list1 = [fun,fun,fun]</span></span><br><span class="line"><span class="comment"># func_list2 = [fun(),fun(),fun()]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(func_list2)</span></span><br><span class="line">info = &#123;</span><br><span class="line">    <span class="string">&#x27;k1&#x27;</span>:fun,</span><br><span class="line">    <span class="string">&#x27;k2&#x27;</span>:fun(),</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(info)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">arg</span>):</span><br><span class="line">    v1 = arg()</span><br><span class="line">    <span class="built_in">print</span>(v1)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">666</span>)</span><br><span class="line">result = fun(show)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment">## 666</span></span><br><span class="line"><span class="comment"># None</span></span><br><span class="line"><span class="comment"># None</span></span><br></pre></td></tr></table></figure>
<p>面试题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 有10个函数，</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;话费查询&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;语音沟通&#x27;</span>)</span><br><span class="line">    ....</span><br><span class="line">choice = <span class="built_in">input</span>(<span class="string">&#x27;要执行的功能：&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="lambda-表达式匿名函数"><a class="markdownIt-Anchor" href="#lambda-表达式匿名函数"></a> lambda 表达式(匿名函数)</h2>
<p>用于表达简单的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">a1,a2</span>):</span><br><span class="line">    <span class="keyword">return</span> a1 + <span class="number">100</span></span><br><span class="line">func2 = <span class="keyword">lambda</span> a1,a2: a1 + <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(func1(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">v = func2(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(v)</span><br><span class="line"><span class="comment">#类似三木运算</span></span><br></pre></td></tr></table></figure>
<p>多种样子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">func1 = <span class="keyword">lambda</span> : <span class="number">100</span></span><br><span class="line">func2 = <span class="keyword">lambda</span> x1: x1 * <span class="number">100</span></span><br><span class="line">func3 = <span class="keyword">lambda</span> *args,**kwargs: <span class="built_in">len</span>(args)+<span class="built_in">len</span>(kwargs)</span><br><span class="line"><span class="comment"># 注意加 ： 后面是返回值</span></span><br><span class="line"></span><br><span class="line">func5 = <span class="keyword">lambda</span> n1,n2: n1 <span class="keyword">if</span> n1 &gt; n2 <span class="keyword">else</span> n2</span><br><span class="line">v = func5(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(v)</span><br></pre></td></tr></table></figure>
<p>列表的所有方法基本上返回都是NONE；字符串返回是个新值</p>
<h2 id="内置函数"><a class="markdownIt-Anchor" href="#内置函数"></a> 内置函数</h2>
<p>以前的都是内置函数</p>
<p>强制转换类</p>
<ul>
<li>dict()</li>
<li>str()</li>
<li>list()</li>
<li>tuple()</li>
<li>int()</li>
<li>bool()</li>
<li>set()</li>
</ul>
<p>输入输出</p>
<ul>
<li>input</li>
<li>print</li>
</ul>
<p>数学相关</p>
<ul>
<li>
<p>abs()	绝对值</p>
</li>
<li>
<p>float()   转换成浮点型（小数值）</p>
</li>
<li>
<p>max()   最大</p>
</li>
<li>
<p>min()    最小</p>
</li>
<li>
<p>sum()   求和</p>
</li>
<li>
<p>pow()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v = <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(v)  <span class="comment"># 2**3</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>round</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">round</span>(<span class="number">1.2344</span>,<span class="number">2</span>)  <span class="comment"># 会四舍五入</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>divmod  两个数相除得 商 和 余数（单个接收会放在元组，两个不会）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分页</span></span><br><span class="line"><span class="comment"># -*-  encoding:utf-8 -*-</span></span><br><span class="line">USER_LIST = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">789</span>):</span><br><span class="line">    v = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;哈哈-%s&#x27;</span> %i,<span class="string">&#x27;email&#x27;</span>:<span class="string">&#x27;123-%s@qq.com&#x27;</span> %i&#125;</span><br><span class="line">    USER_LIST.append(v)</span><br><span class="line"><span class="comment"># for item in USER_LIST:</span></span><br><span class="line"><span class="comment">#     print(item)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据总条数</span></span><br><span class="line">total_count = <span class="built_in">len</span>(USER_LIST)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每页显示10条</span></span><br><span class="line">per_page_count = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总页码数</span></span><br><span class="line">max_page_num,a = <span class="built_in">divmod</span>(total_count,per_page_count)</span><br><span class="line"><span class="keyword">if</span> a &gt; <span class="number">0</span>:</span><br><span class="line">    max_page_num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">pager = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入查看第几页：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> pager &lt; <span class="number">1</span> <span class="keyword">or</span> pager &gt; max_page_num:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;页码不合法，必须是 1 - %s&quot;</span> %max_page_num)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        USER_LIST[0:10]</span></span><br><span class="line"><span class="string">        USER_LIST[10:20]</span></span><br><span class="line"><span class="string">        ....</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    start = (pager - <span class="number">1</span>) * per_page_count</span><br><span class="line">    end = pager * per_page_count</span><br><span class="line">    data = USER_LIST[start:end]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure>
<p>二进制十进制等之间相互转换</p>
<ul>
<li>bin,   	只能将十进制转换为二进制</li>
<li>oct ，    将十进制进制转换为八进制</li>
<li>int ,        将其他进制转换成十进制</li>
<li>hex        将其十进制进制转换成十六进制</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v1 = <span class="string">&#x27;&#x27;</span> <span class="comment"># 输入要转换的几进制数</span></span><br><span class="line">v2 = <span class="built_in">int</span>(v1,base=<span class="number">2</span>) <span class="comment"># 在2 的输入几进制数转换为十进制</span></span><br><span class="line"><span class="built_in">print</span>(v2)</span><br><span class="line"><span class="comment"># 其他进制转换为其他进制</span></span><br></pre></td></tr></table></figure>
<p>面试题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一字节等于8位</span></span><br><span class="line"><span class="comment"># IP: 192.168.12.79   -&gt; 四个字节  010001001.010001001.010001001.010001001</span></span><br><span class="line">字符串拼接</span><br><span class="line"><span class="string">&#x27;.&#x27;</span>.join(字符串)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="函数中高级闭包高阶函数"><a class="markdownIt-Anchor" href="#函数中高级闭包高阶函数"></a> 函数中高级（闭包/高阶函数）</h2>
<p>函数内部执行不会混乱各自开辟了一个空间去执行</p>
<p>函数可以做返回值返回.</p>
<p>函数返回值问题注意：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;sd&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base</span>():</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    name = <span class="string">&#x27;sdsd&#x27;</span></span><br><span class="line">    base()</span><br><span class="line">v = func()</span><br></pre></td></tr></table></figure>
<p>闭包：</p>
<p>高阶函数</p>
<ul>
<li>把函数当做参数传递</li>
<li>吧函数当做返回值传递</li>
</ul>
<p>总结：</p>
<ul>
<li>闭包概念：为函数创建一块区域并为其维护自己数据，以后执行时方便调用。【应用场景：装饰器/ SQLAlchemy源码】</li>
</ul>
<h2 id="内置函数包涵面试的"><a class="markdownIt-Anchor" href="#内置函数包涵面试的"></a> 内置函数（包涵面试的）</h2>
<ul>
<li>
<p>chr	将十进制数字转换为 Unicode 编码中的对应字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v = <span class="built_in">chr</span>(<span class="number">97</span>)</span><br><span class="line"><span class="built_in">print</span>(v)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>ord     将字符串在 Unicode 编码中找到其对应的十进制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v = <span class="string">&quot;中国&quot;</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> v:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">ord</span>(item))</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>应用：随机验证码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_random_code</span>(<span class="params">length=<span class="number">6</span></span>):</span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        v = random.randint(<span class="number">65</span>,<span class="number">90</span>)</span><br><span class="line">        data.append(<span class="built_in">chr</span>(v))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(data)</span><br><span class="line"></span><br><span class="line">code = get_random_code()</span><br><span class="line"><span class="built_in">print</span>(code)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random <span class="comment"># 导入一个模块</span></span><br><span class="line">v = random.randint(起始,终止) <span class="comment"># 生成随机数</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>高级函数</p>
<ul>
<li>
<p>map，循环每个元素（第二个参数），然后让每个元素执行函数（第一个参数），将每个函数执行的结果保存到新列表中，并返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line">result = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x + <span class="number">100</span>,v1)</span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># [11,22,33,44,55,66] py2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result)) <span class="comment"># 特殊 py3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>filter</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="string">&#x27;asds&#x27;</span>,<span class="string">&#x27;asd&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># def func(x):</span></span><br><span class="line"><span class="comment">#     if type(x) == int:</span></span><br><span class="line"><span class="comment">#         return True</span></span><br><span class="line"><span class="comment">#     return False</span></span><br><span class="line"><span class="comment"># result = filter(func,v1)</span></span><br><span class="line"><span class="comment"># print(list(result))</span></span><br><span class="line"><span class="comment"># result = filter(lambda x: True if type(x) == int else False,v1)</span></span><br><span class="line">result = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: <span class="built_in">type</span>(x) == <span class="built_in">int</span>,v1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(result))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>reduce</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line">v1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"><span class="comment"># result = functools.reduce(func,v1)</span></span><br><span class="line">result = functools.reduce(<span class="keyword">lambda</span> x,y: x+y,v1)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>面试题</p>
<ul>
<li>
<p>常用内置函数有哪些？</p>
</li>
<li>
<p>filter / map / reduce</p>
</li>
<li>
<p>什么是匿名函数？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">v = [<span class="keyword">lambda</span> x: x+<span class="number">100</span>]</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="内置模块py文件"><a class="markdownIt-Anchor" href="#内置模块py文件"></a> 内置模块（.py文件）</h2>
<p>将指定的 “字符串” 进行加密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  hashlib</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_md5</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># obj = hashlib.md5()</span></span><br><span class="line">    obj = hashlib.md5()</span><br><span class="line">    obj.update(data.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    result = obj.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">val = get_md5(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(val)</span><br></pre></td></tr></table></figure>
<p>加盐</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">obj = hashlib.md5(<span class="string">&quot;asdfas&quot;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment"># 此处加盐</span></span><br></pre></td></tr></table></figure>
<p>密码不显示（只能在终端运行）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line">pwd = getpass.getpass(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> pwd == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;登陆成功&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>id   与 is  == 什么意思</p>
<p>函数的参数传递的是什么？【内存地址 = 引用 or 值】</p>
<p>总结</p>
<ul>
<li>传参：位置参数 &gt; 关键字参数</li>
<li>函数不调用，内部代码永远不执行</li>
<li>每次调用函数时，都会为此次调用开辟一块内存，内存可以保存自己以后想要用的值</li>
<li>韩式作用域，如果自己的作用域中没有，则往上级作用域找。</li>
</ul>
<h2 id="装饰器6"><a class="markdownIt-Anchor" href="#装饰器6"></a> 装饰器(6**)</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;before&#x27;</span>)</span><br><span class="line">        v = arg()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;after&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="comment"># 第一步：执行 func 函数并将下面的函数参数传递，相当于：func(index)</span></span><br><span class="line"><span class="comment"># 第二步：将 func 的返回值重新赋值给下面的函数名。index = func(index)</span></span><br><span class="line"><span class="meta">@func</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span></span><br><span class="line">index()</span><br><span class="line"><span class="built_in">print</span>(index())</span><br></pre></td></tr></table></figure>
<p>总结</p>
<ul>
<li>
<p>目的：不改变原函数的基础上，再函数执行前后自定义功能</p>
</li>
<li>
<p>编写装饰器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 装饰器的编写</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">x</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">y</span>():</span><br><span class="line">        ret = func()</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> y </span><br><span class="line"><span class="comment"># 装饰器的应用</span></span><br><span class="line"><span class="meta">@x</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@y</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manage</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>应用场景：想要维函数扩展功能时，可以选择用装饰器。</p>
</li>
<li>
<p>记住：</p>
<ul>
<li>
<p>装饰器编写格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">外层函数</span>(<span class="params">参数</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">内层函数</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> 参数(*args,**kwargs)</span><br><span class="line">    <span class="keyword">return</span> 内层函数</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>装饰器应用格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@外层函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">index()</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>为什么加 *args, **kwargs ，防止要传参</p>
</li>
</ul>
</li>
</ul>
<h2 id="推导式"><a class="markdownIt-Anchor" href="#推导式"></a> 推导式</h2>
<ul>
<li>
<p>列表推导式</p>
<ul>
<li>
<p>基本格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 变量 = [ for 循环变量 for 循环一个可迭代对象]</span></span><br><span class="line">vals = [ i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;alex&#x27;</span>]  </span><br><span class="line">v1 = [ i+<span class="number">100</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">v2 = [ <span class="number">99</span> <span class="keyword">if</span> i&gt;<span class="number">5</span> <span class="keyword">else</span> <span class="number">66</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">v3 = [ func <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line">v5 = [ <span class="keyword">lambda</span> : <span class="number">100</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">result = v5[<span class="number">9</span>]()</span><br><span class="line"></span><br><span class="line">v8 = [<span class="keyword">lambda</span> x: x*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]  <span class="comment"># 新浪面试题</span></span><br><span class="line"><span class="comment"># 1.请问 v8 是什么？</span></span><br><span class="line"><span class="comment"># 2.请问 v8[0](2) 的结果是什么？</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 面试题</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num</span>():</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">lambda</span> x:i*x <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"><span class="comment"># num -&gt; [函数,函数，函数,函数]</span></span><br><span class="line"><span class="built_in">print</span>([ m(<span class="number">2</span>) <span class="keyword">for</span> m <span class="keyword">in</span> num() ])  <span class="comment">#[6,6,6,6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#################################################</span></span><br><span class="line">v9 = [ i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i&gt;<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>集合推导式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v1 = &#123; i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;aelx&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>字典推导式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v1 = &#123; <span class="string">&#x27;k&#x27;</span>+<span class="built_in">str</span>(i):i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>模块：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">v = time.time() <span class="comment">#获取当前时间</span></span><br><span class="line">time.sleep(<span class="number">2</span>)   <span class="comment"># 睡 2 秒</span></span><br></pre></td></tr></table></figure>
<h2 id="带参数的装饰器"><a class="markdownIt-Anchor" href="#带参数的装饰器"></a> 带参数的装饰器</h2>
<ul>
<li>应用场景：flask框架  + Django缓存 + 面试题（写装饰器实现被装饰的函数要执行 N 次）</li>
<li>模块
<ul>
<li>os</li>
<li>sys</li>
<li>time （三种类型）</li>
<li>datetime</li>
<li>timezone 时区</li>
</ul>
</li>
</ul>
<p>面试题：</p>
<ul>
<li>def func(a,b=[]) 有什么陷阱？ 如果不传递参数，默认指向同一个地址，这个就是参数最好是不可变类型</li>
<li>看代码写结果</li>
</ul>
<h2 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    func()</span><br><span class="line">func()</span><br></pre></td></tr></table></figure>
<p>默认递归次数限制  1000</p>
<h2 id="带参数的装饰器-2"><a class="markdownIt-Anchor" href="#带参数的装饰器-2"></a> 带参数的装饰器</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">x</span>(<span class="params">counter</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args,*kwargs</span>):</span><br><span class="line">            data = func(*args,**kwargs)  <span class="comment"># 执行原函数并返回值</span></span><br><span class="line">           	<span class="keyword">return</span> data</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@x(<span class="params"><span class="number">9</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>欠</p>
<ul>
<li>元数据：flask 框架</li>
<li>多个装饰器：Flask 框架</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@x1</span></span><br><span class="line"><span class="meta">@x2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>基本装饰器</li>
<li>带参数的装饰器</li>
</ul>
<h2 id="模块"><a class="markdownIt-Anchor" href="#模块"></a> 模块</h2>
<h3 id="sys模块"><a class="markdownIt-Anchor" href="#sys模块"></a> sys模块</h3>
<p>python 解释器相关的数据。</p>
<ul>
<li>
<p>sys.argv</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-  encoding:utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">删除文件的脚本</span></span><br><span class="line"><span class="string">让用户执行脚本传入要删除的路径，在内部帮助将木目录删除</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># 获取用户执行脚本时，传入的参数</span></span><br><span class="line">path = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># [&#x27;D:/ggy/Desktop/Python/课堂练习/day13/模块传参.py&#x27;]  在目录后面加删除文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">shutil.rmtree(path)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>sys.path 当前项目的执行路径，可以添加才保住模块运行</p>
</li>
</ul>
<h3 id="os模块"><a class="markdownIt-Anchor" href="#os模块"></a> os模块</h3>
<p>和操作系统相关的数据</p>
<ul>
<li>
<p>os.path.exists(path)	如果 path 存在，返回 True，如果 path 不存在，返回 False</p>
</li>
<li>
<p>os.stat(“文件名”).st_size  获取文件大小</p>
</li>
<li>
<p>os.path.abspath()   获取绝对路径</p>
</li>
<li>
<p>os.path.join   路径拼接</p>
</li>
<li>
<p>os.path.dirname()   获取上级目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v1 = <span class="string">r&quot;D:\ggy\Desktop\Python\课堂练习\day13\模块传参.py&quot;</span></span><br><span class="line">os.path.dirname(v1)</span><br></pre></td></tr></table></figure>
<ul>
<li>补充：
<ul>
<li>转义：r  就是\</li>
</ul>
</li>
</ul>
</li>
<li>
<p>os.listdir()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">result = os.listdir(<span class="string">r&#x27;D:\ggy\Desktop\Python\课堂练习\day13&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># 只有当前目录下的所有文件</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>os.walk()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line">result = os.walk(<span class="string">r&#x27;D:\ggy\Desktop\Python\课堂练习\day13&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> a,b,c <span class="keyword">in</span> reult:</span><br><span class="line">   <span class="built_in">print</span>(a,b,c)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    for item in c:</span></span><br><span class="line"><span class="string">        path = os.path.join(a,item)</span></span><br><span class="line"><span class="string">        print(path)</span></span><br><span class="line"><span class="string">    break</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>shutil</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">shutil.rmtree(path)</span><br></pre></td></tr></table></figure>
<p>sys.exit()</p>
</li>
</ul>
<p>py2:</p>
<ul>
<li>xrange ,不会在内存中立即创建，而是在循环时。边循环边创建</li>
<li>range ，在内存立即把所有的值都创建</li>
</ul>
<p>py3:</p>
<ul>
<li>
<p>range, 不会在内存中立即创建，而是在循环时。边循环边创建</p>
</li>
<li>
<p>list(range) ,</p>
</li>
<li>
<p>内置模块，python内部提供的功能</p>
</li>
<li>
<p>第三方模块，下载 / 安装 / 使用。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 -m pip install xlrd</span><br></pre></td></tr></table></figure>
<p>同时存在两个python版本就用这个方法，记得添加环境变量</p>
</li>
<li>
<p>自定义模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 xxx.py 文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x1.py</span></span><br><span class="line"><span class="keyword">import</span> xxx</span><br><span class="line">xxx.f1()</span><br><span class="line">xxx.f2()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="内置模块"><a class="markdownIt-Anchor" href="#内置模块"></a> 内置模块</h3>
<ul>
<li>os.makedir , 创建目录</li>
<li>os.makedirs , 创建目录和子目录</li>
<li>sys.path , 默认python 去导入模块时，会按照 sys.path 的路径找模块</li>
</ul>
<h2 id="json模块"><a class="markdownIt-Anchor" href="#json模块"></a> json模块</h2>
<p>json 是一个特殊的字符串。【长的像列表 / 字典 / 字符串 / 数字 / 真假】set 不支持和 tuple转换为 list</p>
<p>转换成 json 叫序列化，反过来叫 反序列化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 序列化，将python的值转化为json格式的字符串。</span></span><br><span class="line">v1 = json.dumps(v)</span><br><span class="line"><span class="built_in">print</span>(v1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反序列化，将json格式的字符串转换成python的数据类型</span></span><br><span class="line">v2 = <span class="string">&#x27;[&quot;alex&quot;,123]&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(v2))</span><br><span class="line">v3 = json.loads(v2)</span><br><span class="line"><span class="built_in">print</span>(v3,<span class="built_in">type</span>(v3))</span><br></pre></td></tr></table></figure>
<ul>
<li>模块基础知识</li>
<li>time / datetime</li>
<li>json / picle</li>
<li>shutil</li>
<li>logging</li>
<li>其他</li>
</ul>
<p>模块（类库）</p>
<ul>
<li>
<p>内置模块</p>
</li>
<li>
<p>第三方</p>
<ul>
<li>json / time       /os/sys</li>
</ul>
</li>
<li>
<p>自定义</p>
</li>
</ul>
<p>模块可以是 py 文件也可以是文件夹</p>
<p>py2中必须写 <code>_ _int_ _.py</code> 文件就是包，py3可以没有，最好加上</p>
<p>定义模块可以把文件或者一个文件夹（包）当做一个文件夹，方便以后其他使用</p>
<p>导入模块先加载模块并执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一种加载</span></span><br><span class="line"><span class="keyword">import</span> yous</span><br><span class="line">yous.func()</span><br><span class="line"><span class="comment"># 第二种</span></span><br><span class="line"><span class="keyword">from</span> ss <span class="keyword">import</span> func,show</span><br><span class="line"><span class="comment">#第三种</span></span><br><span class="line"><span class="keyword">from</span> sjj <span class="keyword">import</span> func <span class="keyword">as</span> f</span><br><span class="line">f()</span><br><span class="line"><span class="comment">#第四种</span></span><br><span class="line"><span class="keyword">from</span> li <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>
<p>导入包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一种</span></span><br><span class="line"><span class="keyword">import</span> ll.js</span><br><span class="line">ll.jd.f1()</span><br><span class="line"><span class="comment"># 第二种</span></span><br><span class="line"><span class="keyword">from</span> li <span class="keyword">import</span> jd</span><br><span class="line">jd.f1()</span><br><span class="line"><span class="keyword">from</span> li.jd <span class="keyword">import</span> f1</span><br><span class="line">f1()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>总结</p>
<p>模块和要执行的同一文件 且 需要 模块中的很多功能时，，推荐同：import 模块</p>
<p>其他推荐： from 模块 import 模块   模块。函数（0</p>
<p>其他推荐： from 模块。模块 import 函数 函数（）</p>
<p>json</p>
<ul>
<li>字典或者列表中有中文，序列化时想要保留中文显示</li>
<li>dumps(,ensure_ascii=False)</li>
<li>dump（写入文件，文件操作）</li>
<li>loads   读到文件</li>
<li>优点：所有语言统一缺点：只能序列化基本数据类型</li>
<li>不加s 文件操作</li>
</ul>
<p>pickle  序列化</p>
<ul>
<li>优点：python中所有东西都能被她序列化（socket对象）：</li>
<li>缺点：序列化内容只有python认识</li>
</ul>
<p>shutil 模块</p>
<ul>
<li>
<p>删除</p>
</li>
<li>
<p>重命名</p>
</li>
</ul>
<p>time 模块</p>
<ul>
<li>time.time()</li>
</ul>
<p>datetime模块</p>
<p>异常处理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    val = <span class="built_in">input</span>(<span class="string">&#x27;请输入数字：&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">int</span>(val))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入错误！&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="迭代器"><a class="markdownIt-Anchor" href="#迭代器"></a> 迭代器</h2>
<p>自己不会写只会用。</p>
<p>迭代器，帮助你对某种对象中的元素进行逐一获取</p>
<p>迭代器内部都有一个 next 方法 ，用以一个个获取数据。</p>
<h2 id="生成器"><a class="markdownIt-Anchor" href="#生成器"></a> 生成器</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">arg</span>):</span><br><span class="line">    arg = arg+<span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> base()</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">100</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 函数内部不会执行，返回一个  生成器对象</span></span><br><span class="line">v1 = func(<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器可以被循环，，一旦开始循环，函数内部开始执行</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> v1:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure>
<p>生成器推导式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v2 = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))  <span class="comment"># 生成器推导式，创建了一个生成器，内部循环执行。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 面试题：请比较 [i for i in range(10)] 和 (i for in range(10))区别？</span></span><br><span class="line"><span class="comment"># 一个生成器，一个推导式</span></span><br></pre></td></tr></table></figure>
<h2 id="装饰器"><a class="markdownIt-Anchor" href="#装饰器"></a> 装饰器</h2>
<p>相对导入,层级越深，丶越多</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> utils</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> utils</span><br></pre></td></tr></table></figure>
<p>主文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__name__</span><br></pre></td></tr></table></figure>
<h2 id="面向对象"><a class="markdownIt-Anchor" href="#面向对象"></a> 面向对象</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bug</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 定义一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fss</span>:</span><br><span class="line">    <span class="comment"># 方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cun</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 创建对象调用类的方法</span></span><br><span class="line">x = Bug()</span><br><span class="line">x.func()</span><br></pre></td></tr></table></figure>
<p>初始化方法，构造方法</p>
<h2 id="继承"><a class="markdownIt-Anchor" href="#继承"></a> 继承</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 父类(基类)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 子类(派生类)    </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 创建了一个子类的对象    </span></span><br><span class="line">obj = Foo()</span><br><span class="line"><span class="comment"># 执行对象 . 方法时，优先在自己的类中找，如果没有就是父类中找。</span></span><br><span class="line">obj.f2()</span><br><span class="line">obj.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建了一个父类的对象</span></span><br><span class="line">obj = Base()</span><br><span class="line">obj.f1()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>什么时候用到继承？</p>
<p>多个类中有公共方法时，可以继承</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f3</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">obj1 = Foo()</span><br><span class="line"></span><br><span class="line">obj2 = Bar()</span><br></pre></td></tr></table></figure>
<p>继承关系中的查找顺序：<br />
注意</p>
<ul>
<li>self 是谁？self 参数时python帮助我们自动传递</li>
<li>self  是哪个类创建的，就从此类开始找，自己没有找父类</li>
</ul>
<p>多继承</p>
<h2 id="多态多种类型多种形态鸭子模型"><a class="markdownIt-Anchor" href="#多态多种类型多种形态鸭子模型"></a> 多态（多种类型/多种形态）鸭子模型</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>什么是鸭子模型，传参时无须指定模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">对于一个函数而言</span><br></pre></td></tr></table></figure>
<h2 id="成员"><a class="markdownIt-Anchor" href="#成员"></a> 成员</h2>
<p>变量（字段）变量修饰符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-  encoding:utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    1.类的成员</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="comment"># 类变量/（静态字段）</span></span><br><span class="line">    country = <span class="string">&quot;中国&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name    <span class="comment"># 实例变量/字段</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self0</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 类的实例  类的对象</span></span><br><span class="line">obj = Foo()</span><br><span class="line">obj.func()</span><br><span class="line"><span class="comment"># 通过类来修改静态字段，其他不能修改</span></span><br><span class="line">Foo.country = <span class="string">&quot;美国&quot;</span></span><br><span class="line"><span class="comment"># 访问时，最好用类方法，不行则用对象</span></span><br><span class="line"><span class="built_in">print</span>(obj.country)</span><br><span class="line"><span class="built_in">print</span>(Foo.country)</span><br><span class="line"><span class="comment"># 什么时候用类变量</span></span><br><span class="line"><span class="comment"># 当所有对象有共同字段时，且更改都要删除时，可以 实例变量（字段）提取到 类变量（静态字段）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*-  encoding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class Foo:</span></span><br><span class="line"><span class="comment">#     def __int__(self,name):</span></span><br><span class="line"><span class="comment">#         self.__name = name</span></span><br><span class="line"><span class="comment">#         self.age = 123</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def func(self):</span></span><br><span class="line"><span class="comment">#         print(self.__name)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># obj = Foo()</span></span><br><span class="line"><span class="comment"># print(obj.age)</span></span><br><span class="line"><span class="comment"># obj.func()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cunc</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name)</span><br><span class="line">obj = Base(<span class="string">&#x27;sss&#x27;</span>)</span><br><span class="line">obj.cunc()</span><br></pre></td></tr></table></figure>
<p>方法	方法修饰符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-  encoding:utf-8 -*-</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class Foo(object):</span></span><br><span class="line"><span class="comment">#     def __int__(self,name):</span></span><br><span class="line"><span class="comment">#         self.name = name</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     # 实例方法</span></span><br><span class="line"><span class="comment">#     def func(self):</span></span><br><span class="line"><span class="comment">#         print(self.name)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     #静态方法 , 方法无须使用对象封装的值，则为静态方法</span></span><br><span class="line"><span class="comment">#     @staticmethod</span></span><br><span class="line"><span class="comment">#     def display():</span></span><br><span class="line"><span class="comment">#         print(&#x27;6566&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#静态方法 , 方法无须使用对象封装的值，则为静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;6566&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类方法当前类</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">cls,x1,x2</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;999&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__dss</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;sd&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property </span><span class="comment">#属性 ,调用时无须加括号</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">end</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Foo.show(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(Foo.show(<span class="number">1</span>,<span class="number">23</span>))</span><br><span class="line">obj = Foo(<span class="string">&#x27;sd&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>面试题：静态方法/类方法和实例方法的区别？</p>
<p>从创建方式：</p>
<p>静态方法需要加@staticmethod，类方法则添加@classmethod，实例方法无须</p>
<p>从调用角度：</p>
<p>实例方法需要创建对象来调用，静态方法和类方法则需要类来调用</p>
<p>从应用场景来说;</p>
<p>如果在方法内部不会用到对象数据时，则可以设置称为静态方法或者类方法</p>
<p>如果你在方法中用到当前类，则设置成为的类方法</p>
<h2 id="嵌套-组合建模"><a class="markdownIt-Anchor" href="#嵌套-组合建模"></a> 嵌套 / 组合（建模）</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建三个学校且三个学校的设施内容等都是一致.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">School</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, address</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.address = address</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speech</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;讲课&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">obj1 = School(<span class="string">&#x27;老男孩北京校区&#x27;</span>, <span class="string">&#x27;美丽富饶的沙河&#x27;</span>)</span><br><span class="line">obj2 = School(<span class="string">&#x27;老男孩上海校区&#x27;</span>, <span class="string">&#x27;浦东新区&#x27;</span>)</span><br><span class="line">obj3 = School(<span class="string">&#x27;老男孩深圳校区&#x27;</span>, <span class="string">&#x27;南山区&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, salary</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.__salary = salary</span><br><span class="line">        self.school = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">t1 = Teacher(<span class="string">&#x27;李杰&#x27;</span>, <span class="number">19</span>, <span class="number">188888</span>)</span><br><span class="line">t2 = Teacher(<span class="string">&#x27;艳涛&#x27;</span>, <span class="number">18</span>, <span class="number">60</span>)</span><br><span class="line">t3 = Teacher(<span class="string">&#x27;女神&#x27;</span>,<span class="number">16</span>, <span class="number">900000</span>)</span><br><span class="line"><span class="comment"># ############## 老师分配校区</span></span><br><span class="line">t1.school = obj1</span><br><span class="line">t2.school = obj1</span><br><span class="line">t3.school = obj2</span><br><span class="line"><span class="comment"># ####################################</span></span><br><span class="line"><span class="comment"># 查看t1老师,所在的校区名称/地址</span></span><br><span class="line"><span class="built_in">print</span>(t1.school.name)</span><br><span class="line"><span class="built_in">print</span>(t1.school.address)</span><br><span class="line"><span class="built_in">print</span>(t1.name)</span><br><span class="line"><span class="built_in">print</span>(t1.age)</span><br><span class="line">t1.school.speech()</span><br></pre></td></tr></table></figure>
<p>组合补充</p>
<h2 id="主动调用其他类的成员"><a class="markdownIt-Anchor" href="#主动调用其他类的成员"></a> 主动调用其他类的成员</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二 按照类的顺序，找下一个</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;5各功能&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">seld</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;sss&#x27;</span>)</span><br><span class="line">        <span class="built_in">super</span>().f1() <span class="comment"># 按照当前类的继承顺序，来执行顺序，</span></span><br><span class="line">       </span><br></pre></td></tr></table></figure>
<h2 id="特殊成员这是语法"><a class="markdownIt-Anchor" href="#特殊成员这是语法"></a> 特殊成员（这是语法）</h2>
<ul>
<li><code>__init__</code>初始化的，不是构造方法</li>
<li>对象（）自动执行 <code>__call__</code></li>
<li>对象【】自动执行 <code>__getitem__</code></li>
<li>对象【‘ss’】= 11 自动执行 <code>__setitme__</code>  无返回值</li>
<li>del  对象【xx】  自动执行  <code>__delitem</code>   无返回值</li>
<li>对象 + 对象  自动执行 <code>__add__</code></li>
<li>with 对象  自动执行 进来 <code>__enter__</code> 返回值   出去 <code>__exit__</code></li>
<li>真正的构造方法  <code>__new__</code>  在 init 之前先执行，创建一个空的对象，为对象初始化</li>
<li>把封装的值以字典形式显示   <code>__dict__</code></li>
<li>迭代器</li>
</ul>
<h2 id="isinstance-issubclass-type"><a class="markdownIt-Anchor" href="#isinstance-issubclass-type"></a> isinstance / issubclass / type</h2>
<h2 id="区分方法和函数"><a class="markdownIt-Anchor" href="#区分方法和函数"></a> 区分方法和函数</h2>
<p>内：方法</p>
<p>外：函数</p>
<h2 id="反射"><a class="markdownIt-Anchor" href="#反射"></a> 反射</h2>
<p>handler（）判断对象是否存在于模块中</p>
<p>getattr（模块，函数）根据字符串为参数，去模块 / 类 / 对象（一切皆对象） 中寻找与之同名的成员</p>
<h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2>
<h2 id="约束"><a class="markdownIt-Anchor" href="#约束"></a> 约束</h2>
<p>类的约束</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">   	报警通知的功能</span></span><br><span class="line"><span class="string">   	&quot;&quot;&quot;</span></span><br><span class="line">    arg.send()</span><br></pre></td></tr></table></figure>
<p>抽象类和抽象方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">form abc <span class="keyword">import</span> ABCMeta,abstractmethod</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>(metaclass=ABCMeta)</span><br><span class="line"></span><br><span class="line"><span class="meta">@abstractmethod</span></span><br><span class="line">抽象方法</span><br></pre></td></tr></table></figure>
<p>什么是接口以及作用？</p>
<p>接口是一种数据类型，主要约束派生类中必须实现指定的方法</p>
<p>python 中不存在，Java和c#中有</p>
<p>约束方法</p>
<ul>
<li>抽象类和抽象方法，编写上麻烦</li>
<li>人为主动抛出异常</li>
</ul>
<p>约束时，抛出异常是否可以用其他的</p>
<p>不专业：</p>
<p>raise  Exception()</p>
<p>专业：</p>
<p>raise NotImplementedErrod()</p>
<p>应用场景：</p>
<p>多个类，内部必须有某些方法，需要使用基类 + 异常进行处理</p>
<h2 id="自定义异常"><a class="markdownIt-Anchor" href="#自定义异常"></a> 自定义异常</h2>
<h2 id="logging"><a class="markdownIt-Anchor" href="#logging"></a> logging</h2>
<h2 id="osi-7层模型"><a class="markdownIt-Anchor" href="#osi-7层模型"></a> osi 7层模型</h2>
<p>网络之间的数据传输，</p>
<p>7层模型</p>
<ul>
<li>应用层   使用软件</li>
<li>表示层    看到数据，如视频。图片</li>
<li>会话层    保持登陆或者链接状态</li>
<li>传输层   TCP/UDP</li>
<li>网络层  IP</li>
<li>数据链路层    MAC</li>
<li>物理层  将数据转换成电信号</li>
</ul>
<p>5层模型</p>
<ul>
<li>应用层
<ul>
<li>应用层</li>
<li>表示层</li>
<li>会话层</li>
</ul>
</li>
<li>传输层</li>
<li>网路层</li>
<li>数据链路层</li>
<li>物理层</li>
</ul>
<p>4层模型</p>
<ul>
<li>应用层
<ul>
<li>应用层</li>
<li>表示层</li>
<li>会话层</li>
</ul>
</li>
<li>传输层</li>
<li>网络层</li>
<li>物理层
<ul>
<li>数据链路层</li>
<li>物理层</li>
</ul>
</li>
</ul>
<h4 id="tcp-三次握手四次挥手"><a class="markdownIt-Anchor" href="#tcp-三次握手四次挥手"></a> TCP 三次握手四次挥手</h4>
<p>socket 客户端向入伍端发送请求时：三次握手</p>
<p>客户端和服务端断开连接：四次挥手</p>
<h2 id="并发和并行"><a class="markdownIt-Anchor" href="#并发和并行"></a> 并发和并行</h2>
<p>并发，伪  由于执行速度特别快，人感觉不到停顿</p>
<p>并行，真    创建10个人同时擦欧总</p>
<h2 id="线程-进程"><a class="markdownIt-Anchor" href="#线程-进程"></a> 线程。进程</h2>
<p>单进程，单线程的应用程序</p>
<p>python调用系统的多线程和多继承</p>
<p>python中只能创建单进程和单线程</p>
<p>多线程在一个进程执行时会分时执行</p>
<h3 id="gil锁"><a class="markdownIt-Anchor" href="#gil锁"></a> GIL锁</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">lock = threading.RLock()</span><br><span class="line"></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这段代码不加锁&#x27;</span>,i)</span><br><span class="line"></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;当前线程&#x27;</span>,i,<span class="string">&#x27;读取到的 n 值：&#x27;</span>,n)</span><br><span class="line">    n = i</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;当前线程&#x27;</span>,i,<span class="string">&#x27;修改 n 值为：&#x27;</span>,n)</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=func,args=(i,))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>
<h3 id="python-线程编写"><a class="markdownIt-Anchor" href="#python-线程编写"></a> python 线程编写</h3>
<p>主线程默认等子线程</p>
<p>为什么创建线程</p>
<p>​	由于线程时 cpu 工作的最小单元，创建线程可以利用多核优势实现并行操作</p>
<p>为什么创建进程？</p>
<p>​	进程与进程之间做数据隔离（Java/c#）</p>
<p>io 请求不占用 cpu</p>
<h4 id="线程池py3-独有"><a class="markdownIt-Anchor" href="#线程池py3-独有"></a> 线程池（py3 独有）</h4>
<h3 id="线程安全"><a class="markdownIt-Anchor" href="#线程安全"></a> 线程安全</h3>
<p>​	线程安全，多线程操作时，内部会让所有线程拍碎处理</p>
<p>​	线程不安全 + 人 =&gt;  排队处理</p>
<h2 id="进程"><a class="markdownIt-Anchor" href="#进程"></a> 进程</h2>
<p>数据共享</p>
<p>锁</p>
<p>进程池</p>
<p>爬虫实例（模块）</p>
<pre><code>- requests
- bs4（beautifulsoup）
</code></pre>
<p>进程锁</p>
<p>当用到同一个数据时，要加锁，数据共享</p>
<p>与线程锁一样操作</p>
<p>进程池  py3 中</p>
<h3 id="初识爬虫"><a class="markdownIt-Anchor" href="#初识爬虫"></a> 初识爬虫</h3>
<p>pip install requests</p>
<p>pip install beautifulsoup4</p>
<p>优先使用线程好</p>
<h2 id="io多路复用"><a class="markdownIt-Anchor" href="#io多路复用"></a> IO多路复用</h2>
<p>基于IO复用 + socket 实现并发请求</p>
<p>作用：检测多个 socket 是否已经发生变化（是否已经连接成功 / 是否已经获取数据）（可读 / 可写）</p>
<p>基于 IO 多路复用 + socket 实现并发请求（一个线程100个请求）</p>
<p>​	IO  多路复用</p>
<p>socket 非阻塞</p>
<p>基于事件循环实现的异步非阻塞框架</p>
<p>已经实现的模块：Twisted   爬虫时</p>
<h5 id="作用"><a class="markdownIt-Anchor" href="#作用"></a> 作用</h5>
<p>​	检测多个 socket 是否发生变化</p>
<p>​		系统中有 select（1024个socket ，循环去检测）   、 poll（不限制个数、循环检测（水平触发）） 、epoll（不限制，回调方式（边缘触发））、三种模式</p>
<p>python 模块：</p>
<p>​	select.select</p>
<p>​	select.epoll</p>
<h4 id="提高并发方案"><a class="markdownIt-Anchor" href="#提高并发方案"></a> 提高并发方案</h4>
<ul>
<li>多线程</li>
<li>多进程</li>
<li>异步非阻塞模块（Twisted） scrapy 框架 （单线程完成并发）</li>
</ul>
<h2 id="协程"><a class="markdownIt-Anchor" href="#协程"></a> 协程</h2>
<p>协程，操作系统中不存在的东西，由程序员创造出来的</p>
<p>可以认为：微线程，对一个线程进行分片，使得线程在代码块之间进行来回切换执行，而不是在原来逐行执行。</p>
<p>安装一个模块:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip instanll greenlet</span><br></pre></td></tr></table></figure>
<p>单纯的协程无用</p>
<h4 id="协程的存在"><a class="markdownIt-Anchor" href="#协程的存在"></a> 协程的存在</h4>
<p>协程 + IO操作</p>
<p>安装 gevent  内部依赖 greenlet 加 IO 切换</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install gevent </span><br></pre></td></tr></table></figure>
<p>协程可以提高并发吗？</p>
<p>​	协程自己本身无法实现并发（甚至性能会降低）</p>
<p>​	协程 + IO切换性能提高</p>
<p>面试必备：</p>
<p>进程，线程，协程的区别？</p>
<p>列表生成式 也式一种生成器</p>
<h3 id="asyncio-模块"><a class="markdownIt-Anchor" href="#asyncio-模块"></a> asyncio 模块</h3>
<p>创建协程函数使用asyncio.coroutine 装饰器</p>
<ul>
<li>tensorflow机器学习</li>
</ul>
<p>三种异步方式</p>
<p>多线程</p>
<p>多进程</p>
<p>协程</p>
<p>异步不一定就是多线程和多进程</p>
<p>python -m http.server</p>
<h3 id="单例模式"><a class="markdownIt-Anchor" href="#单例模式"></a> 单例模式</h3>
<p>生成单例模式</p>
<p>singleton  pattern 软件设计模式</p>
<p>一个类只有一个实例对象</p>
<p>实现单例模式的方式：</p>
<ul>
<li>使用模块</li>
<li>使用 <code>__new__</code></li>
<li>使用装饰器（decorator）</li>
<li>使用元类（metaclass）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls._instance:</span><br><span class="line">            cls._instance = <span class="built_in">super</span>(Singleton, cls).__new__(cls, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>(<span class="title class_ inherited__">Singleton</span>):</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>IT技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 缓存问题</title>
    <url>/2021/03/16/Redis%20%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="redis-缓存问题"><a class="markdownIt-Anchor" href="#redis-缓存问题"></a> Redis 缓存问题</h1>
<h2 id="缓存穿透"><a class="markdownIt-Anchor" href="#缓存穿透"></a> 缓存穿透</h2>
<h3 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h3>
<blockquote>
<p>缓存穿透指：</p>
<p>当请求传递到后端服务器时，会先查询Redis 缓存中是否存在该 key 值，不存在，则会请求db 去查询。</p>
<p>当发生程序被攻击时，出现大量空值的key 会去请求，以拖垮服务器查询，导致程序崩溃。</p>
</blockquote>
 <span id="more"></span>
<h3 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法</h3>
<ol>
<li>缓存空值</li>
<li>布隆过滤器（key 校验）</li>
</ol>
<h4 id="缓存空值"><a class="markdownIt-Anchor" href="#缓存空值"></a> 缓存空值</h4>
<blockquote>
<p>将数据库中查询为空的key 也存储在缓存中，当再次查询时，则可以避免查询数据库。</p>
</blockquote>
<p>缓存空值会出现两个问题：</p>
<ol>
<li>空值缓存，会占用更多空间，需要设置较短的过期时间。（若是攻击，会很麻烦）</li>
<li>缓存和存储的数据会有一段时间不一致，有业务影响。</li>
</ol>
<h4 id="布隆过滤器"><a class="markdownIt-Anchor" href="#布隆过滤器"></a> 布隆过滤器</h4>
<h5 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h5>
<blockquote>
<ol>
<li>
<p>利用 k 个哈希函数，对元素进行计算</p>
</li>
<li>
<p>根据哈希值，将位数据组对应的下标置为1</p>
</li>
<li>
<p>当需要查询时，重复过程 <code>1</code>，若查询对应位数据下标不全为1，则不存在，全为1，则存在</p>
</li>
</ol>
</blockquote>
<p>优点：</p>
<blockquote>
<p>数据空间小，不用存储数据本身</p>
</blockquote>
<p>缺点：</p>
<blockquote>
<ul>
<li>元素可以添加到集合中，不能删除</li>
<li>匹配结果是“<code>绝对不在集合中</code>”，并不能保证匹配成功的值已经在集合中</li>
<li>当集合快满时，即接近预估最大容量时，误报的概率会变大</li>
<li>数据占用空间放大</li>
</ul>
</blockquote>
<h2 id="缓存击穿"><a class="markdownIt-Anchor" href="#缓存击穿"></a> 缓存击穿</h2>
<h3 id="问题描述-2"><a class="markdownIt-Anchor" href="#问题描述-2"></a> 问题描述</h3>
<blockquote>
<p>当<font  color=red><strong>单个</strong></font>热点key 的缓存数据，<font  color=red>****</font>刚好过了有效时间，此时大量请求涌入，会导致数据查询流量大增，数据库可能崩溃。</p>
</blockquote>
<h3 id="解决方法-2"><a class="markdownIt-Anchor" href="#解决方法-2"></a> 解决方法</h3>
<ol>
<li>互斥锁</li>
<li>热点数据永不过期</li>
</ol>
<h4 id="互斥锁"><a class="markdownIt-Anchor" href="#互斥锁"></a> 互斥锁</h4>
<blockquote>
<p>当第一个数据库查询请求发起后，就将缓存中该数据上锁；</p>
<p>此时其他查询该缓存的请求，被阻塞等待；</p>
<p>当第一个请求完成，然后更新缓存，释放锁；</p>
<p>其他查询请求后续可以查询到。</p>
</blockquote>
<p><strong>注意</strong>：互斥锁可以避免某一个热点，但实际情况里往往是一批。</p>
<p>将缓存的过期时间，设置为随机值，会降低这一概率。</p>
<h4 id="热点数据永不过期"><a class="markdownIt-Anchor" href="#热点数据永不过期"></a> 热点数据永不过期</h4>
<blockquote>
<p>从缓存层面，确实没有设置过期时间，也就是物理不过期</p>
<p>从功能层面，每一个value 都有对应逻辑时间，过期后，单独重新构建。</p>
</blockquote>
<p><strong>注意</strong>：在重新构建期间，可能会出现数据不一致的情况。</p>
<p><strong>比较</strong>：</p>
<ul>
<li>互斥锁
<ul>
<li>存在死锁和阻塞风险</li>
<li>较好的降低后端负载，一致性比较好</li>
</ul>
</li>
<li>永远不过期
<ul>
<li>数据不一致情况</li>
<li>代码复杂度会增大</li>
</ul>
</li>
</ul>
<h2 id="缓存雪崩"><a class="markdownIt-Anchor" href="#缓存雪崩"></a> 缓存雪崩</h2>
<h3 id="问题描述-3"><a class="markdownIt-Anchor" href="#问题描述-3"></a> 问题描述</h3>
<blockquote>
<p>指缓存中大量的数据同时过期，导致大量请求在短时间内直接到达数据库，对数据库造成巨大压力。</p>
</blockquote>
<h3 id="解决方法-3"><a class="markdownIt-Anchor" href="#解决方法-3"></a> 解决方法</h3>
<ol>
<li>过期时间分散</li>
<li>缓存预热</li>
<li>限流降级</li>
</ol>
<h4 id="过期时间分撒"><a class="markdownIt-Anchor" href="#过期时间分撒"></a> 过期时间分撒</h4>
<blockquote>
<p>使用 expire 命令设置过期时间，引入随机过期时间机制</p>
</blockquote>
<h4 id="缓存预热"><a class="markdownIt-Anchor" href="#缓存预热"></a> 缓存预热</h4>
<blockquote>
<p>使用 CacheWarmer 等工具在系统启动前预热缓存</p>
</blockquote>
<h4 id="限流降级"><a class="markdownIt-Anchor" href="#限流降级"></a> 限流降级</h4>
<blockquote>
<p>使用限流算法控制访问数据库的请求速率，当缓存失效导致请求过多时，进行降级处理。</p>
<p>工具：<code>Hystrix</code>、<code>Sentinel</code> 等</p>
</blockquote>
<h2 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章"></a> 参考文章</h2>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80OTY1ODQ1NDU=">硬核 | Redis 布隆（Bloom Filter）过滤器原理与实战 - 知乎 (zhihu.com)<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>IT技术</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 了解与安装</title>
    <url>/2019/08/15/Redis/</url>
    <content><![CDATA[<h2 id="redis"><a class="markdownIt-Anchor" href="#redis"></a> Redis</h2>
<h3 id="redis相关问题"><a class="markdownIt-Anchor" href="#redis相关问题"></a> Redis相关问题</h3>
<ul>
<li>Redis 和 memcached 区别？</li>
</ul>
<p>对比 Memcache的共同点：</p>
<ol>
<li>redis 是缓存到内存中，</li>
<li>属于 key - value</li>
</ol>
<p>不同的;</p>
<ol>
<li>redis 可以做持久化（将数据保存磁盘上）</li>
<li>支持更丰富的数据类型，value 可以是字符串，链表，哈希，memcache只支持字符串</li>
</ol>
<ul>
<li>如何高效的找到redis中所有以oldboy开头的key</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">key oldboy<span class="operator">*</span></span><br></pre></td></tr></table></figure>
<ul>
<li>什么是一致性哈希</li>
</ul>
<blockquote>
<p>首先一致性哈希满足以下几个方面：<br />
平衡性<br />
单调性<br />
分散性<br />
负载<br />
平滑性<br />
<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWUxNDc2ZWYyNjVkYTBiOGQ0MTllZjI=">https://juejin.im/post/5ae1476ef265da0b8d419ef2<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>将整个哈希空间虚拟成一个0 ~ 2^32无符号的圆形，然后把每个服务器进行哈希，然后将对应ip哈希到邻近服务器上。</p>
<ul>
<li>redis是单进程单线程的吗？</li>
</ul>
<p>首先redis是单线程单进程，如果需要，只能多开几个redis进程</p>
<ol>
<li>本身性能很高，每秒处理10万次的读写</li>
<li>代码更清晰，逻辑更简单</li>
<li>不用考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗</li>
<li>不存在多进程或多线程导致的切换而消耗CPU</li>
<li>事件处理类型是IO多路复用</li>
<li>将并行事件，串行化发生。</li>
</ol>
<ul>
<li>redis中数据库默认是多少个db及作用？</li>
</ul>
<blockquote>
<p>共16 db，存储key-value格式信息。相当于不同的库</p>
</blockquote>
<ul>
<li>如果redis中的某个列表中的数据量非常大，如果实现循环显示每一个值？</li>
</ul>
<blockquote>
<p>利用xrange 方法实现生成器循环，然后yield生成器</p>
</blockquote>
<ul>
<li>redis 如何实现主从复制？以及数据同步机制？</li>
</ul>
<p>redis 是一个非关系型数据库（No -SQL）</p>
<p>储存结构 字节 python读取时</p>
<h3 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h3>
<hr />
<ul>
<li><a href="#redisobject">redisObject</a></li>
<li><a href="#junmp">string</a>
<ul>
<li><a href="#jump">int</a>（存放整数类型）</li>
<li><a href="#jump">SDS</a>（存放浮点、字符串、字节类型）</li>
</ul>
</li>
<li><a href="#jump">list</a>
<ul>
<li><a href="#jump">链表</a>（linkedlist）双向链表</li>
<li><a href="#jump">压缩列表</a>（ziplist）压缩列表</li>
</ul>
</li>
<li><a href="#jump">hash</a>
<ul>
<li><a href="#jump">压缩列表</a> （以上述相同）</li>
<li><a href="#jump">字典</a>（使用散列表解决，解决冲突的方法是链表法）</li>
</ul>
</li>
<li><a href="#jump">set</a></li>
<li><a href="#jump">zset</a></li>
<li><a href="#jump">跳表</a> skiplist</li>
</ul>
<h4 id="span-idredisobjectredisobjectspan"><a class="markdownIt-Anchor" href="#span-idredisobjectredisobjectspan"></a> <span id="redisobject">redisObject</span></h4>
<hr />
<p>Redis的key是顶层模型，value是扁平化的。Redis中，所有value都是一个object，它的结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span>&#123;</span></span><br><span class="line">  <span class="type">unsigned</span> [type] <span class="number">4</span>;</span><br><span class="line">  <span class="type">unsigned</span> [encoding] <span class="number">4</span>;</span><br><span class="line">  <span class="type">unsigned</span> [lru] REDIS_LRU_BITS;</span><br><span class="line">  <span class="type">int</span> refcount;</span><br><span class="line">  <span class="type">void</span> *prt;</span><br><span class="line">&#125; robj;</span><br></pre></td></tr></table></figure>
<p>相关字段说明：</p>
<ul>
<li>type：数据类型，例如string、hash、list等。</li>
<li>encoding：内部编码，就是数据结构。指的是当前这个value底层是用的什么数据结构。因为同一个数据类型底层也有多种数据结构的实现。</li>
<li>REDIS_LRU_BITS：当前对象可以保留的时长。在键的过期策略中用到。</li>
<li>refcount：对象引用计数，用于GC。</li>
<li>ptr：指针，指向以encoding的方式实现这个对象的实际地址。</li>
</ul>
<h4 id="span-idstringstringspan"><a class="markdownIt-Anchor" href="#span-idstringstringspan"></a> <span id="string">string</span></h4>
<hr />
<p>string类型有两种底层存储结构。Redis会根据存储的数据及用户的操作指令自动选择合适的结构：</p>
<ul>
<li>int：存放整型类型</li>
<li>SDS：存放浮点、字符串、字节类型</li>
</ul>
<blockquote>
<p>SDS：简单动态字符串（simple dynamic string）</p>
</blockquote>
<h5 id="span-idsdssdsspan"><a class="markdownIt-Anchor" href="#span-idsdssdsspan"></a> <span id="SDS">SDS</span></h5>
<p>SDS的内部数据结构：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line">  <span class="comment">// buf 中已占用的字符长度</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> len;</span><br><span class="line">  <span class="comment">// buf 中剩余可用的字符长度</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> <span class="built_in">free</span>;</span><br><span class="line">  <span class="comment">// 数据空间</span></span><br><span class="line">  <span class="type">char</span> buf[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其底层就是char数组。buf最大容量就是512M，可以放字符串、浮点数、字节。但为什么没用数组？</p>
<p>因为buf 会有动态扩容和缩容的需求。如果直接使用数组，那每次对字符串的修改都会导致重新分配内存，效率很低。</p>
<p>buf扩容过程如下：</p>
<ul>
<li>如果修改后len长度将小于1M，这时分配给 free 的大小 == len。<br />
例如修改后10 字节，那么free 为10，buf 实际长度变成了10 + 10 + 1 = 21 byte</li>
<li>如果修改后len长度 &gt;= 1M，这时分配给 free 的大小 == 1M。<br />
例如修改后 30M，那么给 free是 1M，buf实际长度变成了30M + 1M + 1byte</li>
</ul>
<p>惰性空间释放指的是当字符串缩短时，并没有真正的缩容，而是移动 free 的指针。这样一来字符串长度增加时，就不用重新分配内存了。但这样会造成内存的浪费，redis 提供了api来真正释放内存。</p>
<h4 id="span-idlistlistspan"><a class="markdownIt-Anchor" href="#span-idlistlistspan"></a> <span id="list">list</span></h4>
<hr />
<p>list 底层有两种数据结构：链表linklist和压缩列表ziplist。当list元素个数少且元素内容长度不大时，使用ziplist实现，否则linklist。</p>
<h5 id="链表"><a class="markdownIt-Anchor" href="#链表"></a> 链表</h5>
<p>Redis使用的是双向列表。为了方便操作，使用list结构来维持链表。如图：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line">  <span class="comment">// 表头节点</span></span><br><span class="line">  listNode *head;</span><br><span class="line">  <span class="comment">// 表尾节点</span></span><br><span class="line">  listNode *tail;</span><br><span class="line">  <span class="comment">// 链表所包含的节点数量</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> len;</span><br><span class="line">  <span class="comment">// 节点值复制函数</span></span><br><span class="line">  <span class="type">void</span> *(*dup)(<span class="type">void</span> *ptr);</span><br><span class="line">  <span class="comment">// 节点值释放函数</span></span><br><span class="line">  <span class="type">void</span> *(*<span class="built_in">free</span>)(<span class="type">void</span> *ptr);</span><br><span class="line">  <span class="comment">// 节点值对比函数</span></span><br><span class="line">  <span class="type">int</span> (*match)(<span class="type">void</span> *ptr, <span class="type">void</span> *key);</span><br><span class="line">&#125;<span class="built_in">list</span>;</span><br></pre></td></tr></table></figure>
<p>data存的其实就是一个指针。链表里面的元素是上面介绍的string。因为是双向链表，所以可以方便地把它当成一个栈或者队列使用。</p>
<h5 id="压缩列表"><a class="markdownIt-Anchor" href="#压缩列表"></a> 压缩列表</h5>
<p>与上面链表对应，有点类似数组，通过一片连续的内存空间来存储数据。与数组唯一不同点：允许存储的结构大小不同。每个节点上增加一个length属性记录这个节点的长度，这样方便地得到下一个节点的位置。</p>
<p>上图字段的含义：</p>
<ul>
<li>zlbytes：列表的长度</li>
<li>zltail：指向最末元素</li>
<li>zllen：元素的个数</li>
<li>entry：元素的内容，里面记录了前一个Entry的长度，用于方便双向遍历</li>
<li>zlend：恒为0xFF，作为ziplist的定界符</li>
</ul>
<p>压缩列表不只是list的底层，也是hash的底层实现之一。当hash的元素个数少且内容长度不大时，使用压缩列表来实现。</p>
<h4 id="span-idhashhashspan"><a class="markdownIt-Anchor" href="#span-idhashhashspan"></a> <span id="hash">hash</span></h4>
<hr />
<p>Hash 底层有两种实现：压缩列表和字典（dict）。</p>
<h5 id="字典"><a class="markdownIt-Anchor" href="#字典"></a> 字典</h5>
<p>字典类似java中map，python中dict。与java中hashmap类似，redis底层也是使用的散列表作为字典的实现，解决hash冲突使用的是链表法。Redis同样使用了一个数据结构来维持散列表：</p>
<p>在键增加或者减少时，会扩容或者缩容，并且进行rehash，根据hash值重新计算索引值。如果字典太大怎么办？</p>
<p>为了解决一次性扩容耗时过多的情况，可以将扩容操作穿插在插入操作的过程中，分批完成。当负载因子触达阈值之后，只能申请新空间，但并不将老的数据搬移到新散列表中。当有新数据要插入时，将新数据插入新散列表中，并且从老的散列表中拿出一个数据放入到新散列表。每次插入一个数据到散列表，都重复上面的过程。经过多次插入操作之后，老的散列表中的数据就一点一点全部搬移到新散列表中了。这样没有了集中的一次一次性数据搬移，插入操作就都变得很快乐。这个被称为渐进式rehash。</p>
<h4 id="span-idsetsetspan"><a class="markdownIt-Anchor" href="#span-idsetsetspan"></a> <span id="set">set</span></h4>
<hr />
<p>set里面没有重复的集合。set的实现比较简单。如果是整数类型，就直接使用整数集合intset。使用二分查找来辅助，速度还是挺快的。不过在插入的时候由于要移动元素，时间复杂度是 O(N)。</p>
<p>如果不是整数类型，就是用上面在hash那一节介绍的字典。key 为 set 的值，value 为空。</p>
<h4 id="span-idzsetzsetspan"><a class="markdownIt-Anchor" href="#span-idzsetzsetspan"></a> <span id="zset">zset</span></h4>
<hr />
<p>zset是可排序的set。与hash的实现方式类似，如果元素个数不大，就使用压缩列表ziplist来存储。不过由于zset包含了score的排序信息，所以在ziplist内部，是按照score排序递增来存储的。意味着每次插入数据都要移动之后的数据。</p>
<h4 id="span-id跳表spanskiplist"><a class="markdownIt-Anchor" href="#span-id跳表spanskiplist"></a> <span id="">跳表</span>（skiplist）</h4>
<p>跳表（skiplist）是另一种实现dict的数据结构。跳表是对链表的一个增强。我们在使用链表的时候，即使元素有序排列的，但如果要查找一个元素，也从头查找下去，复杂度是O（N）。而跳表顾名思义，就是跳跃了一些元素，可以抽象多层。</p>
<p>如图所示，比如我们要查找8，先在最上层L2查找，发现在1 和9 之间；然后去L1层查找，发现在5和9之间；然后去L0查找，发现在7和9之间，然后找到8。</p>
<p>当元素较多时，跳跃表可以显著减少查找次数。</p>
<p>同list类似，Redis内部也不是直接使用的跳跃表，而是使用了一个自定义的数据结构来持有跳跃表。下图左边蓝色部分是skiplist，右边是4个zskiplistNode。zskiplistNode内部有很多层L1、L2等，指针指向这一层的下一个结点。BW是回退指针，用于查找的时候回退。然后下面是score和对象本身object。</p>
]]></content>
      <categories>
        <category>IT技术</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>scrapy 爬虫</title>
    <url>/2019/09/20/Scrapy/</url>
    <content><![CDATA[<h1 id="scrapy"><a class="markdownIt-Anchor" href="#scrapy"></a> Scrapy</h1>
<p>scrapy 框架，异步爬虫框架。</p>
<h3 id="同步与异步"><a class="markdownIt-Anchor" href="#同步与异步"></a> 同步与异步</h3>
<p>同步：下一个方法依赖上一个方法，上一个没执行完，则下一个不会执行。</p>
<p>异步：下一个方法不依赖上一个方法，上一个没执行完，下一个依旧会执行。</p>
<p>组成：Pipeline  、Scheduler、Downloader、Spiders。以及Scrapy Engine 引擎（队列）</p>
<p>中间件：Spider Middlewares、Downloader Middlewares</p>
<p>Pipeline 主要用于处理IO 存储，写入本地获取的西悉尼</p>
<p>Scheduler 调度器，将所有的 url 发送给Downloader，并且去重网址，整合队列</p>
<p>Downloader  处理请求 requests，将 responses 返回给 Spiders</p>
<p>Spiders 是我们的爬虫文件</p>
<p>Scrapy Engine 引擎控制整个运转</p>
<p>spider middlewares 一般不用，爬虫将请求交给调度器时，进行处理。</p>
<p>Downloader Middlewares  加入请求头，加入代理 ip</p>
<h3 id="初次使用-scrapy"><a class="markdownIt-Anchor" href="#初次使用-scrapy"></a> 初次使用 scrapy</h3>
<p>安装 scrapy</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure>
<p>创建项目</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建项目</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; scrapy startproject  项目名字</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; <span class="built_in">cd</span>   项目名字</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建爬虫文件</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; scrapy genspider  爬虫名字  <span class="string">&quot;host 地址&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行爬虫文件</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; scrapy crawl  爬虫名字</span></span><br></pre></td></tr></table></figure>
<p>常用配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Settings中的常用配置： </span><br><span class="line">	USER_AGENT = <span class="string">&quot;&quot;</span> <span class="comment"># User-Agent </span></span><br><span class="line">	ROBOTSTXT_OBEY = <span class="literal">True</span>|<span class="literal">False</span> <span class="comment"># 是否遵守机器人协议 </span></span><br><span class="line">	DEFAULT_REQUEST_HEADERS = &#123;&#125; <span class="comment"># 默认Headers </span></span><br><span class="line">	CONCURRENT_REQUESTS = <span class="number">16</span> <span class="comment"># 下载器最大处理的请求数 </span></span><br><span class="line">	DOWNLOAD_DELAY = <span class="number">3</span> <span class="comment"># 下载延时 </span></span><br><span class="line">	SPIDER_MIDDLEWARES <span class="comment"># Spider中间件 </span></span><br><span class="line">	DOWNLOADER_MIDDLEWARES <span class="comment"># Downloader中间件 </span></span><br><span class="line">	ITEM_PIPELINES <span class="comment"># 管道文件</span></span><br></pre></td></tr></table></figure>
<p>创建文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; scrapy genspider s1 <span class="string">&quot;blog.csdn.net&quot;</span></span></span><br></pre></td></tr></table></figure>
<p>创建好的爬虫文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">S1Spider</span>(scrapy.Spider):</span><br><span class="line">    <span class="comment"># 爬虫名字</span></span><br><span class="line">    name = <span class="string">&#x27;s1&#x27;</span></span><br><span class="line">    <span class="comment"># 如果 url 地址的 host 不属于 allowed_domains, 则过滤掉给请求</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;blog.csdn.net&#x27;</span>]</span><br><span class="line">    <span class="comment"># 项目启动时，访问的 url 地址</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://blog.csdn.net/&#x27;</span>]</span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 访问start_urls, 得到响应后调用的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):  <span class="comment"># reponse 为响应对象</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">  	</span><br></pre></td></tr></table></figure>
<p>下面方法执行相当于 start_urls ,但是可以跳过限定的请求头</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">start_requests</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">yield</span> scrapy.Request(				 <span class="comment"># 向调度器发送一个 Request 对象</span></span><br><span class="line">    	url = <span class="string">&#x27;http://edu.csdn.net&#x27;</span>,      <span class="comment"># 请求地址，默认 GET 方式</span></span><br><span class="line">        callback = self.parse2  		  <span class="comment"># 得到响应后， 调用的函数 </span></span><br><span class="line">    	)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse2</span>(<span class="params">self, respones</span>):				 <span class="comment"># 得到响应后， 调用的函数</span></span><br><span class="line">    <span class="built_in">print</span>(response.body)				<span class="comment"># 得到字节类型的数据</span></span><br></pre></td></tr></table></figure>
<p>爬取网页时，一般默认机器人设置为 False</p>
<p>加入请求头</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在这个中间件中添加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Scrapy01DownloaderMiddleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># Not all methods need to be defined. If a method is not defined,</span></span><br><span class="line">    <span class="comment"># scrapy acts as if the downloader middleware does not modify the</span></span><br><span class="line">    <span class="comment"># passed objects.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">        request.headers = Headers(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&#x27;User-Agent&#x27;</span>: user_agent.get_user_agent_pc()</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Called for each request that goes through the downloader</span></span><br><span class="line">        <span class="comment"># middleware.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Must either:</span></span><br><span class="line">        <span class="comment"># - return None: continue processing this request</span></span><br><span class="line">        <span class="comment"># - or return a Response object</span></span><br><span class="line">        <span class="comment"># - or return a Request object</span></span><br><span class="line">        <span class="comment"># - or raise IgnoreRequest: process_exception() methods of</span></span><br><span class="line">        <span class="comment">#   installed downloader middleware will be called</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<p>开启这个中间件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py 在这个中间件取消注释</span></span><br><span class="line"></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">   <span class="string">&#x27;scrapy01.middlewares.Scrapy01DownloaderMiddleware&#x27;</span>: <span class="number">543</span>, <span class="comment"># 数字表示优先级，越小越高 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加入代理 Ip</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">        request.headers = Headers(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&#x27;User-Agent&#x27;</span>: user_agent.get_user_agent_pc()</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">        request.meta[<span class="string">&#x27;proxy&#x27;</span>] = <span class="string">&#x27;http://IP:PORT&#x27;</span> + ur.urlopen(<span class="string">&quot;代理 ip 接口&quot;</span>).read().decode(<span class="string">&#x27;utf-8&#x27;</span>).strip()</span><br></pre></td></tr></table></figure>
<p>为了方便我们使用，可以增加一个 <span class="exturl" data-url="aHR0cDovL3N0YXJ0LnB5">start.py<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</span><br><span class="line"></span><br><span class="line">cmdline.execute(<span class="string">&#x27;scrapy crawl s1&#x27;</span>.split())</span><br></pre></td></tr></table></figure>
<p>保存文件，修改文件如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parse2</span>(<span class="params">self, response</span>):</span><br><span class="line">      <span class="comment"># print(&quot;--&quot; * 30)</span></span><br><span class="line">      <span class="comment"># print(response.body.decode(&#x27;utf-8&#x27;))</span></span><br><span class="line">      <span class="comment"># print(&quot;--&quot; * 30)</span></span><br><span class="line">      data = response.body.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">      item = &#123;&#125;</span><br><span class="line">      item[<span class="string">&#x27;data&#x27;</span>] = data</span><br><span class="line">      <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure>
<p>在 setting 中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启管道文件，settings.py 中</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&#x27;scrapy01.pipelines.Scrapy01Pipeline&#x27;</span>: <span class="number">300</span>, <span class="comment"># 数字越小优先级越高， </span></span><br><span class="line">   <span class="string">&#x27;scrapy01.pipelines.Scrapy01Pipeline&#x27;</span>: <span class="number">300</span>, <span class="comment"># 如果再加入一个，那么会将文件交给下一个管道文件处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="项目说明"><a class="markdownIt-Anchor" href="#项目说明"></a> 项目说明</h3>
<table>
<thead>
<tr>
<th style="text-align:left">关键字</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">projectcode</td>
<td style="text-align:left">项目编号</td>
</tr>
<tr>
<td style="text-align:left">web</td>
<td style="text-align:left">信息来源网站（例如：必联网）</td>
</tr>
<tr>
<td style="text-align:left">keyword</td>
<td style="text-align:left">关键字</td>
</tr>
<tr>
<td style="text-align:left">detail_url</td>
<td style="text-align:left">招标详细页网址</td>
</tr>
<tr>
<td style="text-align:left">title</td>
<td style="text-align:left">第三方网站发布标题</td>
</tr>
<tr>
<td style="text-align:left">toptype</td>
<td style="text-align:left">信息类型</td>
</tr>
<tr>
<td style="text-align:left">province</td>
<td style="text-align:left">归属省份</td>
</tr>
<tr>
<td style="text-align:left">product</td>
<td style="text-align:left">产品范畴</td>
</tr>
<tr>
<td style="text-align:left">industry</td>
<td style="text-align:left">归属行业</td>
</tr>
<tr>
<td style="text-align:left">tendering_manner</td>
<td style="text-align:left">招标方式</td>
</tr>
<tr>
<td style="text-align:left">publicity_date</td>
<td style="text-align:left">招标公示日期</td>
</tr>
<tr>
<td style="text-align:left">expiry_date</td>
<td style="text-align:left">招标截止日期</td>
</tr>
</tbody>
</table>
<h3 id="log日志"><a class="markdownIt-Anchor" href="#log日志"></a> log日志</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LOG_FILE = <span class="string">&quot;日志文件地址&quot;</span></span><br><span class="line">LOG_LEVEL = <span class="string">&quot;日志级别&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志级别：</span></span><br><span class="line">	CRITICAL  严重错误 (critical)</span><br><span class="line">	ERROR     一般错误(regular errors)</span><br><span class="line">    WARNING   警告信息(warning messages)</span><br><span class="line">    INFO      一般信息(informational messages)</span><br><span class="line">    DEBUG    调式信息 (debugging messages)</span><br></pre></td></tr></table></figure>
<h3 id="pymysql"><a class="markdownIt-Anchor" href="#pymysql"></a> pymysql</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">mysql_conn = pymysql.Connection(</span><br><span class="line">		host=<span class="string">&#x27;localhost&#x27;</span>,  <span class="comment"># 主机地址</span></span><br><span class="line">    	port=<span class="number">3306</span>,         <span class="comment"># 端口号</span></span><br><span class="line">    	user=<span class="string">&#x27;root&#x27;</span>,       <span class="comment"># 登录用户</span></span><br><span class="line">    	password=<span class="string">&quot;&quot;</span>,       <span class="comment"># 登录密码</span></span><br><span class="line">    	database=<span class="string">&#x27;连接数据库名字&#x27;</span>,</span><br><span class="line">    	charset=<span class="string">&#x27;utf8&#x27;</span>,    <span class="comment"># utf-8 得编码</span></span><br><span class="line">	)</span><br><span class="line"><span class="comment"># 创建光标对象</span></span><br><span class="line">cs = mysql_conn.cursor()</span><br><span class="line"><span class="comment"># 定义要执行得SQL 语句</span></span><br><span class="line">cs.execute(<span class="string">&#x27;SQL&#x27;</span>)</span><br><span class="line">mysql_conn.commit()</span><br></pre></td></tr></table></figure>
<p>Redis的数据库结构</p>
<p>Redis 中有16个数据库</p>
<p>select [ index ] 切换数据库</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>表示</th>
</tr>
</thead>
<tbody>
<tr>
<td>字符串（数字属于特殊的字符串）</td>
<td>String</td>
</tr>
<tr>
<td>哈希（字典）</td>
<td>Hash</td>
</tr>
<tr>
<td>列表（有序，相当于 python 中的 list ）</td>
<td>List</td>
</tr>
<tr>
<td>无序集合</td>
<td>Set</td>
</tr>
<tr>
<td>有序集合</td>
<td>Zset</td>
</tr>
</tbody>
</table>
<p>键的操作：</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>查找</td>
<td>keys [ pattern ]</td>
</tr>
<tr>
<td>删除</td>
<td>del [ key ]</td>
</tr>
<tr>
<td>检查是否存在</td>
<td>exists [ key ]</td>
</tr>
<tr>
<td>查看键的类型</td>
<td>type [ key ]</td>
</tr>
</tbody>
</table>
<h3 id="scrapy-redis-原理"><a class="markdownIt-Anchor" href="#scrapy-redis-原理"></a> scrapy-redis 原理</h3>
<p>将调度器和</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动Scrapy-Redis去重过滤器，取消Scrapy的去重功能 </span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">&quot;scrapy_redis.dupefilter.RFPDupeFilter&quot;</span> </span><br><span class="line"><span class="comment"># 启用Scrapy-Redis的调度器，取消Scrapy的调度器 </span></span><br><span class="line">SCHEDULER = <span class="string">&quot;scrapy_redis.scheduler.Scheduler&quot;</span> </span><br><span class="line"><span class="comment"># Scrapy-Redis断点续爬 </span></span><br><span class="line">SCHEDULER_PERSIST = <span class="literal">True</span> </span><br><span class="line"><span class="comment"># 配置Redis数据库的连接 </span></span><br><span class="line">REDIS_URL = <span class="string">&#x27;redis://127.0.0.1:6379&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>IT技术</category>
        <category>scrapy</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 初识</title>
    <url>/2019/06/23/Vue.js/</url>
    <content><![CDATA[<h1 id="vuejs"><a class="markdownIt-Anchor" href="#vuejs"></a> Vue.js</h1>
<h2 id="单页面应用程序"><a class="markdownIt-Anchor" href="#单页面应用程序"></a> 单页面应用程序</h2>
<blockquote>
<p>Single Page Application</p>
<p>简称 SPA</p>
</blockquote>
<h3 id="网站交互方式"><a class="markdownIt-Anchor" href="#网站交互方式"></a> 网站交互方式</h3>
<ul>
<li>经典的多页面
<ul>
<li>前后端糅合在一起，开发效率低</li>
<li>用户体验一般，点击刷新跳转，等待时间过长</li>
<li>每个页面都要重新加载</li>
<li>有利于 SEO 搜索引擎搜索（蜘蛛会爬链接）</li>
</ul>
</li>
<li>现代式的单页面
<ul>
<li>开发方式好： 前后端分离
<ul>
<li>服务端不关心页面，只关心数据</li>
<li>客户端不关心数据库及操作，只关心通过接口拿数据和服务端交互，处理页面</li>
</ul>
</li>
<li>用户体验好，像客户端</li>
<li>只需要加载渲染局部视图</li>
<li>单页面应用开发技术复杂，所以有很多框架
<ul>
<li>AngularJS</li>
<li>ReactJs</li>
<li>VueJS</li>
</ul>
</li>
<li>单页面技术很成熟了，无法兼容低版本浏览器</li>
<li>现在除了电商网站，其实已经很少需要兼容了</li>
<li>大部分IE9以上</li>
<li>单页面由于数据异步加载，所以不利于 SEO 搜索</li>
<li>手机 Web 网页</li>
<li>管理系统</li>
</ul>
</li>
</ul>
<h3 id="多页面以服务端为主导前后端混合"><a class="markdownIt-Anchor" href="#多页面以服务端为主导前后端混合"></a> 多页面：以服务端为主导，前后端混合</h3>
<ul>
<li>PHP案列，<code>.php</code>文件</li>
</ul>
<h3 id="单页面前后端分离各司其职"><a class="markdownIt-Anchor" href="#单页面前后端分离各司其职"></a> 单页面：前后端分离，各司其职</h3>
<ul>
<li>服务端只处理数据</li>
<li>前端只处理页面</li>
</ul>
<h3 id="模拟前后端分离模式"><a class="markdownIt-Anchor" href="#模拟前后端分离模式"></a> 模拟前后端分离模式</h3>
<ul>
<li>项目立项</li>
<li>需求分析</li>
<li>服务端的工作
<ul>
<li>需求设计</li>
<li>设计数据库</li>
<li>接口设计（有时候也需要前端参与其中）</li>
<li>接口（处理数据）开发</li>
</ul>
</li>
<li>前端的工作
<ul>
<li>需求分析</li>
<li>写页面</li>
<li>页面写好写功能</li>
<li>通过接口和服务端进行交互</li>
</ul>
</li>
</ul>
<h4 id="前后端分离多页"><a class="markdownIt-Anchor" href="#前后端分离多页"></a> 前后端分离：多页</h4>
<h4 id="前后端分离单页"><a class="markdownIt-Anchor" href="#前后端分离单页"></a> 前后端分离：单页</h4>
<h3 id="安装-http-server"><a class="markdownIt-Anchor" href="#安装-http-server"></a> 安装 http Server</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install http-server -g </span><br><span class="line">//启动本地点击cmd</span><br><span class="line">hs -c-1 -o   </span><br><span class="line">//改端口号</span><br><span class="line">http-server -p 8001</span><br></pre></td></tr></table></figure>
<h2 id="前端三大开发框架"><a class="markdownIt-Anchor" href="#前端三大开发框架"></a> 前端三大开发框架</h2>
<blockquote>
<p>单页开发其实比较复杂的，需要有一定的技术职称</p>
<p>所有有了我们现在需要学习的三大框架</p>
</blockquote>
<ul>
<li>Angular
<ul>
<li>09年诞生</li>
<li>Google</li>
<li>目的：开发单页面更方便</li>
<li>最主要是带来 MVVM 开发模式</li>
<li>MVVM 一句话：数据驱动视图，不操作DOM</li>
</ul>
</li>
<li>React
<ul>
<li>Facebook 公司自己也开发了一个 Web 框架</li>
<li>组件化</li>
</ul>
</li>
<li>Vue
<ul>
<li>Vue 作者：尤雨溪</li>
<li>早期有个人开发</li>
<li>Vue 借鉴了angular 和 react 之长，自己做了一个，后起之秀</li>
</ul>
</li>
</ul>
<h2 id="vuejs介绍"><a class="markdownIt-Anchor" href="#vuejs介绍"></a> Vue.js介绍</h2>
<p>vue.js只处理界面，跟服务端没关系</p>
<h3 id="vue-特点"><a class="markdownIt-Anchor" href="#vue-特点"></a> Vue 特点</h3>
<p>Vue核心特点：</p>
<p>— MVVM</p>
<p>—双向数据绑定</p>
<p>—组件化</p>
<p>—渐进式</p>
<h3 id="mvvm"><a class="markdownIt-Anchor" href="#mvvm"></a> MVVM</h3>
<h3 id="创建实例"><a class="markdownIt-Anchor" href="#创建实例"></a> 创建实例</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">		<span class="number">0.</span> npm install vue</span><br><span class="line">		<span class="number">1.</span> 引包</span><br><span class="line">		<span class="number">2.</span> <span class="keyword">new</span> <span class="title class_">Vue</span> 得到 <span class="title class_">Vue</span> 实例</span><br><span class="line">			vue 这哪是可以理解为一个高级的模板引擎</span><br><span class="line">	 --&gt;</span><br><span class="line">	 <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">	 <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	 	<span class="comment">//得到 Vue 实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	 	<span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	 		<span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,<span class="comment">// el 选项的作用就是管理模板的入口节点</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	 		<span class="attr">data</span>: &#123;<span class="comment">// data 中数据叫做响应式数据，数据驱动视图</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	 			<span class="attr">message</span>: <span class="string">&#x27;hello Vue.js!&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	 		&#125;.$mount(<span class="string">&#x27;#app&#x27;</span>)<span class="comment">//这种方式有明显的动作意图</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	 	&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	 </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="todomvc项目"><a class="markdownIt-Anchor" href="#todomvc项目"></a> TodoMVC项目</h2>
<h3 id="browser-sync官网"><a class="markdownIt-Anchor" href="#browser-sync官网"></a> browser-sync官网</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYnJvd3NlcnN5bmMuaW8v">https://www.browsersync.io/<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="安装browsersync"><a class="markdownIt-Anchor" href="#安装browsersync"></a> 安装browsersync</h3>
<p>全局安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g browser-sync</span><br></pre></td></tr></table></figure>
<p>只在文件下安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev browser-sync</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">或者</span></span><br><span class="line">npm i -D browser-sync</span><br></pre></td></tr></table></figure>
<h3 id="配置browser-sync"><a class="markdownIt-Anchor" href="#配置browser-sync"></a> 配置browser-sync</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"> 	<span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span><span class="string">&quot;browser-sync start --server --files \&quot;*.html,css/*.css,js/*.js\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"> 	<span class="attr">&quot;start&quot;</span><span class="punctuation">:</span><span class="string">&quot;npm run dev&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>切记不能输错 server 和 files 否则不会启动服务本地文件，还有上面是监听 html 和 css js 文件</p>
<h3 id="启动服务"><a class="markdownIt-Anchor" href="#启动服务"></a> 启动服务</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">或者</span></span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>
<h2 id="组件化"><a class="markdownIt-Anchor" href="#组件化"></a> 组件化</h2>
<p>将网页分成每个界面（组件）</p>
<p>下载 vue-cli工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -g vue-cli</span><br><span class="line">npm install -g @vue/cli 安装使用</span><br><span class="line"></span><br><span class="line">创建项目..到你的文件目录下创建文件</span><br><span class="line">vue create hell-world</span><br></pre></td></tr></table></figure>
<p>只会渲染第一个标签内容</p>
<p>v-bind:href == :href</p>
<p>v-on:click == @click</p>
<p>watch 与 computed</p>
<p>watch 监听一个变量</p>
<p>computed 监听的是一个实例</p>
<p>条件渲染</p>
<ul>
<li>v-if</li>
<li>v-else,v-esle-if</li>
<li>v-show</li>
</ul>
<h2 id="vue-cli工具"><a class="markdownIt-Anchor" href="#vue-cli工具"></a> Vue-cli工具</h2>
<p>下载安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>
<p>创建项目（到项目目录的上一级）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vue create 项目名称（例如：hell-world）</span><br></pre></td></tr></table></figure>
<p>Vue的全家桶 vue + vue-router + vuex</p>
<p>vue + vue-router 主要做SPA（）单页面应用</p>
<p>vue-router 是vue的核心插件</p>
<p>为什么使用单页面应用？</p>
<p>传统的路由跳转，如果后端资源过多，会导致页面出现白屏现象，让前端来做路由，在某个生命周期的钩子函数中发送ajax，数据驱动。</p>
]]></content>
      <categories>
        <category>IT技术</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>flask 框架了解</title>
    <url>/2019/12/07/flask/</url>
    <content><![CDATA[<h2 id="flask"><a class="markdownIt-Anchor" href="#flask"></a> Flask</h2>
<p>初次认识</p>
<p>内置 session</p>
<p>三方组件全，</p>
<p>缺点：稳定性相对较差，核心要变，三方组件要更新</p>
<p>最简单的使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure>
<p>Resopnse 三剑客：</p>
<p>HttpppResponse: return  “Hello World”</p>
<p>render:return render_template(“login.html”)</p>
<p>与django中的render 使用一致</p>
<p>redirect: return redirect (“/”)</p>
<p>跳转，重定向</p>
<p>Flask中小儿子：</p>
<ol>
<li>from flask import jsonify</li>
</ol>
<p>return jsonify()   返回 json 标准的字符串</p>
<p>content-type：application/json</p>
<ol start="2">
<li>return send_file()（打开并返回文件内容，自动识别文件格式）</li>
</ol>
<h4 id="flask中的request"><a class="markdownIt-Anchor" href="#flask中的request"></a> flask中的request</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line">request.method <span class="comment"># 请求方式</span></span><br><span class="line">request.form  <span class="comment"># 存放 FormData 中的数据</span></span><br><span class="line">request.args  <span class="comment"># 存放URL中的数据</span></span><br><span class="line">request.path  <span class="comment"># 路由地址</span></span><br><span class="line">request.host  <span class="comment"># 主机地址</span></span><br><span class="line">request.host_url  <span class="comment"># 加 http 的主机地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">先提交的是 POST，先序列化，然后GET，再序列化，</span><br></pre></td></tr></table></figure>
<p><code>.headers</code>  请求头信息</p>
<blockquote>
<p>Host: 127.0.0.1:5000<br />
Connection: keep-alive<br />
Cache-Control: max-age=0<br />
Upgrade-Insecure-Requests: 1<br />
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36<br />
Sec-Fetch-Mode: navigate<br />
Sec-Fetch-User: ?1<br />
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,<em>/</em>;q=0.8,application/signed-exchange;v=b3<br />
Sec-Fetch-Site: none<br />
Accept-Encoding: gzip, deflate, br<br />
Accept-Language: zh-CN,zh;q=0.9<br />
Cookie: csrftoken=a4HVpqpS12F8eRZch58n2ToMJeCerukhbRuy20MKB3cLZTwok8gs8um9PoDkbFhI; sessionid=7ftfeserhzki55h74um33j51lo410lj0</p>
</blockquote>
<p><code>.</code></p>
<blockquote>
<p>request.path------ /login<br />
request.data------ b’’<br />
request.url------- <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo1MDAwL2xvZ2lu">http://127.0.0.1:5000/login<i class="fa fa-external-link-alt"></i></span><br />
request.values---- CombinedMultiDict([ImmutableMultiDict([]), ImmutableMultiDict([])])<br />
request.range----- None<br />
request.user_agent----- Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36<br />
request.args------ ImmutableMultiDict([])<br />
request.json------ None<br />
request.form------ ImmutableMultiDict([])<br />
request.authorization------ None<br />
request.access_route------- ImmutableList([‘127.0.0.1’])<br />
request.cookies------ {‘csrftoken’: ‘a4HVpqpS12F8eRZch58n2ToMJeCerukhbRuy20MKB3cLZTwok8gs8um9PoDkbFhI’, ‘sessionid’: ‘7ftfeserhzki55h74um33j51lo410lj0’}<br />
request.accept_encodings------ gzip,deflate,br<br />
request.accept_languages------ zh-CN,zh;q=0.9<br />
request.accept_mimetypes------ text/html,image/webp,image/apng,application/xhtml+xml,application/signed-exchange;v=b3,application/xml;q=0.9,<em>/</em>;q=0.8<br />
request.content_length------ None<br />
request.accept_charsets-----<br />
request.files----- ImmutableMultiDict([])<br />
request.blueprint---- None</p>
</blockquote>
<h4 id="jinja2"><a class="markdownIt-Anchor" href="#jinja2"></a> Jinja2</h4>
<p><code>&#123;&#123; &#125;&#125;</code> 引用变量</p>
<p>`</p>
]]></content>
      <categories>
        <category>IT技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/09/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo<i class="fa fa-external-link-alt"></i></span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation<i class="fa fa-external-link-alt"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting<i class="fa fa-external-link-alt"></i></span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub<i class="fa fa-external-link-alt"></i></span>.</p>
<h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s">Deployment<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
  </entry>
  <entry>
    <title>node js 基础</title>
    <url>/2019/09/10/node.js/</url>
    <content><![CDATA[<h1 id="nodejs"><a class="markdownIt-Anchor" href="#nodejs"></a> node.js</h1>
<ul>
<li>
<h3 id="nodejs-2"><a class="markdownIt-Anchor" href="#nodejs-2"></a> node.js</h3>
<ul>
<li>Node.js不是一门语言</li>
<li>Node.js不是库、不是框架</li>
<li>Node.js是一个JavaScript运行时的环境</li>
<li>Node.js可以解析和执行JavaScript代码</li>
</ul>
</li>
<li>
<p>浏览器中的JavaScript</p>
<ul>
<li>EcmaScript
<ul>
<li>基本的语法</li>
<li>if</li>
<li>var</li>
<li>function</li>
<li>Object</li>
<li>Array</li>
</ul>
</li>
<li>BOM</li>
<li>DOM</li>
</ul>
</li>
<li>
<p>Node.js中的JavaScript</p>
<ul>
<li><strong>没有BOM、DOM</strong></li>
<li>EcmaScript</li>
<li>在Node这个JavaScript执行环境中为JavaScript提供了一些服务器级别的API
<ul>
<li>例如文件读写</li>
<li>网络服务构建</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="读取文件"><a class="markdownIt-Anchor" href="#读取文件"></a> 读取文件</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//浏览器中的JavaScript是没有文件操作的能力</span></span><br><span class="line"><span class="comment">//但是Node中的JavaScript具有文件操作的能力</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fs是file-system的简写，就是文件系统的意思</span></span><br><span class="line"><span class="comment">//在Node中如果想要进行文件操作，就必须引入fs这个核心 模块</span></span><br><span class="line"><span class="comment">//在fs这个核心模块中，就提供了所有的文件操作相关的API</span></span><br><span class="line"><span class="comment">//例如：fs。readFile就是用来读取文件的</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.使用核心模块require方法加载fs核心模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.读取文件</span></span><br><span class="line"><span class="comment">//	第一个参数就是要读取的文件路径</span></span><br><span class="line"><span class="comment">//	第二个参数就是一个回调函数</span></span><br><span class="line"><span class="comment">//			</span></span><br><span class="line"><span class="comment">//			成功</span></span><br><span class="line"><span class="comment">//				data  数据</span></span><br><span class="line"><span class="comment">//				error null</span></span><br><span class="line"><span class="comment">//			失败</span></span><br><span class="line"><span class="comment">//			 	data null</span></span><br><span class="line"><span class="comment">//			 	error 错误对象</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;data/hello.txt&#x27;</span>,<span class="keyword">function</span>(<span class="params">error,data</span>)&#123;</span><br><span class="line">	<span class="comment">//body...</span></span><br><span class="line">	<span class="comment">//&lt;Buffer 68 65 6c 6c 6f&gt;</span></span><br><span class="line">	<span class="comment">//文件读取的都是二进制数据</span></span><br><span class="line">	<span class="comment">//这里看不到 0 和 1 ？原因是二进制转为16进制</span></span><br><span class="line">	<span class="comment">//所以通过toString方法调用</span></span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="写入文件"><a class="markdownIt-Anchor" href="#写入文件"></a> 写入文件</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//	第一个参数：文件路径</span></span><br><span class="line"><span class="comment">//	第二个参数：文件内容</span></span><br><span class="line"><span class="comment">//	第三个参数：回调函数</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//		error</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//		成功：</span></span><br><span class="line"><span class="comment">//			文件写入成功</span></span><br><span class="line"><span class="comment">//			error 是 null</span></span><br><span class="line"><span class="comment">//		失败：</span></span><br><span class="line"><span class="comment">//			文件写入失败</span></span><br><span class="line"><span class="comment">//			error 就是错误对象</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./data/你好.md&#x27;</span>,<span class="string">&#x27;大家好，给大家介绍一下，我是node.js&#x27;</span>,<span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="简单http服务"><a class="markdownIt-Anchor" href="#简单http服务"></a> 简单http服务</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构建web服务器</span></span><br><span class="line"><span class="comment">//在node中专门提供一个核心模块：http</span></span><br><span class="line"><span class="comment">//http这个模块职责编写服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.加载http核心模块</span></span><br><span class="line"><span class="keyword">var</span> http= <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.使用http.createServer（）方法创建一个文本服务器</span></span><br><span class="line"><span class="comment">//返回一个Server实例</span></span><br><span class="line"><span class="keyword">var</span> server= http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.服务器能干嘛</span></span><br><span class="line"><span class="comment">//	提供服务：对数据的服务</span></span><br><span class="line"><span class="comment">//	发请求</span></span><br><span class="line"><span class="comment">//	接受请求</span></span><br><span class="line"><span class="comment">//	处理请求</span></span><br><span class="line"><span class="comment">//	给个反馈（发送响应）</span></span><br><span class="line"><span class="comment">//	注册 request 请求事件</span></span><br><span class="line"><span class="comment">//	当客户端请求过来，就会自动触发服务器的 request 请求事件，然后执行第二个参数：回调处理 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//request 请求事件处理函数，需要接受两个参数：</span></span><br><span class="line"><span class="comment">//	request 请求对象</span></span><br><span class="line"><span class="comment">//		请求对象可以用来获取客户端的一些请求信息，例如请求路径</span></span><br><span class="line"><span class="comment">//	response 响应对象</span></span><br><span class="line"><span class="comment">//		响应对象可以用来给客户端发送响应信息</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="keyword">function</span>(<span class="params">request,response</span>)&#123;</span><br><span class="line">	<span class="comment">//http://127.0.0.1:3000/</span></span><br><span class="line">	<span class="comment">//http://127.0.0.1:3000/aa</span></span><br><span class="line">	<span class="comment">//http://127.0.0.1:3000/12</span></span><br><span class="line">	<span class="comment">//http://127.0.0.1:3000/</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;收到客户端的请求了,请求路径是：&#x27;</span> + request.<span class="property">url</span>)</span><br><span class="line">	<span class="comment">//response 对象有一个方法：write可以用来给客户端发送响应数据</span></span><br><span class="line">	<span class="comment">//write s可以使用很多次，但是最后一定要使用end结束响应，否则客户端一直等待</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">//var url =requset.url  这样比较方便</span></span><br><span class="line">	<span class="keyword">if</span>(request.<span class="property">url</span>==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">		response.<span class="title function_">write</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">		response.<span class="title function_">write</span>(<span class="string">&#x27; node.js&#x27;</span>)</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.<span class="property">url</span>==<span class="string">&#x27;/login&#x27;</span>)&#123;</span><br><span class="line">		response.<span class="title function_">write</span>(<span class="string">&quot;登录&quot;</span>)</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		response.<span class="title function_">write</span>(<span class="string">&#x27;404&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//返回值只能是二进制或者字符串，不能是对象。。。</span></span><br><span class="line">	<span class="comment">//JSON,stringify()方法可以返回json数据字符串</span></span><br><span class="line">	response.<span class="title function_">end</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//4.绑定端口号，启动服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功了，可以通过http//127.0.0.1:3000/&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="node中的javascript"><a class="markdownIt-Anchor" href="#node中的javascript"></a> Node中的JavaScript</h2>
<ul>
<li>​	EcmaScript</li>
<li>核心模块</li>
<li>第三方模块</li>
<li>用户自定义模块</li>
</ul>
<h3 id="核心模块"><a class="markdownIt-Anchor" href="#核心模块"></a> 核心模块</h3>
<p>​	Node为了JavaScript提供了很多服务器级别的API，这些API绝大多数都被包装到了一个具体的核心模块。例如<code>fs</code>核心模块，http服务构建模块<code>require</code>，<code>path</code>路径</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="模块系统"><a class="markdownIt-Anchor" href="#模块系统"></a> 模块系统</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//require 方法有两个作用</span></span><br><span class="line"><span class="comment">//  1、加载文件并执行里面代码</span></span><br><span class="line"><span class="comment">//	2、拿到被加载文件模块导出的接口对象</span></span><br><span class="line"><span class="comment">//	</span></span><br><span class="line"><span class="comment">//	a.js中</span></span><br><span class="line"><span class="keyword">var</span> bExports = <span class="built_in">require</span>(<span class="string">&#x27;./b&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo)</span><br><span class="line"><span class="comment">//b.js中</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">&#x27;boo&#x27;</span><span class="comment">//这不能被其他js调用，文件域变量</span></span><br><span class="line"><span class="keyword">export</span>.<span class="property">foo</span> = <span class="string">&#x27;hello&#x27;</span><span class="comment">//只有这个方法才能调用</span></span><br><span class="line"><span class="keyword">export</span>.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ip地址和端口号的概念</p>
<h3 id="path路径操作模块"><a class="markdownIt-Anchor" href="#path路径操作模块"></a> path路径操作模块</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">path.basename(<span class="string">&#x27;c:/a/b/c/index.js&#x27;</span>)</span></span><br><span class="line">&#x27;index.js&#x27;</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">path.basename(<span class="string">&#x27;c:/a/b/c/index.js&#x27;</span>,<span class="string">&#x27;js&#x27;</span>)</span></span><br><span class="line">&#x27;index.&#x27;</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">path.basename(<span class="string">&#x27;c:/a/b/c/index.js&#x27;</span>,<span class="string">&#x27;.js&#x27;</span>)</span></span><br><span class="line">&#x27;index&#x27;</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">path.basename(<span class="string">&#x27;c:/a/b/c/index.js&#x27;</span>,<span class="string">&#x27;.html&#x27;</span>)</span></span><br><span class="line">&#x27;index.js&#x27;</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">path.dirname(<span class="string">&#x27;c:/a/b/c/index/js&#x27;</span>)</span></span><br><span class="line">&#x27;c:/a/b/c/index&#x27;</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">path.dirname(<span class="string">&#x27;c:/a/b/c/index.js&#x27;</span>)</span></span><br><span class="line">&#x27;c:/a/b/c&#x27;</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">path.extname(<span class="string">&#x27;c:/a/b/c/index.js&#x27;</span>)</span></span><br><span class="line">&#x27;.js&#x27;</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">path.isAbsolute(<span class="string">&#x27;c:/a/b/c/index.js&#x27;</span>)</span></span><br><span class="line">true</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">path.isAbsolute(<span class="string">&#x27;./a/b/c/index.js&#x27;</span>)</span></span><br><span class="line">false</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">path.isAbsolute(<span class="string">&#x27;/a/b/c/index.js&#x27;</span>)</span></span><br><span class="line">true</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">path.parse(<span class="string">&#x27;/a/b/c/index.js&#x27;</span>)</span></span><br><span class="line">&#123; root: &#x27;/&#x27;,</span><br><span class="line">  dir: &#x27;/a/b/c&#x27;,</span><br><span class="line">  base: &#x27;index.js&#x27;,</span><br><span class="line">  ext: &#x27;.js&#x27;,</span><br><span class="line">  name: &#x27;index&#x27; &#125;</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">path.parse(<span class="string">&#x27;c:/a/b/c/index.js&#x27;</span>)</span></span><br><span class="line">&#123; root: &#x27;c:/&#x27;,</span><br><span class="line">  dir: &#x27;c:/a/b/c&#x27;,</span><br><span class="line">  base: &#x27;index.js&#x27;,</span><br><span class="line">  ext: &#x27;.js&#x27;,</span><br><span class="line">  name: &#x27;index&#x27; &#125;</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">path.join(<span class="string">&#x27;c:/a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span></span><br><span class="line">&#x27;c:\\a\\b&#x27;</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">var str = <span class="string">&#x27;c:a/&#x27;</span> + <span class="string">&#x27;/b&#x27;</span></span></span><br><span class="line">undefined</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">var str = <span class="string">&#x27;c:a/&#x27;</span> + <span class="string">&#x27;/b&#x27;</span></span></span><br><span class="line">undefined</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">str</span></span><br><span class="line">&#x27;c:a//b&#x27;</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">var str = <span class="string">&#x27;c:a&#x27;</span> + <span class="string">&#x27;b&#x27;</span></span></span><br><span class="line">undefined</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">str</span></span><br><span class="line">&#x27;c:ab&#x27;</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">path.join(<span class="string">&#x27;c:/a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>)//拼接路径</span></span><br><span class="line">&#x27;c:\\a\\b\\c\\d&#x27;</span><br></pre></td></tr></table></figure>
<ul>
<li>path.dirname
<ul>
<li>获取一个路径中的目录部分</li>
</ul>
</li>
<li>pathn.extname
<ul>
<li>获取一个路径中的扩展名部分</li>
</ul>
</li>
<li>path.parse
<ul>
<li>把一个路径转换为一个对象
<ul>
<li>root 根路径</li>
<li>dir目录</li>
<li>base 包涵后缀名的文件名</li>
<li>ext后缀名</li>
<li>name 不包含后缀名的文件名</li>
</ul>
</li>
</ul>
</li>
<li>path.join
<ul>
<li>当你需要进行路径拼接的时候，使用他</li>
</ul>
</li>
<li>path.isAbsolute
<ul>
<li>判断一个路径的是否为绝对路径</li>
</ul>
</li>
</ul>
<h3 id="node中的其他成员"><a class="markdownIt-Anchor" href="#node中的其他成员"></a> node中的其他成员</h3>
<p>在每个模块中，除了<code>require</code>、<code>exports</code>等模块相关API职位，还有两个特殊的成员，</p>
<ul>
<li><code>_dirname</code><strong>动态获取</strong>可以用来获取当前文件模块所属目录的绝对路径</li>
<li><code>_filename</code><strong>动态获取</strong>可以用来获取当前文件的绝对路径</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//./a.txt 相对于当前文件路径</span></span><br><span class="line"><span class="comment">//./a.txt 相对于执行 node 命令所处的终端路径</span></span><br><span class="line"><span class="comment">//这不是错误，就是这样设计</span></span><br><span class="line"><span class="comment">//文件操作路径中，相对路径就是执行 node 所处的终端路径</span></span><br></pre></td></tr></table></figure>
<p>在文件操作中，使用相对路径是不可靠的，不是bug</p>
<p>相对路径变为绝对路径用<code>path.join()</code>拼接</p>
<p>模块中的路径标识和文件操作相对于当前文件模块，不受执行影响</p>
<h3 id="服务器读取资源"><a class="markdownIt-Anchor" href="#服务器读取资源"></a> 服务器读取资源</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载fs模块读取文件，写入文件</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> url = req.<span class="property">url</span></span><br><span class="line">	<span class="keyword">if</span>(url == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">		fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./index.html&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(err)&#123;</span><br><span class="line">				res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/plain;charset=utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">				res.<span class="title function_">end</span>(<span class="string">&#x27;文件读取失败&#x27;</span>)</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">				res.<span class="title function_">end</span>(data)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server on ........&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>不同资源对应不用的Content-Type需要配置</p>
<h3 id="代码风格"><a class="markdownIt-Anchor" href="#代码风格"></a> 代码风格</h3>
<p>​	注意<code>；</code>无论采用是否有这种风格，都在前面加<code>;</code></p>
<p>有些人也使用！~等符号</p>
<p>​	es6中支持一种字符串包裹方式，叫做：模板字符串</p>
<p><code>var foo = 'bar' </code> 支持换行与html5中<code>&lt;pre&gt;</code>相同</p>
<h3 id="服务端渲染和客户端渲染"><a class="markdownIt-Anchor" href="#服务端渲染和客户端渲染"></a> 服务端渲染和客户端渲染</h3>
<ul>
<li>
<p>服务端渲染就服务就行渲染</p>
<ul>
<li>响应的是结果</li>
</ul>
</li>
<li>
<p>客户端渲染</p>
</li>
<li>
<p>服务端与客户端区别</p>
<ul>
<li>客户端不利于SEO搜索引擎优化</li>
<li>服务端渲染可以被爬虫抓取到的，客户端异步渲染</li>
</ul>
</li>
</ul>
<h3 id="web服务器开发"><a class="markdownIt-Anchor" href="#web服务器开发"></a> web服务器开发</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"><span class="comment">//服务器启动</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">	<span class="comment">//创建路径对象</span></span><br><span class="line">	<span class="keyword">var</span> url = req.<span class="property">url</span></span><br><span class="line">	<span class="keyword">if</span>(url == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">		fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./index.html&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(err)&#123;</span><br><span class="line">				res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/plain;charset=utf-8&#x27;</span>)</span><br><span class="line">				res.<span class="title function_">end</span>(<span class="string">&#x27;文件读取失败&#x27;</span>)</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//data默认是二进制数据，可以通过 .toString 转为字符串</span></span><br><span class="line">                <span class="comment">//res.end()支持两种数据类型，一种是二进制，一种是字符串</span></span><br><span class="line">				res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br><span class="line">				res.<span class="title function_">end</span>(data)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server on ........&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="apache目录渲染"><a class="markdownIt-Anchor" href="#apache目录渲染"></a> apache目录渲染</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> wwwDir = <span class="string">&#x27;D:/百里半&#x27;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> url = req.<span class="property">url</span></span><br><span class="line">	fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./template.html&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(err)&#123;</span><br><span class="line">			<span class="keyword">return</span> res.<span class="title function_">end</span>(<span class="string">&#x27;404 Not Found.&#x27;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//1. 如何得到wwwDri目录中的文件名</span></span><br><span class="line">		<span class="comment">//2.如何将得到的文件名和目录名替换到templat.html</span></span><br><span class="line">		fs.<span class="title function_">readdir</span>(wwwDir,<span class="keyword">function</span>(<span class="params">err,files</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(err)&#123;</span><br><span class="line">				<span class="keyword">return</span> res.<span class="title function_">end</span>(<span class="string">&#x27;Can not find www dir.&#x27;</span>)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">var</span> content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">			files.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">				<span class="comment">//在ES6中的``字符串中，可以使用$&#123;&#125;来引用变量</span></span><br><span class="line">				content += <span class="string">`<span class="subst">$&#123;item&#125;</span>`</span>				</span><br><span class="line">			&#125;)</span><br><span class="line">			data = data.<span class="title function_">toString</span>()</span><br><span class="line">			data = data.<span class="title function_">replace</span>(<span class="string">&#x27;^_^&#x27;</span>,content)</span><br><span class="line">			res.<span class="title function_">end</span>(data)			</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server on ......&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="html渲染页面"><a class="markdownIt-Anchor" href="#html渲染页面"></a> html渲染页面</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">。。。。。。。</span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;tbody&quot;</span>&gt;</span></span><br><span class="line">        &lt;---!此处为模板引擎渲染方式----&gt;</span><br><span class="line">    &#123;&#123; each files&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-value</span> = <span class="string">&quot;apple&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;icon idr&quot;</span> <span class="attr">href</span>=<span class="string">&quot;D:/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>&#123;&#123;$value&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;detailsColum&quot;</span> <span class="attr">data-value</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;detailsColum&quot;</span> <span class="attr">data-value</span>=<span class="string">&quot;1509589967&quot;</span>&gt;</span>&lt;sss/td&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;&#123;/each&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"> 。。。。。。</span><br></pre></td></tr></table></figure>
<h3 id="处理表单get请求"><a class="markdownIt-Anchor" href="#处理表单get请求"></a> 处理表单get请求</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pathname.<span class="title function_">indexOf</span>(<span class="string">&#x27;/public/&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// /public/css/main.css</span></span><br><span class="line">      <span class="comment">// /public/js/main.js</span></span><br><span class="line">      <span class="comment">// /public/lib/jquery.js</span></span><br><span class="line">      <span class="comment">// 统一处理：</span></span><br><span class="line">      <span class="comment">//    如果请求路径是以 /public/ 开头的，则我认为你要获取 public 中的某个资源</span></span><br><span class="line">      <span class="comment">//    所以我们就直接可以把请求路径当作文件路径来直接进行读取</span></span><br><span class="line">      fs.<span class="title function_">readFile</span>(<span class="string">&#x27;.&#x27;</span> + pathname, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> res.<span class="title function_">end</span>(<span class="string">&#x27;404 Not Found.&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">end</span>(data)</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (pathname === <span class="string">&#x27;/pinglun&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 注意：这个时候无论 /pinglun?xxx 之后是什么，我都不用担心了，因为我的 pathname 是不包含 ? 之后的那个路径</span></span><br><span class="line">      <span class="comment">// 一次请求对应一次响应，响应结束这次请求也就结束了</span></span><br><span class="line">      <span class="comment">// res.end(JSON.stringify(parseObj.query))</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 我们已经使用 url 模块的 parse 方法把请求路径中的查询字符串给解析成一个对象了</span></span><br><span class="line">      <span class="comment">// 所以接下来要做的就是：</span></span><br><span class="line">      <span class="comment">//    1. 获取表单提交的数据 parseObj.query</span></span><br><span class="line">      <span class="comment">//    2. 将当前时间日期添加到数据对象中，然后存储到数组中</span></span><br><span class="line">      <span class="comment">//    3. 让用户重定向跳转到首页 /</span></span><br><span class="line">      <span class="comment">//       当用户重新请求 / 的时候，我数组中的数据已经发生变化了，所以用户看到的页面也就变了</span></span><br><span class="line">      <span class="keyword">var</span> comment = parseObj.<span class="property">query</span></span><br><span class="line">      comment.<span class="property">dateTime</span> = <span class="string">&#x27;2017-11-2 17:11:22&#x27;</span></span><br><span class="line">      comments.<span class="title function_">unshift</span>(comment)</span><br><span class="line">      <span class="comment">// 服务端这个时候已经把数据存储好了，接下来就是让用户重新请求 / 首页，就可以看到最新的留言内容了</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如何通过服务器让客户端重定向？</span></span><br><span class="line">      <span class="comment">//    1. 状态码设置为 302 临时重定向</span></span><br><span class="line">      <span class="comment">//        statusCode</span></span><br><span class="line">      <span class="comment">//    2. 在响应头中通过 Location 告诉客户端往哪儿重定向</span></span><br><span class="line">      <span class="comment">//        setHeader</span></span><br><span class="line">      <span class="comment">// 如果客户端发现收到服务器的响应的状态码是 302 就会自动去响应头中找 Location ，然后对该地址发起新的请求</span></span><br><span class="line">      <span class="comment">// 所以你就能看到客户端自动跳转了</span></span><br><span class="line">      res.<span class="property">statusCode</span> = <span class="number">302</span></span><br><span class="line">      res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Location&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      res.<span class="title function_">end</span>()</span><br></pre></td></tr></table></figure>
<h2 id="require加载规则模块作用域"><a class="markdownIt-Anchor" href="#require加载规则模块作用域"></a> require加载规则（模块作用域）</h2>
<h3 id="加载node_modules"><a class="markdownIt-Anchor" href="#加载node_modules"></a> 加载node_modules</h3>
<ol>
<li>先找到当前目录所在的 node_modules目录</li>
<li>node_modules/加载文件名的/package.json</li>
<li>文件中main 对应的js文件</li>
<li>如果没有package.json默认加载index.js</li>
</ol>
<h3 id="commonjs模块规范"><a class="markdownIt-Anchor" href="#commonjs模块规范"></a> CommonJS模块规范</h3>
<p>模块系统</p>
<ul>
<li>模块作用域</li>
<li>使用 require 方法加载模块</li>
<li>使用 exports 接口来导出模块中的成员</li>
</ul>
<h4 id="require-加载"><a class="markdownIt-Anchor" href="#require-加载"></a> require 加载</h4>
<p>两个作用：</p>
<ul>
<li>执行被加载的代码</li>
<li>得到被加载模块中的<code>exports</code>导出接口对象</li>
</ul>
<h4 id="exports导出"><a class="markdownIt-Anchor" href="#exports导出"></a> exports导出</h4>
<p>对于可以被其他模块访问的成员，我们就需要公开都挂载到<code>exports</code>接口中</p>
<p>导出多个成员：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">a</span> = <span class="number">123</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">b</span> = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">c</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ccc&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">d</span> = &#123;</span><br><span class="line">    <span class="attr">foo</span>:<span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>导出单个成员</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure>
<p>以后情况会覆盖：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="packagejson"><a class="markdownIt-Anchor" href="#packagejson"></a> package.json</h2>
<p>我们建议一般每个项目都要有一个package.json文件。这个文件可以同过<code>nmp init</code>创建</p>
<h2 id="npm"><a class="markdownIt-Anchor" href="#npm"></a> npm</h2>
<h3 id="npm官网"><a class="markdownIt-Anchor" href="#npm官网"></a> npm官网</h3>
<p><span class="exturl" data-url="aHR0cDovL25wbWpzLmNvbQ==">npmjs.com<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="npm命令行工具"><a class="markdownIt-Anchor" href="#npm命令行工具"></a> npm命令行工具</h3>
<p>npm 的第二层含义就是命令行工具，只要安装node就安装了npm</p>
<p>升级npm</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --global npm</span><br></pre></td></tr></table></figure>
<h4 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h4>
<ul>
<li>
<p>npm init</p>
<ul>
<li>npm init -y快速生成</li>
<li>生成详细的package.json包括其他配置信息</li>
</ul>
</li>
<li>
<p>npm install</p>
</li>
<li>
<p>npm install 包名</p>
<ul>
<li>只下载</li>
</ul>
</li>
<li>
<p>npm install --save 包名</p>
<ul>
<li>
<p>下载并且保存依赖项（package.json文件中的dependencies选项）</p>
</li>
<li>
<p>npm i -S包名</p>
</li>
<li>
<p>在npm5.0.0以上均支持自动保存配置信息</p>
</li>
<li>
<p>加–save是为了区分是否必须的依赖</p>
</li>
<li>
<p>npm install --production</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"> 	<span class="attr">&quot;start&quot;</span><span class="punctuation">:</span><span class="string">&quot;node main.js&quot;</span><span class="punctuation">,</span></span><br><span class="line"> 	<span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>直接执行npm start或者 npm run start 或者npm run<code>其他命令</code></p>
</li>
</ul>
</li>
<li>
<p>npm uninstall 包名</p>
<ul>
<li>只删除，如果有依赖项会依然保存</li>
</ul>
</li>
<li>
<p>npm uninstall --save 包名</p>
<ul>
<li>删除的同时也会把依赖信息也去除</li>
<li>npm un -S包名</li>
</ul>
</li>
<li>
<p>npm help</p>
<ul>
<li>查看使用帮助</li>
</ul>
</li>
<li>
<p>npm 命令 --help</p>
<ul>
<li>查看指定命令的使用帮助</li>
<li>例如我忘记了uninstall命令的简写了，这个我可以输入这个</li>
</ul>
</li>
</ul>
<h3 id="npm被墙问题"><a class="markdownIt-Anchor" href="#npm被墙问题"></a> npm被墙问题</h3>
<p>安装淘宝的cnpm：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --global cnpm</span><br></pre></td></tr></table></figure>
<p>接下来你安装的会替换npm为cnpm</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install jquery</span><br></pre></td></tr></table></figure>
<p>mkdir cnpm-demo创建羡慕</p>
<p>rmdir cnpm-demo删除项目</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install jquery --registry=https://淘宝地址</span><br></pre></td></tr></table></figure>
<p>只要写了下面的命令每次都是通过淘宝的服务器下载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看 npm配置信息</span> </span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure>
<h2 id="express"><a class="markdownIt-Anchor" href="#express"></a> Express</h2>
<h3 id="起步"><a class="markdownIt-Anchor" href="#起步"></a> 起步</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init --yse</span><br><span class="line">npm i -S express</span><br></pre></td></tr></table></figure>
<p>安装nodemon自动重启</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --global nodemon</span><br></pre></td></tr></table></figure>
<h3 id="基本路由"><a class="markdownIt-Anchor" href="#基本路由"></a> 基本路由</h3>
<p>get</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure>
<p>post</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure>
<p>在Express中配置<code>art-tempalte</code>模板</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save art-tempalte</span><br><span class="line">npm install --save express-art-tempalte</span><br></pre></td></tr></table></figure>
<p>配置</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">app<span class="selector-class">.engine</span>(<span class="string">&#x27;art&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;express-art-template&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>如果更改渲染路径</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不能写错views</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>,目录路径)</span><br></pre></td></tr></table></figure>
<p>在express获取表单post请求数据</p>
<p><code>body-parser</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm isntall --save body-parser</span><br></pre></td></tr></table></figure>
<p>配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>在输入JSON数据中配置db.json时注意</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;students&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">		<span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;张三&quot;</span><span class="punctuation">,</span><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span><span class="attr">&quot;hobbies&quot;</span><span class="punctuation">:</span><span class="string">&quot;吃饭、睡觉、&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;张三&quot;</span><span class="punctuation">,</span><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span><span class="attr">&quot;hobbies&quot;</span><span class="punctuation">:</span><span class="string">&quot;吃饭、睡觉、&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">3</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;张三&quot;</span><span class="punctuation">,</span><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span><span class="attr">&quot;hobbies&quot;</span><span class="punctuation">:</span><span class="string">&quot;吃饭、睡觉、&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">4</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;张三&quot;</span><span class="punctuation">,</span><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span><span class="attr">&quot;hobbies&quot;</span><span class="punctuation">:</span><span class="string">&quot;吃饭、睡觉、&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">5</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;张三&quot;</span><span class="punctuation">,</span><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span><span class="attr">&quot;hobbies&quot;</span><span class="punctuation">:</span><span class="string">&quot;吃饭、睡觉、&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">6</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;张三&quot;</span><span class="punctuation">,</span><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span><span class="attr">&quot;hobbies&quot;</span><span class="punctuation">:</span><span class="string">&quot;吃饭、睡觉、&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">7</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;张三&quot;</span><span class="punctuation">,</span><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span><span class="attr">&quot;hobbies&quot;</span><span class="punctuation">:</span><span class="string">&quot;吃饭、睡觉、&quot;</span><span class="punctuation">&#125;</span>`<span class="punctuation">,</span>`<span class="comment">//不能加逗号</span></span><br><span class="line">	<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="路由设计"><a class="markdownIt-Anchor" href="#路由设计"></a> 路由设计</h4>
<table>
<thead>
<tr>
<th>请求方法</th>
<th>请求路径</th>
<th>get参数</th>
<th>post参数</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>/studens</td>
<td></td>
<td></td>
<td>渲染首页</td>
</tr>
<tr>
<td>GET</td>
<td>/students/new</td>
<td></td>
<td></td>
<td>渲染添加学生页面</td>
</tr>
<tr>
<td>POST</td>
<td>/studens/new</td>
<td></td>
<td>name、age、gender、hobbies</td>
<td>处理添加学生页面</td>
</tr>
<tr>
<td>GET</td>
<td>/students/edit</td>
<td>id</td>
<td></td>
<td>渲染编辑页面</td>
</tr>
<tr>
<td>POST</td>
<td>/studens/edit</td>
<td></td>
<td>id、name、age、gender、hobbies</td>
<td>处理编辑请求</td>
</tr>
<tr>
<td>GET</td>
<td>/students/delete</td>
<td>id</td>
<td></td>
<td>处理删除请求</td>
</tr>
</tbody>
</table>
<h2 id="mongodb"><a class="markdownIt-Anchor" href="#mongodb"></a> MongoDB</h2>
<h3 id="关系型数据库和非关系型数据库"><a class="markdownIt-Anchor" href="#关系型数据库和非关系型数据库"></a> 关系型数据库和非关系型数据库</h3>
<p>表就是关系</p>
<ul>
<li>
<p>所有的关系型数据库都需要<code>sql</code>语句操作</p>
</li>
<li>
<p>所有的关系型数据库都需要设计表结构</p>
</li>
<li>
<p>而且数据表还支持约束</p>
<ul>
<li>唯一的</li>
<li>主键</li>
<li>默认值</li>
<li>非空</li>
</ul>
</li>
<li>
<p>非关系型数据库非常灵活</p>
</li>
<li>
<p>有的非关系型数据库就是key-value对儿</p>
</li>
<li>
<p>在MongoDB是长的最像关系型数据库的非关系型数据库</p>
<ul>
<li>数据库-&gt;数据库</li>
<li>数据表-&gt;集合（数组）</li>
<li>表记录-&gt;（文档对象）</li>
</ul>
</li>
<li>
<p>MongoDB不需要设计表结构</p>
</li>
<li>
<p>也就是你可以任意的往里面存数据</p>
<p>第三方包：<code>mongoose</code>基于MongoDB官方的<code>mongodb</code>包再一次做了封装</p>
</li>
</ul>
<h2 id="expresssession"><a class="markdownIt-Anchor" href="#expresssession"></a> express—session</h2>
<p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install express-session</span><br></pre></td></tr></table></figure>
<p>配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 Express 这个框架中，默认不支持 Session 和 Cookie</span></span><br><span class="line"><span class="comment">// 但是我们可以使用第三方中间件：express-session 来解决</span></span><br><span class="line"><span class="comment">// 1. npm install express-session</span></span><br><span class="line"><span class="comment">// 2. 配置 (一定要在 app.use(router) 之前)</span></span><br><span class="line"><span class="comment">// 3. 使用</span></span><br><span class="line"><span class="comment">//    当把这个插件配置好之后，我们就可以通过 req.session 来发访问和设置 Session 成员了</span></span><br><span class="line"><span class="comment">//    添加 Session 数据：req.session.foo = &#x27;bar&#x27;</span></span><br><span class="line"><span class="comment">//    访问 Session 数据：req.session.foo</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">  <span class="comment">// 配置加密字符串，它会在原有加密基础之上和这个字符串拼起来去加密</span></span><br><span class="line">  <span class="comment">// 目的是为了增加安全性，防止客户端恶意伪造</span></span><br><span class="line">  <span class="attr">secret</span>: <span class="string">&#x27;itcast&#x27;</span>,</span><br><span class="line">  <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">saveUninitialized</span>: <span class="literal">false</span> <span class="comment">// 无论你是否使用 Session ，我都默认直接给你分配一把钥匙</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
<p>使用:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加 Session 数据</span></span><br><span class="line">req.<span class="property">session</span>.<span class="property">foo</span> = <span class="string">&#x27;bar&#x27;</span></span><br><span class="line"><span class="comment">//获取 Session 数据</span></span><br><span class="line">req.<span class="property">session</span>.<span class="property">foo</span></span><br></pre></td></tr></table></figure>
<p>提示：默认Session 数据时内存存储的，服务器一旦重启就会丢失，真正的生产环境会把 Session 数据持久化。</p>
<h2 id="nvm管理node版本"><a class="markdownIt-Anchor" href="#nvm管理node版本"></a> NVM管理node版本</h2>
<p>下载地址</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvcmV5YnV0bGVyL252bS13aW5kb3dzL3JlbGVhc2Vz">https://github.com/coreybutler/nvm-windows/releases<i class="fa fa-external-link-alt"></i></span></p>
<p>查看版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm -v</span><br></pre></td></tr></table></figure>
<p>查看node版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>IT技术</category>
        <category>Node Js</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2019/10/15/test/</url>
    <content><![CDATA[<style>
    .cd-timeline.svelte-1t2uafz .svelte-1t2uafz,.cd-timeline.svelte-1t2uafz .svelte-1t2uafz::after,.cd-timeline.svelte-1t2uafz .svelte-1t2uafz::before{-webkit-box-sizing:border-box;box-sizing:border-box}.cd-timeline.svelte-1t2uafz{font-size:1.6rem;font-family:"Droid Serif", serif;color:#7f8c97;background-color:#e9f0f5}.cd-timeline.svelte-1t2uafz a{color:#acb7c0;text-decoration:none}.cd-timeline.svelte-1t2uafz img{max-width:100%}.cd-timeline.svelte-1t2uafz h1,h2{font-family:"Open Sans", sans-serif;font-weight:bold}.cd-timeline.svelte-1t2uafz{overflow:hidden;margin:2em auto}.cd-timeline__container.svelte-1t2uafz{position:relative;width:90%;max-width:1170px;margin:0 auto;padding:2em 0}.cd-timeline__container.svelte-1t2uafz::before{content:'';position:absolute;top:0;left:18px;height:100%;width:4px;background:#d7e4ed}@media only screen and (min-width: 1170px){.cd-timeline.svelte-1t2uafz{margin-top:3em;margin-bottom:3em}.cd-timeline__container.svelte-1t2uafz::before{left:50%;margin-left:-2px}}.cd-timeline__block.svelte-1t2uafz{position:relative;margin:2em 0}.cd-timeline__block.svelte-1t2uafz:after{content:"";display:table;clear:both}.cd-timeline__block.svelte-1t2uafz:first-child{margin-top:0}.cd-timeline__block.svelte-1t2uafz:last-child{margin-bottom:0}@media only screen and (min-width: 1170px){.cd-timeline__block.svelte-1t2uafz{margin:4em 0}}.cd-timeline__img.svelte-1t2uafz{position:absolute;top:0;left:0;width:40px;height:40px;border-radius:50%;-webkit-box-shadow:0 0 0 4px white, inset 0 2px 0 rgba(0, 0, 0, 0.08), 0 3px 0 4px rgba(0, 0, 0, 0.05);box-shadow:0 0 0 4px white, inset 0 2px 0 rgba(0, 0, 0, 0.08), 0 3px 0 4px rgba(0, 0, 0, 0.05)}.cd-timeline__img.svelte-1t2uafz{background:#75ce66}@media only screen and (min-width: 1170px){.cd-timeline__img.svelte-1t2uafz{width:60px;height:60px;left:50%;margin-left:-30px;-webkit-transform:translateZ(0);transform:translateZ(0)}}@-webkit-keyframes svelte-1t2uafz-cd-bounce-1{0%{opacity:0;-webkit-transform:scale(0.5);transform:scale(0.5)}60%{opacity:1;-webkit-transform:scale(1.2);transform:scale(1.2)}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes svelte-1t2uafz-cd-bounce-1{0%{opacity:0;-webkit-transform:scale(0.5);transform:scale(0.5)}60%{opacity:1;-webkit-transform:scale(1.2);transform:scale(1.2)}100%{-webkit-transform:scale(1);transform:scale(1)}}.cd-timeline__content.svelte-1t2uafz{position:relative;margin-left:60px;background:white;border-radius:0.25em;padding:1em;-webkit-box-shadow:0 3px 0 #d7e4ed;box-shadow:0 3px 0 #d7e4ed}.cd-timeline__content.svelte-1t2uafz:after{content:"";display:table;clear:both}.cd-timeline__content.svelte-1t2uafz::before{content:'';position:absolute;top:16px;right:100%;height:0;width:0;border:7px solid transparent;border-right:7px solid white}.cd-timeline__content.svelte-1t2uafz h2.svelte-1t2uafz{color:#303e49}.cd-timeline__content.svelte-1t2uafz p,.cd-timeline__date.svelte-1t2uafz{font-size:1.3rem}.cd-timeline__content.svelte-1t2uafz p{margin:1em 0;line-height:1.6}.cd-timeline__date.svelte-1t2uafz{display:inline-block}.cd-timeline__date.svelte-1t2uafz{float:left;padding:.8em 0;opacity:.7}@media only screen and (min-width: 768px){.cd-timeline__content.svelte-1t2uafz h2.svelte-1t2uafz{font-size:2rem}.cd-timeline__content.svelte-1t2uafz p{font-size:1.6rem}.cd-timeline__date.svelte-1t2uafz{font-size:1.4rem}}@media only screen and (min-width: 1170px){.cd-timeline__content.svelte-1t2uafz{margin-left:0;padding:1.6em;width:45%;-webkit-transform:translateZ(0);transform:translateZ(0)}.cd-timeline__content.svelte-1t2uafz::before{top:24px;left:100%;border-color:transparent;border-left-color:white}.cd-timeline__date.svelte-1t2uafz{position:absolute;width:100%;left:122%;top:6px;font-size:1.6rem}.cd-timeline__block.svelte-1t2uafz:nth-child(even) .cd-timeline__content.svelte-1t2uafz{float:right}.cd-timeline__block.svelte-1t2uafz:nth-child(even) .cd-timeline__content.svelte-1t2uafz::before{top:24px;left:auto;right:100%;border-color:transparent;border-right-color:white}.cd-timeline__block.svelte-1t2uafz:nth-child(even) .cd-timeline__date.svelte-1t2uafz{left:auto;right:122%;text-align:right}}@-webkit-keyframes svelte-1t2uafz-cd-bounce-2{0%{opacity:0;-webkit-transform:translateX(-100px);transform:translateX(-100px)}60%{opacity:1;-webkit-transform:translateX(20px);transform:translateX(20px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes svelte-1t2uafz-cd-bounce-2{0%{opacity:0;-webkit-transform:translateX(-100px);transform:translateX(-100px)}60%{opacity:1;-webkit-transform:translateX(20px);transform:translateX(20px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}@-webkit-keyframes svelte-1t2uafz-cd-bounce-2-inverse{0%{opacity:0;-webkit-transform:translateX(100px);transform:translateX(100px)}60%{opacity:1;-webkit-transform:translateX(-20px);transform:translateX(-20px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes svelte-1t2uafz-cd-bounce-2-inverse{0%{opacity:0;-webkit-transform:translateX(100px);transform:translateX(100px)}60%{opacity:1;-webkit-transform:translateX(-20px);transform:translateX(-20px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}
    </style>
<section class="cd-timeline js-cd-timeline svelte-1t2uafz">
    <div class="cd-timeline__container svelte-1t2uafz">
        <div class="cd-timeline__block js-cd-block svelte-1t2uafz">
            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">
            </div>
            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">
                <h2 class="svelte-1t2uafz">ECMAScript 1</h2>
                <p>First edition.</p>

                <span class="cd-timeline__date svelte-1t2uafz">1997-06</span>
            </div>
        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">
            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">
            </div>
            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">
                <h2 class="svelte-1t2uafz">ECMAScript 2</h2>
                <p>Editorial changes to keep the specification fully aligned with ISO/IEC 16262 international standard.</p>

                <span class="cd-timeline__date svelte-1t2uafz">1998-06</span>
            </div>
        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">
            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">
            </div>
            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">
                <h2 class="svelte-1t2uafz">ECMAScript 3</h2>
                <p>Added regular expressions, better string handling, new control statements, try/catch exception handling, tighter definition of errors, formatting for numeric output and other enhancements.</p>

                <span class="cd-timeline__date svelte-1t2uafz">1999-12</span>
            </div>
        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">
            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">
            </div>
            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">
                <h2 class="svelte-1t2uafz">Abandoned ECMAScript 4</h2>
                <p>Fourth Edition was abandoned, due to political differences concerning language complexity. Many features proposed for the Fourth Edition have been completely dropped; some were incorporated into the sixth edition.</p>

                <span class="cd-timeline__date svelte-1t2uafz">2000-01 - 2007-10-23</span>
            </div>
        </div>
    </div>
</section>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫</title>
    <url>/2020/03/15/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/</url>
    <content><![CDATA[<h1 id="jupyter-notebook"><a class="markdownIt-Anchor" href="#jupyter-notebook"></a> jupyter notebook</h1>
<p>魔法命令</p>
<h2 id="numpy-安装与导入"><a class="markdownIt-Anchor" href="#numpy-安装与导入"></a> Numpy 安装与导入</h2>
<p>安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install numpy</span><br></pre></td></tr></table></figure>
<h2 id="机器学习"><a class="markdownIt-Anchor" href="#机器学习"></a> 机器学习</h2>
<p>机器学习：学习一种学习算法，从数据中学习并建立成模型来对新的数据进行预测的计算科学。</p>
<p>适用于：</p>
<p>1.不存在已知算法解决方案的复杂问题</p>
<p>2.需要大量手动调整或者规则列表超长的问题</p>
<p>3.可以适应环境波动的系统</p>
<p>基础概念：</p>
<p>1.提供给算法的包含所需解决方案的训练数据，称为标签</p>
<p>2.属性加上其值，就是特征</p>
<p>3.通过给定的特征来预测一个目标数值，叫回归任务</p>
<p>4.用于训练模型的数据叫数据集</p>
<p>5.用于测试模型精度的数据叫测试集</p>
<p>6.每一条数据叫一个样本（x），样本对应的结果叫标签（y0）</p>
<p>7.模型在训练数据上表现良好，泛化不好叫过度拟合，反之欠拟合</p>
<p>8.模型训练就是通过训练数据找到算法最合适的参数</p>
<p>核心问题：算法好坏和数据好坏</p>
<p>复杂问题，数据比算法更重要</p>
<p>数据处理主要解决的问题：</p>
<p>1.数据量不足</p>
<p>2.训练数据不具备代表性</p>
<p>3.质量差的数据</p>
<p>4.特征筛选</p>
<h3 id="特征工程"><a class="markdownIt-Anchor" href="#特征工程"></a> 特征工程</h3>
<p>机器学习的关键是提取一组好的用来训练的特征集，这个过程叫特征工程，包括：</p>
<p>1.特征选择 从现有特征中选择最有用的特征进行训练</p>
<p>2.特征提取 将现有特征进行整合，产生更有用的特征，比如降维算法</p>
<p>3.通过收集 新数据创造新特征</p>
<p>机器学习项目的数据处理流程</p>
<p>1.真实数据观察全局</p>
<p>2.选择性能指标、检查假设</p>
<p>3.获取数据</p>
<p>​	创建工作区、快速查看数据结构、创建测试集</p>
<p>4.从可视化中探索数据</p>
<p>​	将数据可视化、寻找相关性、试验不同的属性组合</p>
<p>5.机器学习前的数据准备</p>
<p>​	数据清理、自定义转换器、特征缩放、转换流水线</p>
<p>6.选择训练模型</p>
<p>​	评估训练集、交叉验证、分析最佳模型及其错误、测试集评</p>
<p>7.模型调优</p>
<p>8.分析最佳模型和测试集评估</p>
<p>9.系统维护和监控</p>
<p>总结：</p>
<p>1.目标：给机器学习提供更好的数据，才可以得到精度高的模型，来预测新的数据</p>
<p>2.需要：</p>
<p>​	提供足够数据量的数据</p>
<p>​	训练数据要具备代表性</p>
<p>​	数据质量不能太差</p>
<p>​	关键部分是提取出一组好的特征集来训练模型</p>
<p>3.一个机器学习项目的完成流程 和 前期的数据处理与特征工程</p>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫</title>
    <url>/2020/03/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h1>
<h2 id="排序"><a class="markdownIt-Anchor" href="#排序"></a> 排序</h2>
<p>​		稳定性：任意相等的两个数据，排序前后的相对位置不会改变</p>
<h3 id="简单排序"><a class="markdownIt-Anchor" href="#简单排序"></a> 简单排序</h3>
<h4 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序"></a> 冒泡排序</h4>
<p>​			最好情况：顺序T=O(N)</p>
<p>​			最坏情况：逆序T=O(N^2)</p>
<p>稳定的排序算法</p>
<h4 id="插入排序"><a class="markdownIt-Anchor" href="#插入排序"></a> 插入排序</h4>
<p>​			最好情况：顺序T=O(N)</p>
<p>​			最坏情况：逆序T=O(N^2)</p>
<p>稳定的排序算法</p>
<h4 id="时间复杂度下界"><a class="markdownIt-Anchor" href="#时间复杂度下界"></a> 时间复杂度下界</h4>
<p>对于下标i&lt;j,</p>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫</title>
    <url>/2020/03/15/%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h1 id="爬虫"><a class="markdownIt-Anchor" href="#爬虫"></a> 爬虫</h1>
<h2 id="anaconda下载安装"><a class="markdownIt-Anchor" href="#anaconda下载安装"></a> Anaconda下载安装</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW5hY29uZGEuY29tL2Rpc3RyaWJ1dGlvbi8jZG93bmxvYWQtc2VjdGlvbg==">https://www.anaconda.com/distribution/#download-section<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="使用jupyter可实话"><a class="markdownIt-Anchor" href="#使用jupyter可实话"></a> 使用jupyter可实话</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">pip install jupyterlab</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行</span></span><br><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure>
<h2 id="爬虫分类"><a class="markdownIt-Anchor" href="#爬虫分类"></a> 爬虫分类</h2>
<p>通用爬虫</p>
<p>聚焦爬虫</p>
<p>增量式：</p>
<h2 id="反爬虫机制"><a class="markdownIt-Anchor" href="#反爬虫机制"></a> 反爬虫机制</h2>
<h2 id="反反爬策略"><a class="markdownIt-Anchor" href="#反反爬策略"></a> 反反爬策略</h2>
<p>robots.txt 协议：遵从或者不遵从</p>
<h2 id="下载fiddler抓包工具"><a class="markdownIt-Anchor" href="#下载fiddler抓包工具"></a> 下载fiddler抓包工具</h2>
<h2 id="request模块"><a class="markdownIt-Anchor" href="#request模块"></a> request模块</h2>
<p>指定url</p>
<p>发起请求</p>
<p>获取响应对象中的数据</p>
<p>持久化储存</p>
<p>re模块</p>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-哈希</title>
    <url>/2020/09/21/%E7%AE%97%E6%B3%95-%E5%93%88%E5%B8%8C/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>IT技术</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫</title>
    <url>/2020/03/15/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="网络编程"><a class="markdownIt-Anchor" href="#网络编程"></a> 网络编程</h1>
<h3 id="bs架构"><a class="markdownIt-Anchor" href="#bs架构"></a> BS架构</h3>
<p>浏览器</p>
<p>​		browser —&gt; server</p>
<h3 id="cs架构"><a class="markdownIt-Anchor" href="#cs架构"></a> CS架构</h3>
<p>客户端</p>
<p>​		client   ----&gt; server</p>
<h3 id="tcptransmission-control-protocol"><a class="markdownIt-Anchor" href="#tcptransmission-control-protocol"></a> TCP（Transmission Control Protocol）</h3>
<p>可靠的、面向连接的协议（eg:打电话）、传输效率低全双工通信（发送缓存&amp;接收缓存）、面向字节流。使用TCP的应用：Web浏览器；电子邮件、文件传输程序。</p>
<h3 id="udpuser-datagram-protocol"><a class="markdownIt-Anchor" href="#udpuser-datagram-protocol"></a> UDP（User Datagram Protocol）</h3>
<p>不可靠的、无连接的服务，传输效率高（发送前时延小），一对一、一对多、多对一、多对多、面向报文，尽最大努力服务，无拥塞控制。使用UDP的应用：域名系统 (DNS)；视频流；IP语音(VoIP)。</p>
<h3 id="初识socket基于socket实现网络通信"><a class="markdownIt-Anchor" href="#初识socket基于socket实现网络通信"></a> 初识socket（基于socket实现网络通信）</h3>
<p>创建服务器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建socket对象</span></span><br><span class="line">server = socket.socket()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定Ip和端口</span></span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">3000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后边可以等5个人</span></span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待客户端来连接</span></span><br><span class="line">conn, addr = server.accept()</span><br><span class="line"><span class="built_in">print</span>(conn, addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过对象去获取（通过伞给我发送信息）</span></span><br><span class="line"><span class="comment"># 1024表示：服务端通过（伞）获取数据时，一次性最多拿1024字节。</span></span><br><span class="line">data = conn.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端通过链接对象（伞）给客户端回复一个消息</span></span><br><span class="line">conn.send(<span class="string">b&#x27;stop&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与客户端端口开链接（放开那把伞）</span></span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭服务端的服务</span></span><br><span class="line">server.close()</span><br></pre></td></tr></table></figure>
<p>创建客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">client = socket.socket()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户向服务端发请求（递伞）</span></span><br><span class="line"><span class="comment"># 阻塞，去连接，直到连接成功</span></span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">3000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接上服务端后，向服务端发送消息</span></span><br><span class="line">client.send(<span class="string">b&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待服务端给他发送消息</span></span><br><span class="line">data = client.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭自己</span></span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<p>​	py3，send / recv 都是字节，unicode，为了压缩数据</p>
<p>​	py2 , send /recv 都是字符串</p>
<p>windows中会话间关闭客户端，服务端会报错，而mac会返回空</p>
<h3 id="黏包现象"><a class="markdownIt-Anchor" href="#黏包现象"></a> 黏包现象</h3>
<p>客户端发送请求，服务端返回的数据超过固定读取的字节数，</p>
<p>黏包：两次 sand 连在一起发送</p>
<p>方式一：分为两次发送</p>
<h3 id="模拟ssh"><a class="markdownIt-Anchor" href="#模拟ssh"></a> 模拟SSH</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以输入终端指令，进行验证</span></span><br><span class="line">res = subprocess.Popen(<span class="string">&#x27;dir&#x27;</span>, shell=<span class="literal">True</span>,</span><br><span class="line">                       stderr=subprocess.PIPE, stdout=subprocess.PIPE)</span><br><span class="line"><span class="comment"># 由于时在windows中 cmd 是 gbk，</span></span><br><span class="line"><span class="built_in">print</span>(res.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h1 id="并发和并行"><a class="markdownIt-Anchor" href="#并发和并行"></a> 并发和并行</h1>
<p>并发，伪，由于执行速度特别快，人感觉不到停顿</p>
<p>并行，真，创建10个人同时操作</p>
<p>python多线程情况下：</p>
<ul>
<li>计算密集型操作：效率低。（GIL锁）</li>
<li>IO操作：效率高</li>
</ul>
<p>python多进程的情况下：</p>
<ul>
<li>计算密集型操作：效率高（浪费资源）</li>
<li>IO操作：效率高（浪费资源）</li>
</ul>
<p>IO密集型多线程：文件/输入输出/socket网络通信</p>
<p>计算密集型用多进程：</p>
<h2 id="gil锁"><a class="markdownIt-Anchor" href="#gil锁"></a> GIL锁</h2>
<p>全局解释器锁。用于限制一个进程中同一时刻只有一个线程被cpu调度。</p>
<p>扩展：默认GIL锁在执行100个cpu指令.</p>
<p>主线程会默认等子线程</p>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>
