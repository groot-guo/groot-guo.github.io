<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>爬虫</title>
    <url>/blog/2061376860.html</url>
    <content><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>​		稳定性：任意相等的两个数据，排序前后的相对位置不会改变</p>
<h3 id="简单排序"><a href="#简单排序" class="headerlink" title="简单排序"></a>简单排序</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>​			最好情况：顺序T&#x3D;O(N)</p>
<p>​			最坏情况：逆序T&#x3D;O(N^2)</p>
<p>稳定的排序算法</p>
<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>​			最好情况：顺序T&#x3D;O(N)</p>
<p>​			最坏情况：逆序T&#x3D;O(N^2)</p>
<p>稳定的排序算法</p>
<h4 id="时间复杂度下界"><a href="#时间复杂度下界" class="headerlink" title="时间复杂度下界"></a>时间复杂度下界</h4><p>对于下标i&lt;j,</p>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/blog/1243066710.html</url>
    <content><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo<i class="fa fa-external-link-alt"></i></span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation<i class="fa fa-external-link-alt"></i></span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting<i class="fa fa-external-link-alt"></i></span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub<i class="fa fa-external-link-alt"></i></span>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s">Deployment<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
  </entry>
  <entry>
    <title>爬虫</title>
    <url>/blog/2061376863.html</url>
    <content><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h3 id="BS架构"><a href="#BS架构" class="headerlink" title="BS架构"></a>BS架构</h3><p>浏览器   </p>
<p>​		browser —&gt; server</p>
<h3 id="CS架构"><a href="#CS架构" class="headerlink" title="CS架构"></a>CS架构</h3><p>客户端</p>
<p>​		client   —-&gt; server</p>
<h3 id="TCP（Transmission-Control-Protocol）"><a href="#TCP（Transmission-Control-Protocol）" class="headerlink" title="TCP（Transmission Control Protocol）"></a>TCP（Transmission Control Protocol）</h3><p>可靠的、面向连接的协议（eg:打电话）、传输效率低全双工通信（发送缓存&amp;接收缓存）、面向字节流。使用TCP的应用：Web浏览器；电子邮件、文件传输程序。</p>
<h3 id="UDP（User-Datagram-Protocol）"><a href="#UDP（User-Datagram-Protocol）" class="headerlink" title="UDP（User Datagram Protocol）"></a>UDP（User Datagram Protocol）</h3><p>不可靠的、无连接的服务，传输效率高（发送前时延小），一对一、一对多、多对一、多对多、面向报文，尽最大努力服务，无拥塞控制。使用UDP的应用：域名系统 (DNS)；视频流；IP语音(VoIP)。</p>
<h3 id="初识socket（基于socket实现网络通信）"><a href="#初识socket（基于socket实现网络通信）" class="headerlink" title="初识socket（基于socket实现网络通信）"></a>初识socket（基于socket实现网络通信）</h3><p>创建服务器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建socket对象</span></span><br><span class="line">server = socket.socket()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定Ip和端口</span></span><br><span class="line">server.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">3000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 后边可以等5个人</span></span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待客户端来连接</span></span><br><span class="line">conn, addr = server.accept()</span><br><span class="line"><span class="built_in">print</span>(conn, addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过对象去获取（通过伞给我发送信息）</span></span><br><span class="line"><span class="comment"># 1024表示：服务端通过（伞）获取数据时，一次性最多拿1024字节。</span></span><br><span class="line">data = conn.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端通过链接对象（伞）给客户端回复一个消息</span></span><br><span class="line">conn.send(<span class="string">b&#x27;stop&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与客户端端口开链接（放开那把伞）</span></span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭服务端的服务</span></span><br><span class="line">server.close()</span><br></pre></td></tr></table></figure>

<p>创建客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">client = socket.socket()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户向服务端发请求（递伞）</span></span><br><span class="line"><span class="comment"># 阻塞，去连接，直到连接成功</span></span><br><span class="line">client.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">3000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接上服务端后，向服务端发送消息</span></span><br><span class="line">client.send(<span class="string">b&#x27;hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待服务端给他发送消息</span></span><br><span class="line">data = client.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭自己</span></span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>​	py3，send &#x2F; recv 都是字节，unicode，为了压缩数据</p>
<p>​	py2 , send &#x2F;recv 都是字符串</p>
<p>windows中会话间关闭客户端，服务端会报错，而mac会返回空</p>
<h3 id="黏包现象"><a href="#黏包现象" class="headerlink" title="黏包现象"></a>黏包现象</h3><p>客户端发送请求，服务端返回的数据超过固定读取的字节数，</p>
<p>黏包：两次 sand 连在一起发送</p>
<p>方式一：分为两次发送</p>
<h3 id="模拟SSH"><a href="#模拟SSH" class="headerlink" title="模拟SSH"></a>模拟SSH</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以输入终端指令，进行验证</span></span><br><span class="line">res = subprocess.Popen(<span class="string">&#x27;dir&#x27;</span>, shell=<span class="literal">True</span>,</span><br><span class="line">                       stderr=subprocess.PIPE, stdout=subprocess.PIPE)</span><br><span class="line"><span class="comment"># 由于时在windows中 cmd 是 gbk，</span></span><br><span class="line"><span class="built_in">print</span>(res.stdout.read().decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h1 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h1><p>并发，伪，由于执行速度特别快，人感觉不到停顿</p>
<p>并行，真，创建10个人同时操作</p>
<p>python多线程情况下：</p>
<ul>
<li>计算密集型操作：效率低。（GIL锁）</li>
<li>IO操作：效率高</li>
</ul>
<p>python多进程的情况下：</p>
<ul>
<li>计算密集型操作：效率高（浪费资源）</li>
<li>IO操作：效率高（浪费资源）</li>
</ul>
<p>IO密集型多线程：文件&#x2F;输入输出&#x2F;socket网络通信</p>
<p>计算密集型用多进程：</p>
<h2 id="GIL锁"><a href="#GIL锁" class="headerlink" title="GIL锁"></a>GIL锁</h2><p>全局解释器锁。用于限制一个进程中同一时刻只有一个线程被cpu调度。</p>
<p>扩展：默认GIL锁在执行100个cpu指令.</p>
<p>主线程会默认等子线程</p>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫</title>
    <url>/blog/2061376862.html</url>
    <content><![CDATA[<h1 id="jupyter-notebook"><a href="#jupyter-notebook" class="headerlink" title="jupyter notebook"></a>jupyter notebook</h1><p>魔法命令</p>
<h2 id="Numpy-安装与导入"><a href="#Numpy-安装与导入" class="headerlink" title="Numpy 安装与导入"></a>Numpy 安装与导入</h2><p>安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install numpy</span><br></pre></td></tr></table></figure>



<h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><p>机器学习：学习一种学习算法，从数据中学习并建立成模型来对新的数据进行预测的计算科学。</p>
<p>适用于：</p>
<p>1.不存在已知算法解决方案的复杂问题</p>
<p>2.需要大量手动调整或者规则列表超长的问题</p>
<p>3.可以适应环境波动的系统</p>
<p>基础概念：</p>
<p>1.提供给算法的包含所需解决方案的训练数据，称为标签</p>
<p>2.属性加上其值，就是特征</p>
<p>3.通过给定的特征来预测一个目标数值，叫回归任务</p>
<p>4.用于训练模型的数据叫数据集</p>
<p>5.用于测试模型精度的数据叫测试集</p>
<p>6.每一条数据叫一个样本（x），样本对应的结果叫标签（y0）</p>
<p>7.模型在训练数据上表现良好，泛化不好叫过度拟合，反之欠拟合</p>
<p>8.模型训练就是通过训练数据找到算法最合适的参数</p>
<p>核心问题：算法好坏和数据好坏</p>
<p>复杂问题，数据比算法更重要</p>
<p>数据处理主要解决的问题：</p>
<p>1.数据量不足</p>
<p>2.训练数据不具备代表性</p>
<p>3.质量差的数据</p>
<p>4.特征筛选</p>
<h3 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h3><p>机器学习的关键是提取一组好的用来训练的特征集，这个过程叫特征工程，包括：</p>
<p>1.特征选择 从现有特征中选择最有用的特征进行训练</p>
<p>2.特征提取 将现有特征进行整合，产生更有用的特征，比如降维算法</p>
<p>3.通过收集 新数据创造新特征</p>
<p>机器学习项目的数据处理流程</p>
<p>1.真实数据观察全局</p>
<p>2.选择性能指标、检查假设</p>
<p>3.获取数据</p>
<p>​	创建工作区、快速查看数据结构、创建测试集</p>
<p>4.从可视化中探索数据</p>
<p>​	将数据可视化、寻找相关性、试验不同的属性组合</p>
<p>5.机器学习前的数据准备</p>
<p>​	数据清理、自定义转换器、特征缩放、转换流水线</p>
<p>6.选择训练模型</p>
<p>​	评估训练集、交叉验证、分析最佳模型及其错误、测试集评</p>
<p>7.模型调优</p>
<p>8.分析最佳模型和测试集评估</p>
<p>9.系统维护和监控</p>
<p>总结：</p>
<p>1.目标：给机器学习提供更好的数据，才可以得到精度高的模型，来预测新的数据</p>
<p>2.需要：</p>
<p>​	提供足够数据量的数据</p>
<p>​	训练数据要具备代表性</p>
<p>​	数据质量不能太差</p>
<p>​	关键部分是提取出一组好的特征集来训练模型</p>
<p>3.一个机器学习项目的完成流程 和 前期的数据处理与特征工程</p>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫</title>
    <url>/blog/2061376861.html</url>
    <content><![CDATA[<h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><h2 id="Anaconda下载安装"><a href="#Anaconda下载安装" class="headerlink" title="Anaconda下载安装"></a>Anaconda下载安装</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW5hY29uZGEuY29tL2Rpc3RyaWJ1dGlvbi8jZG93bmxvYWQtc2VjdGlvbg==">https://www.anaconda.com/distribution/#download-section<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="使用jupyter可实话"><a href="#使用jupyter可实话" class="headerlink" title="使用jupyter可实话"></a>使用jupyter可实话</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">pip install jupyterlab</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行</span></span><br><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure>



<h2 id="爬虫分类"><a href="#爬虫分类" class="headerlink" title="爬虫分类"></a>爬虫分类</h2><p>通用爬虫</p>
<p>聚焦爬虫</p>
<p>增量式：</p>
<h2 id="反爬虫机制"><a href="#反爬虫机制" class="headerlink" title="反爬虫机制"></a>反爬虫机制</h2><h2 id="反反爬策略"><a href="#反反爬策略" class="headerlink" title="反反爬策略"></a>反反爬策略</h2><p>robots.txt 协议：遵从或者不遵从</p>
<h2 id="下载fiddler抓包工具"><a href="#下载fiddler抓包工具" class="headerlink" title="下载fiddler抓包工具"></a>下载fiddler抓包工具</h2><h2 id="request模块"><a href="#request模块" class="headerlink" title="request模块"></a>request模块</h2><p>指定url</p>
<p>发起请求</p>
<p>获取响应对象中的数据</p>
<p>持久化储存</p>
<p>re模块</p>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>
